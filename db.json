{"meta":{"version":1,"warehouse":"1.0.1"},"models":{"Asset":[{"_id":"themes/light/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":0},{"_id":"themes/light/source/js/gallery.js","path":"js/gallery.js","modified":0},{"_id":"themes/light/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/light/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/light/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0},{"_id":"themes/light/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/light/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/light/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0},{"_id":"themes/light/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/light/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/light/source/css/style.styl","path":"css/style.styl","modified":0},{"_id":"themes/light/source/css/font/fontawesome-webfont.woff","path":"css/font/fontawesome-webfont.woff","modified":0},{"_id":"themes/light/source/css/font/fontawesome-webfont.ttf","path":"css/font/fontawesome-webfont.ttf","modified":0},{"_id":"themes/light/source/css/font/fontawesome-webfont.svg","path":"css/font/fontawesome-webfont.svg","modified":0},{"_id":"themes/light/source/css/font/fontawesome-webfont.eot","path":"css/font/fontawesome-webfont.eot","modified":0}],"Cache":[{"_id":"source/_drafts/draft1.md","shasum":"d35612a9299742dcc1041f5e482e822fe83a8c5c","modified":1426864888084},{"_id":"source/_drafts/js-function-args-reference.md","shasum":"59b87d6153db5dbcaf4ed1008a6c54aecdb16222","modified":1432953150146},{"_id":"source/_drafts/learning-es6-with-babel-template-string.md","shasum":"9f21098ed567b5284bb5be20d1e5d773315efd81","modified":1429536291515},{"_id":"source/_posts/2013-12-02-javascript-good-parts-ch2.md","shasum":"6396e1144ba98c2a02ebd71bed4001d25f7c1fec","modified":1429534668797},{"_id":"source/_posts/2013-12-03-javascript-good-parts-ch3.md","shasum":"ba6cbde24407aeb194eac6e4993a976a9d224041","modified":1429535135702},{"_id":"source/_posts/2013-12-04-javascript-good-parts-ch4.md","shasum":"061c53f5576dc6f2a343e9dc9d3e6ec34b26bf2d","modified":1429535135709},{"_id":"source/_posts/2013-12-07-168754.md","shasum":"f29a71f02a6663d4b2bd58527e47ca4e9ec9ac7c","modified":1429535135695},{"_id":"source/_posts/2013-12-09-javascript-good-parts-ch4-9.md","shasum":"04784f1ff4c8cc814030c02030bc54530dde9aad","modified":1429535135722},{"_id":"source/_posts/2013-12-11-javascript-good-parts-ch4-11.md","shasum":"4a413fb81dd3b6b7368353cb7abbe9d146eff902","modified":1429535135716},{"_id":"source/_posts/2013-12-14-javascript-good-parts-ch5.md","shasum":"803a59fe8a89b0411942eb6edf1e9bd017d00ca3","modified":1429535135674},{"_id":"source/_posts/2013-12-18-github-pages-octopress-on-windows.md","shasum":"06e70b51995988a586b1235090f0d2fa2a50aba7","modified":1429535135689},{"_id":"source/_posts/2013-12-18-javascript-good-parts-ch5-19.md","shasum":"752288f338981351d6e71094877151476ad6c71c","modified":1429535710285},{"_id":"source/_posts/2013-12-19-javascript-good-parts-ch6.md","shasum":"3a0289bf518ff5706b98693d452dbc8adeba7439","modified":1429535710252},{"_id":"source/_drafts/learning-es6-with-babel-Class.md","shasum":"e997ea904a4787289bdbcf2126aadfe8aa91160f","modified":1427810493013},{"_id":"source/_drafts/yql-for-ten-minutes-easy.md","shasum":"b6aece097b7c461c1602ae54bf9c6377161e904b","modified":1429534583692},{"_id":"source/_posts/2013-12-24-moved-from-blogger-to-logdown.md","shasum":"46382e3e715c7eded61939e7aa7d52339ab94094","modified":1429535710278},{"_id":"source/_posts/2013-12-24-note-javascriptthe-good-parts-bad-part-1.md","shasum":"51b26a168e35c1d33c1c7f851f5ed832e9179c43","modified":1429535710261},{"_id":"source/_posts/2013-12-31-note-javascriptthe-good-parts-bad-part-2.md","shasum":"43aee07942f4f5b259d605c73236adc7669f89ff","modified":1429535710243},{"_id":"source/_posts/2014-01-01-notenet-npoi.md","shasum":"0f9d31ae86e0465ee922da7244146c2d408725a3","modified":1429534583695},{"_id":"source/_posts/2014-01-04-jquerydatepicker-republic-of-china.md","shasum":"0115bfc27853dc27976052ff8b6a97c722370d3e","modified":1429534478733},{"_id":"source/_posts/2014-01-11-experiencejquery-widget-factory.md","shasum":"379377062aaa713ed82d76149498615b19822378","modified":1429534478737},{"_id":"source/_posts/2014-01-11-output-on-top-of-the-picture-message-jquery-plugin-commentonphoto.md","shasum":"af47a3a1fccfc6e4cc729fe339462339576465c0","modified":1429534478708},{"_id":"source/_posts/2014-01-15--number-of-kaohsiung-mrt-station.md","shasum":"e81cc417b64be3fa9d9f24b206b4f35d925266a4","modified":1429534478754},{"_id":"source/_posts/2014-01-17-notes-on-loading-script.md","shasum":"73225d784c1f5a100933f27e6bd8a16a3235aa42","modified":1429534478777},{"_id":"source/_posts/2014-01-23-experience-media-query-with-less.md","shasum":"bdc53e39e1ae019d3d84454849b2f0671dbb01e2","modified":1429534478760},{"_id":"source/_posts/2014-01-23-note-css-media-query.md","shasum":"5d33df13294bef34d9e72453c2e441785074d3fe","modified":1429534478725},{"_id":"source/_posts/2014-02-03-experience-image-beacon.md","shasum":"9b977bf237534dbd4926793c8dfbbf7434c0effe","modified":1429534478747},{"_id":"source/_posts/2014-02-03-note-webclient-side-separation-of-concerns.md","shasum":"4311cfd93f2d18e33d360d61dfd8a02f706566d7","modified":1429534478717},{"_id":"source/_posts/2014-02-04-note-of-semantic-html.md","shasum":"72dcd0970fafea3ed6a0b8a253cb6caa8a8f5a32","modified":1429534478751},{"_id":"source/_posts/2014-02-10-note-flex-with-less.md","shasum":"78b5a105c45ecc66171bf8b108d2c2ba73ad16dc","modified":1429534478743},{"_id":"source/_posts/2014-03-08-note-in-webstorm-added-compass-syntax-tips.md","shasum":"088ebccb95b29fc8f40e5da04bb59b38dfa2d187","modified":1429534478781},{"_id":"source/_posts/2014-03-08-note-sass-with-webstorm.md","shasum":"18e09e53175a230283cd3ed39c4e9cca4bcc5f2f","modified":1429534478701},{"_id":"source/_posts/2014-03-26-note-chrome-workspace-with-sass-and-compass.md","shasum":"8c81369417ca77512e6c0f0705508338ac2fa841","modified":1429535710269},{"_id":"source/_posts/2014-04-30-note-cordova-with-jquery-mobile.md","shasum":"fcbbfa2cac73017a51eb43ea1425d3fe8269070d","modified":1429534478681},{"_id":"source/_posts/2014-05-17-note-cordova-34-with-wp8-minesweeper-records.md","shasum":"1848e099836da1b535668e261ff3f4f17ac45a8c","modified":1429534478785},{"_id":"source/_posts/2014-05-26-note-cordova-trouble-shooting.md","shasum":"68611a32c8e5835da8ebe3249827888ce8e9bb46","modified":1429534478768},{"_id":"source/_posts/2014-05-29-experience-debug-cordova-app-with-android-44-and-chrome.md","shasum":"cb6ba9fbab57781701abcd9dd6e7957c66a2055c","modified":1429534478713},{"_id":"source/_posts/2015-02-26-move-from-logdown-to-hexo.md","shasum":"4a250c46d352661541a458f0e8905bba3dd1a658","modified":1429534478771},{"_id":"source/_posts/2015-03-15-learn-es6-with-babel.md","shasum":"311a308ddfc2d62d6e6f7858444c933495d4ac4e","modified":1429534478730},{"_id":"source/_posts/2015-03-20-learning-es6-with-babel-const.md","shasum":"682ec12a1001d8f25548bf43271aa997fbab0730","modified":1429534478757},{"_id":"source/_posts/2015-03-20-learning-es6-with-babel-let.md","shasum":"29e860820a712d8a72b8d3b5d00589c795cc7d7c","modified":1429534478764},{"_id":"source/_posts/2015-q3q4-todo.md","shasum":"5828ad5217ae36d288a2423bc8774ebe18cc710d","modified":1433426530988},{"_id":"source/_drafts/talking-about-hybrid-apps.md","shasum":"04fdae27e68c575ec8bed91c9991580d64fdb1fb","modified":1432953150148},{"_id":"themes/light/source/css/_base/utils.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1427117398712},{"_id":"themes/light/_config.yml","shasum":"c9893508c68c9077d3035e0599b4c27a3901ec2c","modified":1427117398497},{"_id":"themes/light/languages/de.yml","shasum":"1ebe2d4f1b48c84e004c933bec65731fb54c9998","modified":1427117398500},{"_id":"source/_posts/2015-q1q2-review.md","shasum":"972fa6bd51176378dcf9de091ca54a4001b10813","modified":1433058561777},{"_id":"themes/light/languages/default.yml","shasum":"feb1dd022dc8897d65baa5b927de2a3d4178d798","modified":1427117398503},{"_id":"themes/light/languages/es.yml","shasum":"727707b95580bbe9773edef4c84a9735fd537742","modified":1427117398506},{"_id":"themes/light/languages/ru.yml","shasum":"37161bb9b6cc2dae1f53837185be32e7a0b8abfa","modified":1427117398508},{"_id":"themes/light/languages/zh-TW.yml","shasum":"b2474b775a8fa0fa3e9e3c58ddb11b20cf65dbc5","modified":1427117398514},{"_id":"themes/light/languages/zh-CN.yml","shasum":"751f1a2bbfb6736c71e846493ae0fb7ef7dc778d","modified":1427117398511},{"_id":"themes/light/LICENSE","shasum":"17d3ed51d6d6962155f7dacd4f101f4969ad0bbe","modified":1427117398490},{"_id":"themes/light/README.md","shasum":"f9adc61563e8824ec507911dc7df70655a534378","modified":1427117398494},{"_id":"themes/light/layout/_partial/after_footer.ejs","shasum":"ef5e7c5e3a05c80f25a7173ea742646bb521cfed","modified":1427117398524},{"_id":"themes/light/layout/_partial/archive.ejs","shasum":"eaab5ad657f16dfc6cff6f462e1234c3cb8f23a0","modified":1427117398534},{"_id":"themes/light/layout/_partial/article.ejs","shasum":"57bf574e0c7955b532903a3f3ba7218235b16d8f","modified":1427117398543},{"_id":"themes/light/layout/_partial/comment.ejs","shasum":"56786339f66a1fb56d29070633b27bd34ae3f9c3","modified":1427117398551},{"_id":"themes/light/layout/_partial/footer.ejs","shasum":"092bea0a0cdb4ab976723bbce3771bc35a96fdc6","modified":1427117398560},{"_id":"themes/light/layout/_partial/facebook_comment.ejs","shasum":"49ee54e84fe2b70bd9540e2eeba5a85f744941b0","modified":1427117398557},{"_id":"themes/light/layout/_partial/header.ejs","shasum":"73c45d7426009feb495710b054868a7f10616178","modified":1427117398581},{"_id":"themes/light/layout/_partial/google_analytics.ejs","shasum":"06816997ff115a07fce5402fe53826a3a85f6147","modified":1427117398570},{"_id":"themes/light/layout/_partial/post/gallery.ejs","shasum":"fc23ef9b5a412e05436f68ff47146b860d2d4225","modified":1427117398592},{"_id":"themes/light/layout/_partial/pagination.ejs","shasum":"5a3c65842354b04c7839c915c045d39be9342cdf","modified":1427117398584},{"_id":"themes/light/layout/_partial/post/share.ejs","shasum":"991cf130c37f08c7e948772fb45587592b165b55","modified":1427117398597},{"_id":"themes/light/layout/_partial/head.ejs","shasum":"2e76dc3c550fcbce0d5dcf5a4b7a11ef1203c3e7","modified":1427117398578},{"_id":"themes/light/layout/_partial/post/category.ejs","shasum":"8bb3f6ee6296df5a0d527b30d5a46a2387b97cb7","modified":1427117398591},{"_id":"themes/light/layout/_partial/post/title.ejs","shasum":"7f93b310927d6238effdde15234d8cb242940893","modified":1427117398606},{"_id":"themes/light/layout/_widget/category.ejs","shasum":"c163a146b0f963f257ddcc244f413bef281fe0a0","modified":1427117398617},{"_id":"themes/light/layout/_partial/post/tag.ejs","shasum":"b21bbfb5479bd5968a610ba8bdb2bdf10d7a40e9","modified":1427117398603},{"_id":"themes/light/layout/_partial/sidebar.ejs","shasum":"016441ca9534769d8e151cffe4027686e9c86f18","modified":1427117398612},{"_id":"themes/light/layout/_widget/recent_posts.ejs","shasum":"59f6f8362fa23a6215e3381151a59c2e2a5fd0d3","modified":1427117398621},{"_id":"themes/light/layout/_widget/search.ejs","shasum":"93d4a690494dfa405024f23511846ea00d647be7","modified":1427117398624},{"_id":"themes/light/layout/_widget/tagcloud.ejs","shasum":"139e91b1e6abcc1e3883bcc03a9a1a7f1d891d7a","modified":1427117398632},{"_id":"themes/light/layout/archive.ejs","shasum":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1427117398633},{"_id":"themes/light/layout/_widget/tag.ejs","shasum":"6bf8214fedb8d6306e017e07ad67aab956496500","modified":1427117398629},{"_id":"themes/light/layout/category.ejs","shasum":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1427117398633},{"_id":"themes/light/layout/page.ejs","shasum":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1427117398706},{"_id":"themes/light/layout/post.ejs","shasum":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1427117398707},{"_id":"themes/light/layout/layout.ejs","shasum":"6999916072898aedfe13f4a07211dd1578ad4799","modified":1427117398638},{"_id":"themes/light/layout/tag.ejs","shasum":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1427117398708},{"_id":"themes/light/layout/index.ejs","shasum":"c7cf84c84c26f1adfc249bc9a7605206fa245f73","modified":1427117398634},{"_id":"themes/light/source/css/_base/layout.styl","shasum":"b26cd4768466f637b620029b314dd50a06c98b8c","modified":1427117398712},{"_id":"themes/light/source/css/_partial/archive.styl","shasum":"b6fa84ea80bfbdb3a93f64c06a8c652e4242128e","modified":1427117398719},{"_id":"themes/light/source/css/_base/variable.styl","shasum":"832fecbb623c8fba9419d6a93586126d44b43cc6","modified":1427117398716},{"_id":"themes/light/source/css/_partial/comment.styl","shasum":"6fa67d96903ac3b1674e6c8d4c801e16115808e0","modified":1427117398727},{"_id":"themes/light/source/css/_partial/footer.styl","shasum":"821d50a9d45afec0274e1e64c2b37a71f3611c01","modified":1427117398730},{"_id":"themes/light/source/css/_partial/header.styl","shasum":"ad67bf40a0cafb1e5514b058c853c517e602fe44","modified":1427117398733},{"_id":"themes/light/source/css/_partial/article.styl","shasum":"9efddb26851b45a536898a84f6fa1ccf71920fca","modified":1427117398724},{"_id":"themes/light/source/css/_partial/index.styl","shasum":"eb0f1536a57cca57d9a280191fbb63185c266ee8","modified":1427117398736},{"_id":"themes/light/source/css/_partial/sidebar.styl","shasum":"213a16c3206d045ca01b0abf8891e96421d61fb9","modified":1427117398740},{"_id":"themes/light/source/css/_partial/syntax.styl","shasum":"bb6d6441aad58af730140bac83c880ac3050bd77","modified":1427117398743},{"_id":"themes/light/source/css/font/fontawesome-webfont.woff","shasum":"0612cddf2f835cceffccc88fd194f97367d0b024","modified":1427117398816},{"_id":"themes/light/source/css/style.styl","shasum":"8e8458e78717c49c4ff278b741258d77301f6be4","modified":1427117398819},{"_id":"themes/light/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1427117398820},{"_id":"themes/light/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1427117398821},{"_id":"themes/light/source/css/font/fontawesome-webfont.eot","shasum":"d775f599ff3f23be082e6a9604b4898718923a37","modified":1427117398760},{"_id":"themes/light/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1427117398822},{"_id":"themes/light/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1427117398823},{"_id":"themes/light/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1427117398824},{"_id":"themes/light/source/fancybox/jquery.fancybox.css","shasum":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1427117398829},{"_id":"themes/light/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1427117398825},{"_id":"themes/light/source/css/font/fontawesome-webfont.ttf","shasum":"a9468f6a1fe965fbcaf5a1bd6c11705e2fc5f84c","modified":1427117398812},{"_id":"themes/light/source/js/jquery.imagesloaded.min.js","shasum":"28ef4346743a60c896a9ae492a544c0854904350","modified":1427117398847},{"_id":"themes/light/source/css/font/fontawesome-webfont.svg","shasum":"ff51bbb11dfe58345f41cead2c425d6e8be28176","modified":1427117398804},{"_id":"themes/light/source/js/gallery.js","shasum":"735a714e54f0ac229f292a90df3a1f882904f6c7","modified":1427117398846},{"_id":"themes/light/source/fancybox/jquery.fancybox.pack.js","shasum":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1427117398841},{"_id":"public/js/jquery.imagesloaded.min.js","modified":1433426556697,"shasum":"4109837b1f6477bacc6b095a863b1b95b1b3693f"},{"_id":"public/js/gallery.js","modified":1433426556704,"shasum":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1433426556708,"shasum":"53360764b429c212f424399384417ccc233bb3be"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1433426556712,"shasum":"5f163444617b6cf267342f06ac166a237bb62df9"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1433426556724,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1433426556731,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1433426556735,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1433426556739,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1433426556751,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1433426556756,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1433426557355,"shasum":"c1f50770fa10e71f85c4b7f26bb821924de38f53"},{"_id":"public/css/font/fontawesome-webfont.woff","modified":1433426557452,"shasum":"0612cddf2f835cceffccc88fd194f97367d0b024"},{"_id":"public/css/font/fontawesome-webfont.ttf","modified":1433426557455,"shasum":"a9468f6a1fe965fbcaf5a1bd6c11705e2fc5f84c"},{"_id":"public/css/font/fontawesome-webfont.svg","modified":1433426557459,"shasum":"ff51bbb11dfe58345f41cead2c425d6e8be28176"},{"_id":"public/css/font/fontawesome-webfont.eot","modified":1433426557461,"shasum":"d775f599ff3f23be082e6a9604b4898718923a37"},{"_id":"public/2015/06/04/2015-q3q4-todo/index.html","modified":1433426557487,"shasum":"65c423099dc83120ae2da0cfe8ff54fc8e4ae85a"},{"_id":"public/2015/05/31/2015-q1q2-review/index.html","modified":1433426557500,"shasum":"e4db1ba2eb4457f00e332bc4054cf4b1003e5226"},{"_id":"public/2015/03/20/2015-03-20-learning-es6-with-babel-const/index.html","modified":1433426557511,"shasum":"c794af704dd1670b67160a17f17bc6f74c336591"},{"_id":"public/2015/03/20/2015-03-20-learning-es6-with-babel-let/index.html","modified":1433426557520,"shasum":"77b47fa1db70d61f6974788542a7521e13c96029"},{"_id":"public/2015/03/15/2015-03-15-learn-es6-with-babel/index.html","modified":1433426557539,"shasum":"c20a724ed123b0c9574a8091c39fbfda47cf24fd"},{"_id":"public/2015/02/26/2015-02-26-move-from-logdown-to-hexo/index.html","modified":1433426557546,"shasum":"4e415e6f8da8836c3708f2c24439c807d70e4668"},{"_id":"public/2014/05/29/2014-05-29-experience-debug-cordova-app-with-android-44-and-chrome/index.html","modified":1433426557554,"shasum":"9304715caf5be6da45cb12d58adceda536a194b8"},{"_id":"public/2014/05/26/2014-05-26-note-cordova-trouble-shooting/index.html","modified":1433426557562,"shasum":"45c5cb649435e46e17ef2bbc5f29335a9fb8c2db"},{"_id":"public/2014/05/17/2014-05-17-note-cordova-34-with-wp8-minesweeper-records/index.html","modified":1433426557570,"shasum":"271bd353ab5a9f09a4c33d9f9628b0514b95dde9"},{"_id":"public/2014/04/30/2014-04-30-note-cordova-with-jquery-mobile/index.html","modified":1433426557579,"shasum":"a61fcbe82ed420f6883eef4ac8c2f04a12863db2"},{"_id":"public/2014/03/26/2014-03-26-note-chrome-workspace-with-sass-and-compass/index.html","modified":1433426557586,"shasum":"5b08b38314f9ec0fc707703edecd4a9af1f70bbf"},{"_id":"public/2014/03/08/2014-03-08-note-in-webstorm-added-compass-syntax-tips/index.html","modified":1433426557593,"shasum":"db83bc6f1adfbedc5be37f38bf9b0389daa8babc"},{"_id":"public/2014/03/08/2014-03-08-note-sass-with-webstorm/index.html","modified":1433426557600,"shasum":"db5d5115faf6288acb16b24d1948037304183df6"},{"_id":"public/2014/02/10/2014-02-10-note-flex-with-less/index.html","modified":1433426557607,"shasum":"3a755ac30c2e7c8db9a7c3d0fc5ea88201e4a2b9"},{"_id":"public/2014/02/04/2014-02-04-note-of-semantic-html/index.html","modified":1433426557613,"shasum":"df5590f50f687e2b098ff7734d38a07275e96a11"},{"_id":"public/2014/02/03/2014-02-03-note-webclient-side-separation-of-concerns/index.html","modified":1433426557624,"shasum":"a34dd43c11deb2440859518d9afae5dd6fd3311c"},{"_id":"public/2014/02/03/2014-02-03-experience-image-beacon/index.html","modified":1433426557632,"shasum":"1bf5f24ea178f1d6b5472c551bf85e0b0a3a4cd2"},{"_id":"public/2014/01/23/2014-01-23-experience-media-query-with-less/index.html","modified":1433426557640,"shasum":"5ebaeba8aaf4299891d421edca61ac78b26d8071"},{"_id":"public/2014/01/23/2014-01-23-note-css-media-query/index.html","modified":1433426557646,"shasum":"c5db9097bdc7f5ab00b6eda5b19742e6088a9a4f"},{"_id":"public/2014/01/17/2014-01-17-notes-on-loading-script/index.html","modified":1433426557653,"shasum":"5d94aa1c2e4bac5bf978938f538264f703a770c5"},{"_id":"public/2014/01/15/2014-01-15--number-of-kaohsiung-mrt-station/index.html","modified":1433426557660,"shasum":"fa355f7fc1bbb55b7e00466ffa8d900ea66e9c50"},{"_id":"public/2014/01/11/2014-01-11-experiencejquery-widget-factory/index.html","modified":1433426557668,"shasum":"374fa6ea6a989549b8b5c22d4acf28ffc584305b"},{"_id":"public/2014/01/11/2014-01-11-output-on-top-of-the-picture-message-jquery-plugin-commentonphoto/index.html","modified":1433426557674,"shasum":"21248cf17626bbf16262cdd05d960bb660cfe099"},{"_id":"public/2014/01/04/2014-01-04-jquerydatepicker-republic-of-china/index.html","modified":1433426557681,"shasum":"55a88bad76a3e3eb7f2e0f5190fbeb48a1b09f3c"},{"_id":"public/2014/01/01/2014-01-01-notenet-npoi/index.html","modified":1433426557691,"shasum":"319bf2da349f2f9a0a7d5ad6b76006ca35f9138e"},{"_id":"public/2013/12/31/2013-12-31-note-javascriptthe-good-parts-bad-part-2/index.html","modified":1433426557697,"shasum":"a1e5f2a6b1dff1e4ac32787f85f0c77485eb9f3b"},{"_id":"public/2013/12/24/2013-12-24-note-javascriptthe-good-parts-bad-part-1/index.html","modified":1433426557703,"shasum":"8087a096800366d0421fe800b12074f2af11087c"},{"_id":"public/2013/12/24/2013-12-24-moved-from-blogger-to-logdown/index.html","modified":1433426557710,"shasum":"fcd8e391a5c8477df25f60644b04dbfac11eb55a"},{"_id":"public/2013/12/19/2013-12-19-javascript-good-parts-ch6/index.html","modified":1433426557715,"shasum":"fd18b9eb5ef45dda88dcd7838f9a06e57090daa6"},{"_id":"public/2013/12/18/2013-12-18-javascript-good-parts-ch5-19/index.html","modified":1433426557724,"shasum":"ddf9ac746c82767b237684eaac5eb8654e940d66"},{"_id":"public/2013/12/18/2013-12-18-github-pages-octopress-on-windows/index.html","modified":1433426557730,"shasum":"edbd0b4f15def639148b4ccb5a52256b8a273055"},{"_id":"public/2013/12/14/2013-12-14-javascript-good-parts-ch5/index.html","modified":1433426557736,"shasum":"928c54b84184d6e64d04f6646daf2e017123b1fe"},{"_id":"public/2013/12/11/2013-12-11-javascript-good-parts-ch4-11/index.html","modified":1433426557741,"shasum":"99758475a80001db9c97780b34f58590628efd21"},{"_id":"public/2013/12/09/2013-12-09-javascript-good-parts-ch4-9/index.html","modified":1433426557749,"shasum":"1647d2fb3025333e7264babea43e8bcd97357119"},{"_id":"public/2013/12/07/2013-12-07-168754/index.html","modified":1433426557755,"shasum":"59f8f9fbf67cb4d7de02bef636939e9edffd076e"},{"_id":"public/2013/12/04/2013-12-04-javascript-good-parts-ch4/index.html","modified":1433426557761,"shasum":"ceb89f8db4298f7ad0aa9c14a36cf238a044e3e5"},{"_id":"public/2013/12/03/2013-12-03-javascript-good-parts-ch3/index.html","modified":1433426557767,"shasum":"2e6303fe98b6b7c551284ee8ddb6ac80c85c35d0"},{"_id":"public/2013/12/02/2013-12-02-javascript-good-parts-ch2/index.html","modified":1433426557773,"shasum":"b4b8769e618790a52c62230c49f24b3d64a3de0f"},{"_id":"public/archives/index.html","modified":1433426557779,"shasum":"6973f4cf12910d6bf655e6a8e7ba9e09ce98ea49"},{"_id":"public/archives/page/2/index.html","modified":1433426557785,"shasum":"2595c4fbd870367ac11a84a2b885f726c6be9a40"},{"_id":"public/archives/page/3/index.html","modified":1433426557790,"shasum":"5a43533a4bbc1d2066b055a176f9db9ce22e32f9"},{"_id":"public/archives/page/4/index.html","modified":1433426557796,"shasum":"08e9f34707dfbac718c628351224baeb9e68d227"},{"_id":"public/archives/2013/index.html","modified":1433426557801,"shasum":"a40583bba0c55e8a89b60d666bda5c4b0d533be5"},{"_id":"public/archives/2013/page/2/index.html","modified":1433426557809,"shasum":"086a2456289263495a114236599c93922a21458e"},{"_id":"public/archives/2013/12/index.html","modified":1433426557814,"shasum":"1caab5ae4d2a9c2414a654eff86aa2f53b85cace"},{"_id":"public/archives/2013/12/page/2/index.html","modified":1433426557819,"shasum":"d6ce767a3d4207a016fdf80185291da707551f75"},{"_id":"public/archives/2014/index.html","modified":1433426557824,"shasum":"5df5fa47192539a359b2efa1e8cf0059299b8fcc"},{"_id":"public/archives/2014/page/2/index.html","modified":1433426557829,"shasum":"8378bdc2a1e39c841faa1bc008f5c7682eae1888"},{"_id":"public/archives/2014/01/index.html","modified":1433426557834,"shasum":"205cbf7698875e89513a744d640908b4d7aeace0"},{"_id":"public/archives/2014/02/index.html","modified":1433426557839,"shasum":"acc6bf24e1792ba41ce273b7f53f694cccbf69b1"},{"_id":"public/archives/2014/03/index.html","modified":1433426557844,"shasum":"f70760f0e7f790e87a26ec96896275cf6d6ec283"},{"_id":"public/archives/2014/04/index.html","modified":1433426557850,"shasum":"0761910aead5c8f2b8f14d2087f4f08ddbaf9f8d"},{"_id":"public/archives/2014/05/index.html","modified":1433426557855,"shasum":"4efc3de70fb12a83c4b0dd0bb17ebc07c6d3190c"},{"_id":"public/archives/2015/index.html","modified":1433426557861,"shasum":"99a512bc48dbe02ebd051d7c976b41bbbefe918a"},{"_id":"public/archives/2015/02/index.html","modified":1433426557865,"shasum":"6e322dd6e4e3bdb94de13a8b5fc5a449bc8e1100"},{"_id":"public/archives/2015/03/index.html","modified":1433426557871,"shasum":"e9eebcfe65ebf62bc1961c59cda0307832530851"},{"_id":"public/archives/2015/05/index.html","modified":1433426557875,"shasum":"92ba7689c40f56453de47ebb652e68b0cd71ed12"},{"_id":"public/archives/2015/06/index.html","modified":1433426557880,"shasum":"b460be3b4bdbfd8486f0e8cafa1156a28df8eb7b"},{"_id":"public/index.html","modified":1433426557890,"shasum":"72e898ccbd6cd9c83feb72df257fc002e5b437b7"},{"_id":"public/page/2/index.html","modified":1433426557903,"shasum":"2c0a14a106a0ba007ca8172cd2122e132af1fca4"},{"_id":"public/page/3/index.html","modified":1433426557912,"shasum":"0c7f2ad905892871b17e15dc829449a93f392790"},{"_id":"public/page/4/index.html","modified":1433426557920,"shasum":"dc0a4b90e65a55d7948b366b9353a370c12324ec"},{"_id":"public/tags/ES6/index.html","modified":1433426557926,"shasum":"91bcfbb096f8bcc74dd88dcfbd61022224e86bfe"},{"_id":"public/tags/javascript/index.html","modified":1433426557931,"shasum":"d776f25b7a0e474d40f010f5b806073675484151"},{"_id":"public/tags/javascript/page/2/index.html","modified":1433426557936,"shasum":"b0ac5a72ed964f4f2556ec434a29fc80130110b7"},{"_id":"public/tags/Babel/index.html","modified":1433426557941,"shasum":"7ee52148c25363db72e678ca10e9dcb6013bceb4"},{"_id":"public/tags/閒聊/index.html","modified":1433426557946,"shasum":"ff2a2406f4c223af3d0969c5691bbede72e062d0"},{"_id":"public/tags/Cordova/index.html","modified":1433426557951,"shasum":"4f572fc77085056e499378704933e43958869ae2"},{"_id":"public/tags/Android/index.html","modified":1433426557957,"shasum":"5a127cd6619ea9b6751c6a44739606a33ef6a3a0"},{"_id":"public/tags/Chrome/index.html","modified":1433426557962,"shasum":"cd64e5a817388f6034fa2f32c0268f9df8c7d519"},{"_id":"public/tags/Windows-Phone/index.html","modified":1433426557966,"shasum":"74778c39e757186ad02563fb199f83e9097da22d"},{"_id":"public/tags/jQuery-Mobile/index.html","modified":1433426557971,"shasum":"51f01bd527588eb42d5de0956272eb82a025b863"},{"_id":"public/tags/Backbone/index.html","modified":1433426557979,"shasum":"4b0d5d2263572879383d4d284ccde2e6fe13ab1d"},{"_id":"public/tags/WebStorm/index.html","modified":1433426557984,"shasum":"74163bd38633658081bdfad72593ff3dd2d63a3e"},{"_id":"public/tags/SASS/index.html","modified":1433426557990,"shasum":"06b1ee024c87d0f506d182ef6c7833bc1178eb56"},{"_id":"public/tags/CSS/index.html","modified":1433426557994,"shasum":"dda63e3f708f7afcca230819231f929855d265d8"},{"_id":"public/tags/HTML5/index.html","modified":1433426557999,"shasum":"4491bac7b6dc7668436c3dbbf79f9bed577c7815"},{"_id":"public/tags/LESS/index.html","modified":1433426558003,"shasum":"3469271608181a5345aab1328132c913c4b8a547"},{"_id":"public/tags/Works/index.html","modified":1433426558009,"shasum":"4d02520d59173cb5fa561f848408231bb0677c68"},{"_id":"public/tags/jQuery/index.html","modified":1433426558014,"shasum":"acc86f5d6bdf651d785fd67e5ed45955cce720d6"},{"_id":"public/tags/NET/index.html","modified":1433426558020,"shasum":"e0d7320fa97198ab1ad52f792e180b0247711985"},{"_id":"public/tags/微軟/index.html","modified":1433426558025,"shasum":"549b2b9645e589118fc6f6ad5ee82c42e185ef2c"},{"_id":"public/tags/RWD/index.html","modified":1433426558029,"shasum":"6e5023eb9b8a8b6f09fd3b6a2f290fff4de31c9b"}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"New Draft","_content":"半年沒寫blog了，抒發一下最近的感觸，順便複習Markdown的語法\n內文完全沒有邏輯，只有感情，請多包涵\n\n---\n##0\n我喜歡寫程式。\n我也喜歡高雄。\n所以我想留在高雄寫程式\n可是最近才發現，這好像有點難\n##1\n寫程式是一件很快樂的事\n獲得新知，讓自己的技術提升，是一件愉悅的事\n應該是這樣的\n可是\n我到現在還沒有碰過這樣的同事\n一個都沒有\n胡萬跟武舉人倒是遇過不少\n呵呵\n##2\n不是唬爛，我在高雄碰過的面試官大概可以坐滿一輛遊覽車\n只有一個人知道前端在幹嘛\n只有一個人真的有問出東西來\n他是個大陸人，來台灣出差的\n呵呵\n##3\n老人們都很喜歡不懂裝懂\n應該說，二流的PG都是這樣\n可能是覺得人家都看不出來吧？\n有次面試的時候，我把投影片裏的技術名詞換成WOW的腳色ID\n結果面試官照樣頻頻點頭\n我還有唸出來喔\n呵呵\n##4\n又轉回前端的話題\n曾經，我面試某間號稱鮭魚洄游的北美第二大電子商務公司\n被問到的問題是：\n＂jQuery熟嗎？＂\n＂可以加班到多晚？＂\n＂會寫西夏？＂\n呵呵\n\n---\n有點懶了，周末再繼續吧\n\n","source":"_drafts/draft1.md","raw":"title: New Draft\ntags:\n---\n半年沒寫blog了，抒發一下最近的感觸，順便複習Markdown的語法\n內文完全沒有邏輯，只有感情，請多包涵\n\n---\n##0\n我喜歡寫程式。\n我也喜歡高雄。\n所以我想留在高雄寫程式\n可是最近才發現，這好像有點難\n##1\n寫程式是一件很快樂的事\n獲得新知，讓自己的技術提升，是一件愉悅的事\n應該是這樣的\n可是\n我到現在還沒有碰過這樣的同事\n一個都沒有\n胡萬跟武舉人倒是遇過不少\n呵呵\n##2\n不是唬爛，我在高雄碰過的面試官大概可以坐滿一輛遊覽車\n只有一個人知道前端在幹嘛\n只有一個人真的有問出東西來\n他是個大陸人，來台灣出差的\n呵呵\n##3\n老人們都很喜歡不懂裝懂\n應該說，二流的PG都是這樣\n可能是覺得人家都看不出來吧？\n有次面試的時候，我把投影片裏的技術名詞換成WOW的腳色ID\n結果面試官照樣頻頻點頭\n我還有唸出來喔\n呵呵\n##4\n又轉回前端的話題\n曾經，我面試某間號稱鮭魚洄游的北美第二大電子商務公司\n被問到的問題是：\n＂jQuery熟嗎？＂\n＂可以加班到多晚？＂\n＂會寫西夏？＂\n呵呵\n\n---\n有點懶了，周末再繼續吧\n\n","slug":"draft1","published":0,"date":"2015-03-20T15:21:28.084Z","updated":"2015-03-20T15:21:28.084Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciai95rmt0000l0pgd3fergzk"},{"title":"2015下半年Todo List","date":"2015-06-04T14:02:10.000Z","_content":"\n\n# Languages\n- Javascript：這兩年沈浸在各種奇技淫巧之中，對pure-js有點生疏了，至少要達到自稱Excellent不會臉紅也不會被打臉的程度\n- TypeScript：時代是強型態，雖然要我放棄Coffee真的很難過...\n- ES6：繼續玩各種新的feature\n- Swift: 看起來很簡單，資源也比之前多許多，是時候進場了\n\n# F2E\n上半年新玩具玩太多了，下半年要回歸基本，把摳寫好。\n- React-Native：雷好多，快撐不住了，好想躺著敲碗等人解（癱）\n\n# Open Source\n上半年完全就是個開坑不填的節奏，下半年該還債了XDD\n- React-Photo-Tagger\n- i18nHelper\n- 某神秘的NW Project\n- 某神秘的Download Script\n- 寫個Atom or Chrome plugin\n\n# Posts\n是我打字太慢的關係嗎？寫Blog真的感覺文筆不太順，好歹我七年前指考國文也有九十幾分耶。前幾天翻了翻舊文，發現我好像一直在寫不熟悉的主題，真正專業的部分好像都沒寫到...恩，該調整一下方向了。\n- 寫一些比較熟悉的主題\n- JohnPapa's Angular Style Guild...說實在我一想到二都快出就有點懶得翻了（攤手）\n- 翻一些實用的guild\n- 準備鐵人賽系列文。去年未戰先怯，今年不能再黃了。\n\n# Health\n- eye\n- running EVERY DAY. E-V-E-R-Y D-A-Y.\n","source":"_posts/2015-q3q4-todo.md","raw":"title: \"2015下半年Todo List\"\ndate: 2015-06-04 22:02:10\ntags:\n---\n\n\n# Languages\n- Javascript：這兩年沈浸在各種奇技淫巧之中，對pure-js有點生疏了，至少要達到自稱Excellent不會臉紅也不會被打臉的程度\n- TypeScript：時代是強型態，雖然要我放棄Coffee真的很難過...\n- ES6：繼續玩各種新的feature\n- Swift: 看起來很簡單，資源也比之前多許多，是時候進場了\n\n# F2E\n上半年新玩具玩太多了，下半年要回歸基本，把摳寫好。\n- React-Native：雷好多，快撐不住了，好想躺著敲碗等人解（癱）\n\n# Open Source\n上半年完全就是個開坑不填的節奏，下半年該還債了XDD\n- React-Photo-Tagger\n- i18nHelper\n- 某神秘的NW Project\n- 某神秘的Download Script\n- 寫個Atom or Chrome plugin\n\n# Posts\n是我打字太慢的關係嗎？寫Blog真的感覺文筆不太順，好歹我七年前指考國文也有九十幾分耶。前幾天翻了翻舊文，發現我好像一直在寫不熟悉的主題，真正專業的部分好像都沒寫到...恩，該調整一下方向了。\n- 寫一些比較熟悉的主題\n- JohnPapa's Angular Style Guild...說實在我一想到二都快出就有點懶得翻了（攤手）\n- 翻一些實用的guild\n- 準備鐵人賽系列文。去年未戰先怯，今年不能再黃了。\n\n# Health\n- eye\n- running EVERY DAY. E-V-E-R-Y D-A-Y.\n","slug":"2015-q3q4-todo","published":1,"updated":"2015-06-04T14:02:10.988Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciai95rn10001l0pgxaee8jtr"},{"title":"2015上半年回顧","date":"2015-05-31T07:36:46.000Z","_content":"\n\n不知不覺半年了啊... 這半年真的發生了不少事，各方面來說都是。總結一下上半年的成果吧。\n\n## Front End\n\n### Ionic\n\n從當初還在nightly就開始拿來做專案，寫個人作品，到現在也一年多了，雖然不敢自稱大師，但基本上已經玩到沒有什麼好玩了。反正Angular就那樣，上再多奇技淫巧也就是那樣...或許Ionic也這樣覺得吧，所以終於甘心上1.0.0了(應該是為了專心玩Ionic2)。個人一直很喜歡Ionic這個team，他們有些性格感覺跟我很像，像是超級龜毛、講究質感、不喜歡給時限承諾(正好都是一些台灣老闆不需要的東西XD)，雖然React-Native出了之後Cordova聲勢低落，不過Angular2在上次Conf的Demo相當驚人，讓人很期待Ionic2會做出怎樣的東西。\n\n### React\n\n因為在Mobile上被Angular折磨太久傷得太深，所以跑去玩看起來很潮的React。寫了幾個Project之後漸漸地有了一點feel，html-css-js三位一體的想法感覺很有趣，而且社群很大，親爸爸Facebook養了兩億支的白老鼠每天幫她做測試(XD)。不過缺點就是樣板的味道很重，要多寫很多code，尤其是想做一些比較風騷的操作時就會很明顯的感受到不悅。而且在jsx塞props的時候很難有效的得到code intelligence的支援（至少WebStorm跟Atom都做得不好），這對大專案可能會有點麻煩，或許Facebook自家的Nuclide會做一點優化？\n\n### Flux\n\nCool Ideal. 習慣之後發現整個架構比MV*單純很多，上半年最重要的收穫之一。\n\n### Flow\n\n感覺很不錯，可以得到強型態的支援，又不會像typescript那樣死板板需要`.d.ts`；可是一來WebStorm沒有支援，二來...[所以我說那個Windows呢？](https://github.com/facebook/flow/issues/6)\n\n### WebPack\n\n我只是想寫個摳，為什麼要這麼麻煩...那群大師跟之父為什麼沒有早點把Module寫在語言規範裡，這幾年前端的重複造輪子大賽一點都不有趣阿Orz。\n\n\n\n\n\n## Languages\n\n### CoffeeScript\n\n我一直很捨不得離開CoffeeScript，她真的是一個漂亮優雅的好女孩。可是時代終究是強型態，沒有強型態的支援在開發大型專案真的會產生困擾，即使你語法再優雅也一樣，而[jashkenas似乎沒有想往這個方向走](https://github.com/jashkenas/coffeescript/issues/3743)。so, Goodbye my love :(\n\n### ES6(with Babel)\n\n目前拿來寫React-Native，順便練練新玩具。正在強力的猶豫到底要Flow + ES6好還是TypeScript好。\n\n### TypeScript\n\n唯一阻撓我玩弄她的理由就是`.d.ts`...在這個每天都有新玩具的前端世界，[DefinitelyTyped](https://github.com/borisyankov/DefinitelyTyped)真的只是滄海一粟而已，用到較新或較冷門的Module還是要有自己寫`.d.ts`的覺悟。\n\n### Objective-C & JAVA\n\n一點都不想學，可是終究還是不小心會了...真的是一個爛隊友讓你上天堂的節奏（嘆）。意外的發現Objective-C的語法很喜歡，算是稍稍撫慰了我的憤怒。\n\n### Go\n\n稍微play了一下，可是於公於私都沒有專案可以玩，無限期放置中。\n\n\n\n\n## Mobile\n\n### Cordova\n\n已經熟到爆炸的東西，因為各種討厭的理由寫了許多Native Plugin（看wiki學Obj-c XDD），也改過原本的FileSystem，簡直快變成Mobile工程師了...。對於一個處女座A型的前端工程師而言，Cordova@Android那糟糕的render效能實在是令人十分痛苦（加Crosswalk也沒好到哪去），還有那討厭的生命週期。如果React Native或Native Script有發展起來的話，之後應該不會在碰這個了...\n\n### React Native\n\n目前正在利用空檔時間把舊的Cordova產品搬上去，分享一下到目前為止的心得：\n* Document嚴重需要補強，很多東西都藏在source code裡面，沒去trace會漏掉很多feature\n* 有Bug是很正常的，不過很難trace就不事件好事了...目前packager沒有支援第三方的sourceMap(ex: Babel, typescript)\n* team好像快掛了，issues跟PR都嚴重山積XD\n\n個人對這個Project的期望還是很高，畢竟頂著Facebook&React的光環，希望他能成為Hybrid App開發者的最終解答。\n\n### Native Script\n\nTelerik家的產品，比React-Native早很多推出，不過社群一直不夠大。試玩的感想是layout方面很難做細部的客製化，雖然架構上我覺得比React-Native更簡單強壯，不過沒有紅起來還是令人怕怕的，看Angular2正式發布之後會不會帶來一波新人潮吧。\n\n### WinRT\n\n玩了個todo就沒接下去玩了。js身為第一級語言的感覺很爽，可是這市場份額實在讓人提不起勁...等Win10看看會有什麼改變吧。\n\n### Dart with Sky framework\n\nDart想在browser上取代javascript的計畫失敗了，這次呢？從發表會寒酸的樣子來看，感覺不出Google有在Dart@Android上面下真功夫的企圖，反而有種很重的倉促感。不過畢竟這還只是非常早期的Project，就靜觀其變吧。\n\n\n\n\n## Others\n\n### Node-Webkit\n\n現在改名叫NW.js了。一直以來都有在關注，可是也僅止於play for fun的階段而已，沒有專案可以嘗試。下半年應該會開始寫一個中規模的NW.js App。\n\n### Node.js\n\n一樣業餘興趣，無從發揮。比較專注在Node-Webkit會用到的部分，對Web-Backend沒什麼興趣。\n\n\n\n\n\n## IDE\n\n### WebStorm\n\n去年年底買了WebStorm的Licence，用了半年之後有點想跳槽的感覺...。先說優點吧，js的code intelligence很強，目前我覺得準確度只略輸Visual Studio。再來就是前端熱門的工具幾乎都有內建的輔助支援，設定欄位點幾下就可以用了，在現今前端各種混亂的情況下這爽度真的很高，可以讓你少幹很多無謂的事（我只是想寫個摳阿老大）。再來說說缺點，首先是效能...真的很慢，真的﹑真的﹑很慢。以我家的E5 + 16G Ram來說，寫React時`componentDidMount`這行字打完有九成的機率代碼提示不會出現（剩下的一成是突然忘記怎麼拚）。公司的Mac就更慘了，因為我工作需要同時開WebStorm*2 + AppCode + Intellij　+ Xcode，有時候真的會很想殺人。再來是支援的問題，畢竟是一年才改版一次的付費軟體，支援性終究比不上Atom﹑ Sublime來的快，有些比較小眾的東西就沒辦法用，例如jsx-typescript、cjsx(coffee-jsx)、WebPack以及Flow（這沒支援令我蠻訝異的），然後你也只能雙手合十祈禱DevTeam有聽到你的聲音，這是我想跳槽的主因。\n\n### Atom\n\n當初剛Release的時候掀起一陣旋風，踹了一陣子因為問題實在太多就放棄了，目前只做為markdown editor使用。有計劃從WebStorm跳過來，不過沒那個時間（泣）\n\n### Nuclide\n\n只差20個就有封測了阿阿阿阿阿（抱頭）。希望能早點Release，不然寫個React-Native要開兩三個IDE實在很煩...\n","source":"_posts/2015-q1q2-review.md","raw":"title: \"2015上半年回顧\"\ndate: 2015-05-31 15:36:46\ntags:\n---\n\n\n不知不覺半年了啊... 這半年真的發生了不少事，各方面來說都是。總結一下上半年的成果吧。\n\n## Front End\n\n### Ionic\n\n從當初還在nightly就開始拿來做專案，寫個人作品，到現在也一年多了，雖然不敢自稱大師，但基本上已經玩到沒有什麼好玩了。反正Angular就那樣，上再多奇技淫巧也就是那樣...或許Ionic也這樣覺得吧，所以終於甘心上1.0.0了(應該是為了專心玩Ionic2)。個人一直很喜歡Ionic這個team，他們有些性格感覺跟我很像，像是超級龜毛、講究質感、不喜歡給時限承諾(正好都是一些台灣老闆不需要的東西XD)，雖然React-Native出了之後Cordova聲勢低落，不過Angular2在上次Conf的Demo相當驚人，讓人很期待Ionic2會做出怎樣的東西。\n\n### React\n\n因為在Mobile上被Angular折磨太久傷得太深，所以跑去玩看起來很潮的React。寫了幾個Project之後漸漸地有了一點feel，html-css-js三位一體的想法感覺很有趣，而且社群很大，親爸爸Facebook養了兩億支的白老鼠每天幫她做測試(XD)。不過缺點就是樣板的味道很重，要多寫很多code，尤其是想做一些比較風騷的操作時就會很明顯的感受到不悅。而且在jsx塞props的時候很難有效的得到code intelligence的支援（至少WebStorm跟Atom都做得不好），這對大專案可能會有點麻煩，或許Facebook自家的Nuclide會做一點優化？\n\n### Flux\n\nCool Ideal. 習慣之後發現整個架構比MV*單純很多，上半年最重要的收穫之一。\n\n### Flow\n\n感覺很不錯，可以得到強型態的支援，又不會像typescript那樣死板板需要`.d.ts`；可是一來WebStorm沒有支援，二來...[所以我說那個Windows呢？](https://github.com/facebook/flow/issues/6)\n\n### WebPack\n\n我只是想寫個摳，為什麼要這麼麻煩...那群大師跟之父為什麼沒有早點把Module寫在語言規範裡，這幾年前端的重複造輪子大賽一點都不有趣阿Orz。\n\n\n\n\n\n## Languages\n\n### CoffeeScript\n\n我一直很捨不得離開CoffeeScript，她真的是一個漂亮優雅的好女孩。可是時代終究是強型態，沒有強型態的支援在開發大型專案真的會產生困擾，即使你語法再優雅也一樣，而[jashkenas似乎沒有想往這個方向走](https://github.com/jashkenas/coffeescript/issues/3743)。so, Goodbye my love :(\n\n### ES6(with Babel)\n\n目前拿來寫React-Native，順便練練新玩具。正在強力的猶豫到底要Flow + ES6好還是TypeScript好。\n\n### TypeScript\n\n唯一阻撓我玩弄她的理由就是`.d.ts`...在這個每天都有新玩具的前端世界，[DefinitelyTyped](https://github.com/borisyankov/DefinitelyTyped)真的只是滄海一粟而已，用到較新或較冷門的Module還是要有自己寫`.d.ts`的覺悟。\n\n### Objective-C & JAVA\n\n一點都不想學，可是終究還是不小心會了...真的是一個爛隊友讓你上天堂的節奏（嘆）。意外的發現Objective-C的語法很喜歡，算是稍稍撫慰了我的憤怒。\n\n### Go\n\n稍微play了一下，可是於公於私都沒有專案可以玩，無限期放置中。\n\n\n\n\n## Mobile\n\n### Cordova\n\n已經熟到爆炸的東西，因為各種討厭的理由寫了許多Native Plugin（看wiki學Obj-c XDD），也改過原本的FileSystem，簡直快變成Mobile工程師了...。對於一個處女座A型的前端工程師而言，Cordova@Android那糟糕的render效能實在是令人十分痛苦（加Crosswalk也沒好到哪去），還有那討厭的生命週期。如果React Native或Native Script有發展起來的話，之後應該不會在碰這個了...\n\n### React Native\n\n目前正在利用空檔時間把舊的Cordova產品搬上去，分享一下到目前為止的心得：\n* Document嚴重需要補強，很多東西都藏在source code裡面，沒去trace會漏掉很多feature\n* 有Bug是很正常的，不過很難trace就不事件好事了...目前packager沒有支援第三方的sourceMap(ex: Babel, typescript)\n* team好像快掛了，issues跟PR都嚴重山積XD\n\n個人對這個Project的期望還是很高，畢竟頂著Facebook&React的光環，希望他能成為Hybrid App開發者的最終解答。\n\n### Native Script\n\nTelerik家的產品，比React-Native早很多推出，不過社群一直不夠大。試玩的感想是layout方面很難做細部的客製化，雖然架構上我覺得比React-Native更簡單強壯，不過沒有紅起來還是令人怕怕的，看Angular2正式發布之後會不會帶來一波新人潮吧。\n\n### WinRT\n\n玩了個todo就沒接下去玩了。js身為第一級語言的感覺很爽，可是這市場份額實在讓人提不起勁...等Win10看看會有什麼改變吧。\n\n### Dart with Sky framework\n\nDart想在browser上取代javascript的計畫失敗了，這次呢？從發表會寒酸的樣子來看，感覺不出Google有在Dart@Android上面下真功夫的企圖，反而有種很重的倉促感。不過畢竟這還只是非常早期的Project，就靜觀其變吧。\n\n\n\n\n## Others\n\n### Node-Webkit\n\n現在改名叫NW.js了。一直以來都有在關注，可是也僅止於play for fun的階段而已，沒有專案可以嘗試。下半年應該會開始寫一個中規模的NW.js App。\n\n### Node.js\n\n一樣業餘興趣，無從發揮。比較專注在Node-Webkit會用到的部分，對Web-Backend沒什麼興趣。\n\n\n\n\n\n## IDE\n\n### WebStorm\n\n去年年底買了WebStorm的Licence，用了半年之後有點想跳槽的感覺...。先說優點吧，js的code intelligence很強，目前我覺得準確度只略輸Visual Studio。再來就是前端熱門的工具幾乎都有內建的輔助支援，設定欄位點幾下就可以用了，在現今前端各種混亂的情況下這爽度真的很高，可以讓你少幹很多無謂的事（我只是想寫個摳阿老大）。再來說說缺點，首先是效能...真的很慢，真的﹑真的﹑很慢。以我家的E5 + 16G Ram來說，寫React時`componentDidMount`這行字打完有九成的機率代碼提示不會出現（剩下的一成是突然忘記怎麼拚）。公司的Mac就更慘了，因為我工作需要同時開WebStorm*2 + AppCode + Intellij　+ Xcode，有時候真的會很想殺人。再來是支援的問題，畢竟是一年才改版一次的付費軟體，支援性終究比不上Atom﹑ Sublime來的快，有些比較小眾的東西就沒辦法用，例如jsx-typescript、cjsx(coffee-jsx)、WebPack以及Flow（這沒支援令我蠻訝異的），然後你也只能雙手合十祈禱DevTeam有聽到你的聲音，這是我想跳槽的主因。\n\n### Atom\n\n當初剛Release的時候掀起一陣旋風，踹了一陣子因為問題實在太多就放棄了，目前只做為markdown editor使用。有計劃從WebStorm跳過來，不過沒那個時間（泣）\n\n### Nuclide\n\n只差20個就有封測了阿阿阿阿阿（抱頭）。希望能早點Release，不然寫個React-Native要開兩三個IDE實在很煩...\n","slug":"2015-q1q2-review","published":1,"updated":"2015-05-31T07:49:21.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciai95rn30002l0pgpjkcyhb9"},{"title":"learning es6 with babel - let","date":"2015-03-20T15:29:00.000Z","_content":"\n`let`是另一種宣告變數的方式，他有幾個特點：有block scope，沒有hoisting，不能重複宣告\n```js\n//es6\n{\n  let foo = \"foo\";\n  var bar = \"bar\";\n}\n\nconsole.log(foo); //<= Error: foo is not defined\nconsole.log(bar); //<= bar\n```\n\nbabel對他的實現方式是在前面加個prefix`_`\n```js\n//babel\nvar _temporalUndefined = {};\n{\n  var _foo = _temporalUndefined;\n  _foo = \"foo\";\n  var bar = \"bar\";\n}\n```\n`let`不像`var`一樣具有hoisting的特性，這造成一些現象\n```js\n//es6\n{\n  console.log(x); // <=x is not defined - temporal dead zone\n  let x = 1;\n}\n```\n在一個block scope中，只要有進行`let`宣告的變數，那麼該變數在被宣告前都不能被使用。\n這個區塊就被稱為temporal dead zone\n```js\n//es6\n{\n  //-- dead zone for x start --\n\n  console.log(x); // <=ReferenceError: x is not defined - temporal dead zone\n\n  //-- dead zone for x end --\n  let x = 1;\n  // u can use x now.\n  console.log(x); // <= 1\n\n}\n```\nbabel的實現方式如下\n```js\n\"use strict\";\n\nvar _temporalAssertDefined = function (val, name, undef) {\n  if (val === undef) {\n    throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n  }\n  return true;\n};\n\nvar _temporalUndefined = {};\n{\n  var x = _temporalUndefined;\n\n  console.log(_temporalAssertDefined(x, \"x\", _temporalUndefined) && x);\n\n  x = {};\n\n  console.log(_temporalAssertDefined(x, \"x\", _temporalUndefined) && x);\n}\n```\n他一開始先在全域宣告一個`_temporalUndefined`物件作為not defined flag，當我們在block scope中做`let`宣告時，\n他會先在scope的開始部分就先用`var`宣告物件，然後指向全域的`_temporalUndefined`物件。接下來\n在每次調用`x`時，都會先檢查他的參考對象是不是`_temporalUndefined`，如果是的話就拋出\n`ReferenceError`\n\n可以注意的點是，`val === undef`比較的是參照，而不是值，所以就算你用`let x={}`也不會怎樣，\n因為這兩個`{}`是不同的匿名物件\n```js\n//es6\n{\n  console.log(x); // <=ReferenceError: x is not defined - temporal dead zone\n  let x = 1;\n  console.log(x);\n}\n\n//babel\n\"use strict\";\n\nvar _temporalAssertDefined = function (val, name, undef) {\n  if (val === undef) {\n    // 這裡是檢查參照，而不是值\n    throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n  }\n  return true;\n};\n\n//宣告一個匿名物件，指定物件_temporalUndefined參照他\nvar _temporalUndefined = {};\n\n{\n  var x = _temporalUndefined;\n\n  console.log(_temporalAssertDefined(x, \"x\", _temporalUndefined) && x);\n  //宣告一個匿名物件，指定物件x參照他。酸然值相同，但這跟上面那個匿名物件完全無關\n  x = {};\n  console.log(_temporalAssertDefined(x, \"x\", _temporalUndefined) && x);\n}\n```\n當撞名時babel會自動改名，不必擔心\n```js\n//es6\nvar _temporalUndefined;\n{\n  let x = {};\n}\n\n//babel\n\"use strict\";\n\nvar _temporalAssertDefined = function (val, name, undef) { if (val === undef) { throw new ReferenceError(name + \" is not defined - temporal dead zone\"); } return true; };\n\nvar _temporalUndefined2 = {}; //變成_temporalUndefined2了\nvar _temporalUndefined;\n{\n  var x = _temporalUndefined2;\n  x = {};\n}\n```\n\"不能重複宣告\"這項特性則是在babel compile階段做檢查的\n```js\n//es6\n{\n  let x = 1;\n  let x = 2;\n}\n/* babel compile err\nrepl: Line 3: Duplicate declaration \"x\"\n  1 | {\n  2 |   let x = 1;\n> 3 |   let x = 2;\n    |       ^\n  4 | }\n*/\n```\n","source":"_posts/2015-03-20-learning-es6-with-babel-let.md","raw":"title: learning es6 with babel - let\ndate: 2015-03-20 23:29:00\ntags: [ES6, javascript, Babel]\n---\n\n`let`是另一種宣告變數的方式，他有幾個特點：有block scope，沒有hoisting，不能重複宣告\n```js\n//es6\n{\n  let foo = \"foo\";\n  var bar = \"bar\";\n}\n\nconsole.log(foo); //<= Error: foo is not defined\nconsole.log(bar); //<= bar\n```\n\nbabel對他的實現方式是在前面加個prefix`_`\n```js\n//babel\nvar _temporalUndefined = {};\n{\n  var _foo = _temporalUndefined;\n  _foo = \"foo\";\n  var bar = \"bar\";\n}\n```\n`let`不像`var`一樣具有hoisting的特性，這造成一些現象\n```js\n//es6\n{\n  console.log(x); // <=x is not defined - temporal dead zone\n  let x = 1;\n}\n```\n在一個block scope中，只要有進行`let`宣告的變數，那麼該變數在被宣告前都不能被使用。\n這個區塊就被稱為temporal dead zone\n```js\n//es6\n{\n  //-- dead zone for x start --\n\n  console.log(x); // <=ReferenceError: x is not defined - temporal dead zone\n\n  //-- dead zone for x end --\n  let x = 1;\n  // u can use x now.\n  console.log(x); // <= 1\n\n}\n```\nbabel的實現方式如下\n```js\n\"use strict\";\n\nvar _temporalAssertDefined = function (val, name, undef) {\n  if (val === undef) {\n    throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n  }\n  return true;\n};\n\nvar _temporalUndefined = {};\n{\n  var x = _temporalUndefined;\n\n  console.log(_temporalAssertDefined(x, \"x\", _temporalUndefined) && x);\n\n  x = {};\n\n  console.log(_temporalAssertDefined(x, \"x\", _temporalUndefined) && x);\n}\n```\n他一開始先在全域宣告一個`_temporalUndefined`物件作為not defined flag，當我們在block scope中做`let`宣告時，\n他會先在scope的開始部分就先用`var`宣告物件，然後指向全域的`_temporalUndefined`物件。接下來\n在每次調用`x`時，都會先檢查他的參考對象是不是`_temporalUndefined`，如果是的話就拋出\n`ReferenceError`\n\n可以注意的點是，`val === undef`比較的是參照，而不是值，所以就算你用`let x={}`也不會怎樣，\n因為這兩個`{}`是不同的匿名物件\n```js\n//es6\n{\n  console.log(x); // <=ReferenceError: x is not defined - temporal dead zone\n  let x = 1;\n  console.log(x);\n}\n\n//babel\n\"use strict\";\n\nvar _temporalAssertDefined = function (val, name, undef) {\n  if (val === undef) {\n    // 這裡是檢查參照，而不是值\n    throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n  }\n  return true;\n};\n\n//宣告一個匿名物件，指定物件_temporalUndefined參照他\nvar _temporalUndefined = {};\n\n{\n  var x = _temporalUndefined;\n\n  console.log(_temporalAssertDefined(x, \"x\", _temporalUndefined) && x);\n  //宣告一個匿名物件，指定物件x參照他。酸然值相同，但這跟上面那個匿名物件完全無關\n  x = {};\n  console.log(_temporalAssertDefined(x, \"x\", _temporalUndefined) && x);\n}\n```\n當撞名時babel會自動改名，不必擔心\n```js\n//es6\nvar _temporalUndefined;\n{\n  let x = {};\n}\n\n//babel\n\"use strict\";\n\nvar _temporalAssertDefined = function (val, name, undef) { if (val === undef) { throw new ReferenceError(name + \" is not defined - temporal dead zone\"); } return true; };\n\nvar _temporalUndefined2 = {}; //變成_temporalUndefined2了\nvar _temporalUndefined;\n{\n  var x = _temporalUndefined2;\n  x = {};\n}\n```\n\"不能重複宣告\"這項特性則是在babel compile階段做檢查的\n```js\n//es6\n{\n  let x = 1;\n  let x = 2;\n}\n/* babel compile err\nrepl: Line 3: Duplicate declaration \"x\"\n  1 | {\n  2 |   let x = 1;\n> 3 |   let x = 2;\n    |       ^\n  4 | }\n*/\n```\n","slug":"2015-03-20-learning-es6-with-babel-let","published":1,"updated":"2015-04-20T12:54:38.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciai95rn50003l0pg82uzo385"},{"title":"learning es6 with babel - const","date":"2015-03-20T15:29:12.000Z","_content":"\n`const`用來聲明常量，也就是該變數的值在聲明後不會再改變，跟`let`一樣有block scope，沒有\nhoisting\n```js\n//es6\nconst PI = 3.14159;\n// 按照js的naming rule, 常量應該全部大寫\nconsole.log(PI); // <= 3.14159\n\nPI = 3;\nconsole.log(PI); // <= 3.14159\n\nconst PI = 3;\nconsole.log(PI); // <= 3.14159\n```\nbabel會在compile階段就檢查`PI`是不是在宣告後有試圖去改變他，所以上面這段會出現Error\n```\nrepl: Line 6: \"PI\" is read-only\n  4 | console.log(PI); // <= 3.14159\n  5 |\n> 6 | PI = 3;\n    | ^\n  7 | console.log(PI); // <= 3.14159\n  8 |\n  9 |\n```\n由於常量的特性是在compile階段檢查的，所以babel對於`const`其餘特性(block scope,\n  no hoising)的實現方式就跟`let`一樣\n```js\n//es6\n{\n  const PI = 3.14159;\n}\n\n//babel\n\"use strict\";\n\nvar _temporalAssertDefined = function (val, name, undef) {\n  if (val === undef) {\n    throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n  }\n  return true;\n};\n\nvar _temporalUndefined = {};\n{\n  var PI = _temporalUndefined;\n  PI = 3.14159;\n}\n```\n要注意的是`const`不等於`Object.freeze()`：`const`是固定變數的參考，`Object.freeze()`\n則是固定變數參考對象的值\n```js\nconst foo = {};\n\nfoo.prop = 123;\nconsole.log(foo.prop); // <= 123\n\nvar bar = {};\nObject.freeze(bar);\n\nbar.prop = 123;\nconsole.log(bar.prop); // <= undefined\n```\n","source":"_posts/2015-03-20-learning-es6-with-babel-const.md","raw":"title: learning es6 with babel - const\ndate: 2015-03-20 23:29:12\ntags: [ES6, javascript, Babel]\n---\n\n`const`用來聲明常量，也就是該變數的值在聲明後不會再改變，跟`let`一樣有block scope，沒有\nhoisting\n```js\n//es6\nconst PI = 3.14159;\n// 按照js的naming rule, 常量應該全部大寫\nconsole.log(PI); // <= 3.14159\n\nPI = 3;\nconsole.log(PI); // <= 3.14159\n\nconst PI = 3;\nconsole.log(PI); // <= 3.14159\n```\nbabel會在compile階段就檢查`PI`是不是在宣告後有試圖去改變他，所以上面這段會出現Error\n```\nrepl: Line 6: \"PI\" is read-only\n  4 | console.log(PI); // <= 3.14159\n  5 |\n> 6 | PI = 3;\n    | ^\n  7 | console.log(PI); // <= 3.14159\n  8 |\n  9 |\n```\n由於常量的特性是在compile階段檢查的，所以babel對於`const`其餘特性(block scope,\n  no hoising)的實現方式就跟`let`一樣\n```js\n//es6\n{\n  const PI = 3.14159;\n}\n\n//babel\n\"use strict\";\n\nvar _temporalAssertDefined = function (val, name, undef) {\n  if (val === undef) {\n    throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n  }\n  return true;\n};\n\nvar _temporalUndefined = {};\n{\n  var PI = _temporalUndefined;\n  PI = 3.14159;\n}\n```\n要注意的是`const`不等於`Object.freeze()`：`const`是固定變數的參考，`Object.freeze()`\n則是固定變數參考對象的值\n```js\nconst foo = {};\n\nfoo.prop = 123;\nconsole.log(foo.prop); // <= 123\n\nvar bar = {};\nObject.freeze(bar);\n\nbar.prop = 123;\nconsole.log(bar.prop); // <= undefined\n```\n","slug":"2015-03-20-learning-es6-with-babel-const","published":1,"updated":"2015-04-20T12:54:38.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciai95rna000al0pgzrmmjz7d"},{"title":"Learn es6 with babel - Arrows","date":"2015-03-15T14:02:01.000Z","_content":"在ES6中，可以使用`=>`來定義function。這是一個很類似coffeescript的語法糖（事實上es6有很大一部分是語法糖，個人很喜歡這種做法，與其去改變語言的本質，不如讓語言順著原本的脈絡慢慢茁壯）\n```js\n//es6\nvar f = (foo) => bar;\n\n//babel\nvar f = function (foo) {\n  return bar;\n};\n```\n當有參數，小括號可以省略\n```js\n//es6\nvar f = foo => bar;\n\n//babel\nvar f = function (foo) {\n  return bar;\n};\n```\n當`return`不是單一Expression時，需要用大括號把它包起來，就像一般在寫`function`一樣\n```js\n//es6\nvar foo = (v) => {\n  if (v === bar)\n    play(v);\n};\n\nvar foo = function (v) {\n  if (v === bar) play(v);\n};\n```\n它可以讓code更加的簡短且語意化，例如用在callback上\n```js\n//js\nfoo(res => res + 1);\n\n//babel\nfoo(function (res) {\n  return res + 1;\n});\n```\n有種lambda的感覺，對吧？\n要注意的是，如同在coffeescript中一樣，fat arrow(`=>`)除了是function的縮寫之外，還具有**在定義時綁定`this`**的特性\n```js\n//js\nvar john = {\n  _name: \"John\",\n  _friends: ['Mary'],\n  printFriends: function() {\n    this._friends.forEach(friendName =>\n      console.log(this._name + \" knows \" + friendName));\n      //因為上面使用fat arrow的關係, this才會被綁定為\"定義時的this\"\n  }\n}\n\n//babel\nvar john = {\n  _name: \"John\",\n  _friends: [\"Mary\"],\n  printFriends: function printFriends() {\n    var _this = this;\n    //實現方式其實就是我們常在寫的that = this\n\n    this._friends.forEach(function (friendName) {\n      return console.log(_this._name + \" knows \" + friendName);\n    });\n  }\n};\n\njohn.printFriends()\n// <= John knows Mary\n\n//-- 使用function的版本\n\n//js\nvar john = {\n  _name: \"John\",\n  _friends: ['Mary'],\n  printFriends: function() {\n    this._friends.forEach(function(friendName){\n      console.log(this._name + \" knows \" + friendName)\n      //這裡使用的是function，this會在呼叫時才決定要指向誰\n    });\n  }\n}\n\njohn.printFriends()\n// if es5 <= undefined knows Mary\n// if es6 <= Cannot read property '_name' of undefined\n// 在es5中，當this指向全域時會得到window，但在es6會得到undefined\n```\n","source":"_posts/2015-03-15-learn-es6-with-babel.md","raw":"title: Learn es6 with babel - Arrows\ndate: 2015-03-15 22:02:01\ntags: [ES6, javascript, Babel]\n---\n在ES6中，可以使用`=>`來定義function。這是一個很類似coffeescript的語法糖（事實上es6有很大一部分是語法糖，個人很喜歡這種做法，與其去改變語言的本質，不如讓語言順著原本的脈絡慢慢茁壯）\n```js\n//es6\nvar f = (foo) => bar;\n\n//babel\nvar f = function (foo) {\n  return bar;\n};\n```\n當有參數，小括號可以省略\n```js\n//es6\nvar f = foo => bar;\n\n//babel\nvar f = function (foo) {\n  return bar;\n};\n```\n當`return`不是單一Expression時，需要用大括號把它包起來，就像一般在寫`function`一樣\n```js\n//es6\nvar foo = (v) => {\n  if (v === bar)\n    play(v);\n};\n\nvar foo = function (v) {\n  if (v === bar) play(v);\n};\n```\n它可以讓code更加的簡短且語意化，例如用在callback上\n```js\n//js\nfoo(res => res + 1);\n\n//babel\nfoo(function (res) {\n  return res + 1;\n});\n```\n有種lambda的感覺，對吧？\n要注意的是，如同在coffeescript中一樣，fat arrow(`=>`)除了是function的縮寫之外，還具有**在定義時綁定`this`**的特性\n```js\n//js\nvar john = {\n  _name: \"John\",\n  _friends: ['Mary'],\n  printFriends: function() {\n    this._friends.forEach(friendName =>\n      console.log(this._name + \" knows \" + friendName));\n      //因為上面使用fat arrow的關係, this才會被綁定為\"定義時的this\"\n  }\n}\n\n//babel\nvar john = {\n  _name: \"John\",\n  _friends: [\"Mary\"],\n  printFriends: function printFriends() {\n    var _this = this;\n    //實現方式其實就是我們常在寫的that = this\n\n    this._friends.forEach(function (friendName) {\n      return console.log(_this._name + \" knows \" + friendName);\n    });\n  }\n};\n\njohn.printFriends()\n// <= John knows Mary\n\n//-- 使用function的版本\n\n//js\nvar john = {\n  _name: \"John\",\n  _friends: ['Mary'],\n  printFriends: function() {\n    this._friends.forEach(function(friendName){\n      console.log(this._name + \" knows \" + friendName)\n      //這裡使用的是function，this會在呼叫時才決定要指向誰\n    });\n  }\n}\n\njohn.printFriends()\n// if es5 <= undefined knows Mary\n// if es6 <= Cannot read property '_name' of undefined\n// 在es5中，當this指向全域時會得到window，但在es6會得到undefined\n```\n","slug":"2015-03-15-learn-es6-with-babel","published":1,"updated":"2015-04-20T12:54:38.730Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciai95rne000el0pgmv50ftnj"},{"title":"從logdown到hexo","date":"2015-02-26T15:32:23.000Z","_content":"因為很多很多的因素，這半年有點低潮\nlogdown沒寫半篇文章，社群聚會完全沒參加，github也是一片荒涼...\n不過新年假期多少恢復了一點元氣；換個新家，換個心情，重新出發!\n\n話說...我好像換了很多次新家了\nblogger => octopress => jeklly => logdown => hexo\n每次裝潢完沒多久又看到新玩具，然後就...(汗\n希望這次hexo能撐得久一點:P\n\n最近這幾天應該會上點style，然後把舊文章修一修\n順便複習一下markdown語法...還有中文的語法XD","source":"_posts/2015-02-26-move-from-logdown-to-hexo.md","raw":"title: 從logdown到hexo\ndate: 2015-02-26 23:32:23\ntags: [閒聊]\n---\n因為很多很多的因素，這半年有點低潮\nlogdown沒寫半篇文章，社群聚會完全沒參加，github也是一片荒涼...\n不過新年假期多少恢復了一點元氣；換個新家，換個心情，重新出發!\n\n話說...我好像換了很多次新家了\nblogger => octopress => jeklly => logdown => hexo\n每次裝潢完沒多久又看到新玩具，然後就...(汗\n希望這次hexo能撐得久一點:P\n\n最近這幾天應該會上點style，然後把舊文章修一修\n順便複習一下markdown語法...還有中文的語法XD","slug":"2015-02-26-move-from-logdown-to-hexo","published":1,"updated":"2015-04-20T12:54:38.771Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciai95rnh000il0pgwas5s0it"},{"layout":"post","title":"[心得] Debug Cordova app with Android 4.4 and Chrome","date":"2014-05-28T19:43:00.000Z","comments":1,"_content":"在Android 4.4，有新的方式可以用Chrome debug Android 上面的 WebView\n方法超簡單（以下以cordova app當範例）：\n1. 確定你有Chrome 30+, Android 4.4, 還有一個嗷嗷待哺的cordova app\n2. 用USB把他們連起來，選項該的開該打勾的打勾，就跟平常一樣\n3. 在你的cordova app的`onDeviceReady`事件加上這段\n        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n            if ( 0 != ( getApplcationInfo().flags &= ApplicationInfo.FLAG_DEBUGGABLE ) ) {\n                WebView.setWebContentsDebuggingEnabled(true);\n            }\n        }\n4. 切到chrome的`chrome://inspect/#devices`頁面\n5. 勾選Discover USB Devices，應該會看到你的安拙在上面，接著開啟你的cordova app\n6. 現在應該會列出你的app開啟的WebView(通常只有一個)，點下inspect，熟悉的ChromeDevTool就出現了！\n    \n感覺就跟Safari的web inspecter一樣\n \n","source":"_posts/2014-05-29-experience-debug-cordova-app-with-android-44-and-chrome.md","raw":"---\nlayout: post\ntitle: '[心得] Debug Cordova app with Android 4.4 and Chrome'\ndate: 2014-05-29 03:43\ncomments: true\ntags: [Cordova, Android, Chrome]\n---\n在Android 4.4，有新的方式可以用Chrome debug Android 上面的 WebView\n方法超簡單（以下以cordova app當範例）：\n1. 確定你有Chrome 30+, Android 4.4, 還有一個嗷嗷待哺的cordova app\n2. 用USB把他們連起來，選項該的開該打勾的打勾，就跟平常一樣\n3. 在你的cordova app的`onDeviceReady`事件加上這段\n        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n            if ( 0 != ( getApplcationInfo().flags &= ApplicationInfo.FLAG_DEBUGGABLE ) ) {\n                WebView.setWebContentsDebuggingEnabled(true);\n            }\n        }\n4. 切到chrome的`chrome://inspect/#devices`頁面\n5. 勾選Discover USB Devices，應該會看到你的安拙在上面，接著開啟你的cordova app\n6. 現在應該會列出你的app開啟的WebView(通常只有一個)，點下inspect，熟悉的ChromeDevTool就出現了！\n    \n感覺就跟Safari的web inspecter一樣\n \n","slug":"2014-05-29-experience-debug-cordova-app-with-android-44-and-chrome","published":1,"updated":"2015-04-20T12:54:38.713Z","photos":[],"link":"","_id":"ciai95rnj000ll0pgb46h9tu6"},{"layout":"post","title":"Cordova trouble shooting","date":"2014-05-25T17:29:00.000Z","comments":1,"_content":"##開發環境：\nEditor: WebStorm 7 with Cordova CLI\nSDK: Cordova 3.4.0 / 3.5.0, Xcode 5.1.1, ADT 22.3.0\nOS: Mac OSX 10.9.2\nDevice: iPhone 4S(iOS 7), Butterfly(Android 4.4), Samsung S3(Android 4.3), Samsung Note 2(Android 4.3)\n\n雖然寫這篇文的時間點，官網上的stable版本依然是3.4.1，不過npm上已經有3.5.0了。個人建議可以直接昇到3.5.0，因為有些bug已經在這版解決了，省得你自己去做solution。\n\n---\n##1. Camera在android一直出現`Class not defind`，可是在iOS卻好好的，而且我確定該死的config.xml沒有寫錯，這哪招？\nA: 先用`cordova plugin ls`檢查一下你的camera plugun叫什麼名字。如果是`com.apache.cordova.camera`的話，接著檢查你的config.xml...我是說`android/res/xml`裡面那隻，看看camera那段，應該是要長這樣：\n```xml\n<feature name=\"Camera\">\n\t<param name=\"android-package\" value=\"org.apache.cordova.camera.CameraLauncher\" />\n</feature>\n```\n注意，是`org.apache.cordova.camera.CameraLauncher`，不是`org.apache.cordova.CameraLauncher`。如果你出現的是後者，回到通用的那隻config.xml，把`<feature name=\"Camera\">`整個區塊刪掉，重新rm/add plarform一次。\n\n##2. 在android 4.4，使用`camera.getPicture()`方法抓取檔案中的圖片，發生一些奇怪的事：同一張圖片從不同路徑進去點選，有些路徑抓的到（例：相簿），有些路徑卻抓不到（例：最近使用的檔案），why?\nA: 這是android 4.4的新改變造成的，詳情可以看這篇issue：[Pick image from Library or Photo album on android 4.4](https://issues.apache.org/jira/browse/CB-5398)，簡單來說就是uri的形式改變了。解決方法有兩種，一種是去改CameraLauncher.java，自己加入kitkat的hack；另外一種是把cordova昇到3.5.0版。對懶人小弟我來說，選哪種很明顯了...XD\n\n##3. 為什麼我build android的時候，`platforms/android/assets/www`底下的檔案常常沒有被更新？  \nA: 之前曾經被這個問題搞到很頭大，連`cordova platform rm/add`之後都一樣，後來發現似乎是WebStorm的問題...。WebStorm的自動儲存機制好像是先寫到cache中，等累計一部份或是超過一定時間後再寫入disk的實體檔案裡，因此如果改完之後馬上進行build，會讀到尚未被寫入的資料。解決方法是變更後加個ctrl + s(save all)就可以了，不過上面那段原因純屬個人猜測，有錯的話煩請指正。\n\n##4. 為什麼用camera拿到的圖片沒有EXIF?\nA: `targetWidth`跟`targetHeight`屬性會把EXIF資訊消掉。\n\n##5. 他媽的為什麼Samsung拍出來的圖片總是不會自動轉正，我明明有下`correctOrientation: true`了啊！？\nA: 就叫你愛用國貨（誤。這是另一個讓我很頭大的問題，如果你用`saveToPhotoAlbum`儲存的話，會發生一些很奇妙的事：在相簿中瀏覽的縮圖是轉過的，可是點進去之後的圖片又是沒轉正的；目前是到的解法是自己把暫存copy一份出來存在另外的資料夾裡，這樣在手機相簿裡縮圖和內容點進去就都會是正的（不過app裡面的img還是要自己下css rotate轉）。當你拉到電腦上用一些可以截取EXIF的軟體看，會發現它其實還是沒轉過的，只是大多數的圖片顯示程式都會去讀EXIF裡面的Orientiation然後自動把它轉正，不過也有另外一種做法，例如HTC跟iphone都是直接給你轉正後的檔案。\n\n##6. iOS傳檔案的時候拿到transferFileError Code:3?\nA: 原因很多，通常code3會伴隨500 Error出現，這時候就要問server端到底發生什麼事了。我遇到的狀況是使用預設的fileTransferOption會傳出不帶副檔名的檔案，如果server端是從檔案名稱截取副檔名來判斷類型的話就會出錯，只要不要偷懶自己設定fileTransferOption就OK了。\n\n##7. 在Android 4.4，從\"最近使用過的檔案\"之類4.4新增的資料夾選取的檔案，上傳時fileTransfer會拿到null?\nA: 原因同Q2，plugin不認識這些4.4新增的路徑，靜待fileTransfer plugin更新，或是跟Q2那篇一樣自己在java檔加入kitkat的hack。","source":"_posts/2014-05-26-note-cordova-trouble-shooting.md","raw":"---\nlayout: post\ntitle: 'Cordova trouble shooting'\ndate: 2014-05-26 01:29\ncomments: true\ntags: [Cordova]\n---\n##開發環境：\nEditor: WebStorm 7 with Cordova CLI\nSDK: Cordova 3.4.0 / 3.5.0, Xcode 5.1.1, ADT 22.3.0\nOS: Mac OSX 10.9.2\nDevice: iPhone 4S(iOS 7), Butterfly(Android 4.4), Samsung S3(Android 4.3), Samsung Note 2(Android 4.3)\n\n雖然寫這篇文的時間點，官網上的stable版本依然是3.4.1，不過npm上已經有3.5.0了。個人建議可以直接昇到3.5.0，因為有些bug已經在這版解決了，省得你自己去做solution。\n\n---\n##1. Camera在android一直出現`Class not defind`，可是在iOS卻好好的，而且我確定該死的config.xml沒有寫錯，這哪招？\nA: 先用`cordova plugin ls`檢查一下你的camera plugun叫什麼名字。如果是`com.apache.cordova.camera`的話，接著檢查你的config.xml...我是說`android/res/xml`裡面那隻，看看camera那段，應該是要長這樣：\n```xml\n<feature name=\"Camera\">\n\t<param name=\"android-package\" value=\"org.apache.cordova.camera.CameraLauncher\" />\n</feature>\n```\n注意，是`org.apache.cordova.camera.CameraLauncher`，不是`org.apache.cordova.CameraLauncher`。如果你出現的是後者，回到通用的那隻config.xml，把`<feature name=\"Camera\">`整個區塊刪掉，重新rm/add plarform一次。\n\n##2. 在android 4.4，使用`camera.getPicture()`方法抓取檔案中的圖片，發生一些奇怪的事：同一張圖片從不同路徑進去點選，有些路徑抓的到（例：相簿），有些路徑卻抓不到（例：最近使用的檔案），why?\nA: 這是android 4.4的新改變造成的，詳情可以看這篇issue：[Pick image from Library or Photo album on android 4.4](https://issues.apache.org/jira/browse/CB-5398)，簡單來說就是uri的形式改變了。解決方法有兩種，一種是去改CameraLauncher.java，自己加入kitkat的hack；另外一種是把cordova昇到3.5.0版。對懶人小弟我來說，選哪種很明顯了...XD\n\n##3. 為什麼我build android的時候，`platforms/android/assets/www`底下的檔案常常沒有被更新？  \nA: 之前曾經被這個問題搞到很頭大，連`cordova platform rm/add`之後都一樣，後來發現似乎是WebStorm的問題...。WebStorm的自動儲存機制好像是先寫到cache中，等累計一部份或是超過一定時間後再寫入disk的實體檔案裡，因此如果改完之後馬上進行build，會讀到尚未被寫入的資料。解決方法是變更後加個ctrl + s(save all)就可以了，不過上面那段原因純屬個人猜測，有錯的話煩請指正。\n\n##4. 為什麼用camera拿到的圖片沒有EXIF?\nA: `targetWidth`跟`targetHeight`屬性會把EXIF資訊消掉。\n\n##5. 他媽的為什麼Samsung拍出來的圖片總是不會自動轉正，我明明有下`correctOrientation: true`了啊！？\nA: 就叫你愛用國貨（誤。這是另一個讓我很頭大的問題，如果你用`saveToPhotoAlbum`儲存的話，會發生一些很奇妙的事：在相簿中瀏覽的縮圖是轉過的，可是點進去之後的圖片又是沒轉正的；目前是到的解法是自己把暫存copy一份出來存在另外的資料夾裡，這樣在手機相簿裡縮圖和內容點進去就都會是正的（不過app裡面的img還是要自己下css rotate轉）。當你拉到電腦上用一些可以截取EXIF的軟體看，會發現它其實還是沒轉過的，只是大多數的圖片顯示程式都會去讀EXIF裡面的Orientiation然後自動把它轉正，不過也有另外一種做法，例如HTC跟iphone都是直接給你轉正後的檔案。\n\n##6. iOS傳檔案的時候拿到transferFileError Code:3?\nA: 原因很多，通常code3會伴隨500 Error出現，這時候就要問server端到底發生什麼事了。我遇到的狀況是使用預設的fileTransferOption會傳出不帶副檔名的檔案，如果server端是從檔案名稱截取副檔名來判斷類型的話就會出錯，只要不要偷懶自己設定fileTransferOption就OK了。\n\n##7. 在Android 4.4，從\"最近使用過的檔案\"之類4.4新增的資料夾選取的檔案，上傳時fileTransfer會拿到null?\nA: 原因同Q2，plugin不認識這些4.4新增的路徑，靜待fileTransfer plugin更新，或是跟Q2那篇一樣自己在java檔加入kitkat的hack。","slug":"2014-05-26-note-cordova-trouble-shooting","published":1,"updated":"2015-04-20T12:54:38.768Z","photos":[],"link":"","_id":"ciai95rno000sl0pgfbyku642"},{"layout":"post","title":"Cordova 3.4 with WP8 踩地雷紀錄","date":"2014-05-16T21:52:00.000Z","comments":1,"_content":"這整個過程讓我想到WOW裡的一個成就： **［這真是段漫長又奇妙的旅程］**\n不過漫長奇妙之外還多了很多的痛苦就是了...ORZ\n###1. `cordova platform add wp8`時出現亂碼錯誤\n...亂碼是要我怎麼debug阿大哥...\n不過還好下面有stack，可以看到問題出在`wp8_parser.js`這隻裡面的這段：\n```js\nchild_process.exec(command, function(err, output, stderr) {\n  events.emit('verbose', output);\n  if (err) {\n  \td.reject(new Error('Requirements check failed: ' + output + stderr));\n  } else {\n  \td.resolve();\n\t}\n});\n```\n\n恩，還是沒有頭緒，試著把err catch註解掉，會得到另一個error`副檔名 .js 沒有對應的 script 引擎`\n於是按照google大神的指示，裝了Windows Scrip，然後再把原本的err catch加回去...就可以了。\n> 老實說小弟才疏學淺完全不知道發生了什麼事...懇請前輩們指點\n\n###2. `cordova platform add wp8`成功，但是在CREAT SUCCESS之後，要加入plugin時發生錯誤`Non-white space before first tag`\n原因出在`\\platforms\\wp8\\CordovaWP8AppProj.csproj`跟`\\platforms\\wp8\\Properties\\WMAppManifest.xml`這兩隻檔案一開始的宣告出現亂碼。\n這是個尚未被解決的Bug，可以參考[這篇](https://issues.apache.org/jira/browse/CB-6301)\n雖然提出者的環境是簡體中文，但是最底下的解法在繁中的環境下依然有效：\n> wei jiang added a comment - 09/Apr/14 14:26\nI have found a solution for this issue:\n1、open C:\\Users\\.cordova\\lib\\wp\\cordova\\3.4.0\\wp8\\bin\\create.js\nline 68:\nchange \n'var f=fso.OpenTextFile(filename,1,2);'\nto \n'var f=fso.OpenTextFile(filename,ForReading,false,TristateFalse);'\nline 75:\nchange \n'var f=fso.OpenTextFile(filename, ForWriting, TristateFalse);'\nto \n'var f=fso.OpenTextFile(filename, ForWriting,true, TristateFalse);'\n2、Change the encoding of these files to 'UTF-8 without BOM' \nin C:\\Users\\.cordova\\lib\\wp\\cordova\\3.4.0\\wp8\\template\nApp.xaml\nApp.xaml.cs\nCordovaWP8AppProj.csproj\nCordovaWP8Solution.sln\nMainPage.xaml.cs\nProperties\\WMAppManifest.xml\nps:I did this using Notepad++\n\n另外，[這篇](http://my.oschina.net/arrowing/blog/181476#OSC_h2_14)也有另一種做法，不過可能是系統語言不同的關係，我用這種作法會沒辦法正確的parse xml。","source":"_posts/2014-05-17-note-cordova-34-with-wp8-minesweeper-records.md","raw":"---\nlayout: post\ntitle: 'Cordova 3.4 with WP8 踩地雷紀錄'\ndate: 2014-05-17 05:52\ncomments: true\ntags: [Cordova, Windows Phone]\n---\n這整個過程讓我想到WOW裡的一個成就： **［這真是段漫長又奇妙的旅程］**\n不過漫長奇妙之外還多了很多的痛苦就是了...ORZ\n###1. `cordova platform add wp8`時出現亂碼錯誤\n...亂碼是要我怎麼debug阿大哥...\n不過還好下面有stack，可以看到問題出在`wp8_parser.js`這隻裡面的這段：\n```js\nchild_process.exec(command, function(err, output, stderr) {\n  events.emit('verbose', output);\n  if (err) {\n  \td.reject(new Error('Requirements check failed: ' + output + stderr));\n  } else {\n  \td.resolve();\n\t}\n});\n```\n\n恩，還是沒有頭緒，試著把err catch註解掉，會得到另一個error`副檔名 .js 沒有對應的 script 引擎`\n於是按照google大神的指示，裝了Windows Scrip，然後再把原本的err catch加回去...就可以了。\n> 老實說小弟才疏學淺完全不知道發生了什麼事...懇請前輩們指點\n\n###2. `cordova platform add wp8`成功，但是在CREAT SUCCESS之後，要加入plugin時發生錯誤`Non-white space before first tag`\n原因出在`\\platforms\\wp8\\CordovaWP8AppProj.csproj`跟`\\platforms\\wp8\\Properties\\WMAppManifest.xml`這兩隻檔案一開始的宣告出現亂碼。\n這是個尚未被解決的Bug，可以參考[這篇](https://issues.apache.org/jira/browse/CB-6301)\n雖然提出者的環境是簡體中文，但是最底下的解法在繁中的環境下依然有效：\n> wei jiang added a comment - 09/Apr/14 14:26\nI have found a solution for this issue:\n1、open C:\\Users\\.cordova\\lib\\wp\\cordova\\3.4.0\\wp8\\bin\\create.js\nline 68:\nchange \n'var f=fso.OpenTextFile(filename,1,2);'\nto \n'var f=fso.OpenTextFile(filename,ForReading,false,TristateFalse);'\nline 75:\nchange \n'var f=fso.OpenTextFile(filename, ForWriting, TristateFalse);'\nto \n'var f=fso.OpenTextFile(filename, ForWriting,true, TristateFalse);'\n2、Change the encoding of these files to 'UTF-8 without BOM' \nin C:\\Users\\.cordova\\lib\\wp\\cordova\\3.4.0\\wp8\\template\nApp.xaml\nApp.xaml.cs\nCordovaWP8AppProj.csproj\nCordovaWP8Solution.sln\nMainPage.xaml.cs\nProperties\\WMAppManifest.xml\nps:I did this using Notepad++\n\n另外，[這篇](http://my.oschina.net/arrowing/blog/181476#OSC_h2_14)也有另一種做法，不過可能是系統語言不同的關係，我用這種作法會沒辦法正確的parse xml。","slug":"2014-05-17-note-cordova-34-with-wp8-minesweeper-records","published":1,"updated":"2015-04-20T12:54:38.785Z","photos":[],"link":"","_id":"ciai95rnq000ul0pgmm0ag5v3"},{"layout":"post","title":"Cordova with jQuery Mobile & Backbone的一些小問題","date":"2014-04-29T22:05:00.000Z","comments":1,"_content":"小弟這幾個月做前端的心得是：有些東西看起來很美好，睡到床上後才知道...（喂\n下面筆記一下使用jQuery Mobile 1.4.2 + Backbone + Cordova 3.4開發中遇到的一些“小”問題\n\n##Cordova\n---\n####Q: 為什麼我明明照[官方Doc](http://cordova.apache.org/docs/en/3.4.0/config_ref_images.md.html#Icons%20and%20Splash%20Screens)的說明放好icons了，build出來的app圖示還是那隻小機器人？\nA: 因為愛，愛一直都是沒有理由的...好吧，老實說我不知道這是新版的cordova bug還是有什麼地方出了問題，導致cordova add platform的時候生出來的icon永遠都是那隻小機器人。解法有二：一是自己在不同平台中替換，ios的位置放在`platforms\\ios\\{projectName}\\Resoures\\icons`裏面，也可以直接用xcode換（其實這樣比較快，省得取一堆檔名），在Basic settings裡面就找的到，應該不用截圖了XD。android的位置則是在`platforms\\android\\res\\drawable-{dpi}`裡面，Eclipse裡面應該也有地方可以換，不過公司電腦開Eclips超慢所以我沒開過...。第二種方法是用別人寫好的hook幫你做上面那些事，例如[這個](https://gist.github.com/apla/6179863)。\n不過，用上面第一種方法做替換的話，cordova重新建平台的時候又會洗回來一次(rm/add platform時，build不會)，所以並不是個很美好的解法，不過當你被死線追著跑的時候就先將就頂著吧...Orz\n\n####Q: 為什麼config.xml上的Orientation明明有設定portrait了，可是android上卻沒有用？\nA: 根據stackoverflow上[這篇回答](http://stackoverflow.com/questions/21212246/cordova-ignores-screen-orientation-lock)的說法，這是個bug，不過他應該已經被fix掉了才對，那為什麼還會有問題呢？去檢查AndroidManifest.xml中的設定後，發現`android:screenOrientation`是`userPortrait`，兩者間的差別在於：\n>If the user has locked sensor-based rotation, this behaves the same as portrait, otherwise it behaves the same as sensorPortrait.\n\n可是不對啊，我明明是下portrait，為什麼會變成userPortait？打開cordova裡面一隻叫做`android_parser.js`的檔案，會發現下面這段：\n```js\n// Set the orientation in the AndroidManifest\nvar orientationPref = this.findOrientationPreference(config);\nif (orientationPref) {\n\tvar act = manifest.getroot().find('./application/activity');\n\tswitch (orientationPref) {\n\t\tcase 'default':\n\t\t\tdelete act.attrib[\"android:screenOrientation\"];\n\t\t\tbreak;\n\t\tcase 'portrait':\n\t\t\tact.attrib[\"android:screenOrientation\"] = 'userPortrait';\n\t\t\tbreak;\n\t\tcase 'landscape':\n\t\t\tact.attrib[\"android:screenOrientation\"] = 'userLandscape';\n\t\t}\n}\n```\n簡單來說，就是cordova在build android時會把\"portrait\"轉成\"userPortait\"，\"landspace\"轉成\"userLandspace\"，不知道該說她貼心還是雞婆...\n解法就是把上面的code稍微改一下：\n```js\n// Set the orientation in the AndroidManifest\nvar orientationPref = this.findOrientationPreference(config);\nif (orientationPref) {\n\tvar act = manifest.getroot().find('./application/activity');\n\tswitch (orientationPref) {\n\t\tcase 'default':\n\t\t\tdelete act.attrib[\"android:screenOrientation\"];\n\t\t\tbreak;\n\t\tcase 'portrait':\n\t\t\t// act.attrib[\"android:screenOrientation\"] = 'userPortrait';\n\t\t\tact.attrib[\"android:screenOrientation\"] = 'portrait';\n\t\t\tbreak;\n\t\tcase 'landscape':\n\t\t\t// act.attrib[\"android:screenOrientation\"] = 'userLandscape';\n\t\t\tact.attrib[\"android:screenOrientation\"] = 'landscape';\n\t\t}\n}\n```\n####Q: 在config.xml中設置中文的name會不會有問題？\nA: 老實說，這問題很微妙，因為我在config.xml中設定app name為中文時，build android會發生問題，可是華文圈好像沒有相關災情傳出...如果跟我一樣碰到的話，就在發佈前去`platforms/android/res/values/string.xml`裡面改吧。\n\n\n##jQuery Mobile\n---\n####Q: changepage的時候會抖一下，為什麼？\nA: 就跟你上廁所的時候會抖一下是一樣的道理（誤\n這是很多人都會碰到的問題，不知道為什麼在transform的時候page的高會多出1px，結束後套上正常的min-height就產生了那一點點的抖動。解法有很多種，[這個](http://outof.me/fixing-flickers-jumps-of-jquery-mobile-transitions-in-phonegap-apps/)試過可以，不過會產生另一個問題就是ios會不能捲動page content，需要[iscroll.js](https://github.com/cubiq/iscroll)；後來發現johnbender[有解釋這個問題](https://github.com/jquery/jquery-mobile/issues/2846)，原因是jQuery mobile會預先向下scroll 1px來隱藏nav bar，解決方法就是在jQuery mobile引入後，還沒初始化頁面前設定$.mobile.defaultHomeScroll=0。\n> 寶傑，你知道嗎，這1px搞了我兩天...\n\n####Q: changepage的時候會閃一下，為什麼？\nA: 首先，先確認不是你的眼睛在閃（無誤），畢竟幹這行可說是靠眼睛吃飯的，要好好保養啊...\n如果眼睛沒問題的話，那就在page style上加個`backface-visibility: hidden`就可以了。\n\n##Backbone\n---\n####Q: touch event會被觸發兩次，或是某些頁面的even時好時壞？\nA: 檢查有沒有發生\"ghost view\"的狀況，也就是某個（或某些）dom被綁了一個以上的view，這種事情常發生在動態新增view的時候。\n","source":"_posts/2014-04-30-note-cordova-with-jquery-mobile.md","raw":"---\nlayout: post\ntitle: 'Cordova with jQuery Mobile & Backbone的一些小問題'\ndate: 2014-04-30 06:05\ncomments: true\ntags: [Cordova, jQuery Mobile, Backbone, javascript]\n---\n小弟這幾個月做前端的心得是：有些東西看起來很美好，睡到床上後才知道...（喂\n下面筆記一下使用jQuery Mobile 1.4.2 + Backbone + Cordova 3.4開發中遇到的一些“小”問題\n\n##Cordova\n---\n####Q: 為什麼我明明照[官方Doc](http://cordova.apache.org/docs/en/3.4.0/config_ref_images.md.html#Icons%20and%20Splash%20Screens)的說明放好icons了，build出來的app圖示還是那隻小機器人？\nA: 因為愛，愛一直都是沒有理由的...好吧，老實說我不知道這是新版的cordova bug還是有什麼地方出了問題，導致cordova add platform的時候生出來的icon永遠都是那隻小機器人。解法有二：一是自己在不同平台中替換，ios的位置放在`platforms\\ios\\{projectName}\\Resoures\\icons`裏面，也可以直接用xcode換（其實這樣比較快，省得取一堆檔名），在Basic settings裡面就找的到，應該不用截圖了XD。android的位置則是在`platforms\\android\\res\\drawable-{dpi}`裡面，Eclipse裡面應該也有地方可以換，不過公司電腦開Eclips超慢所以我沒開過...。第二種方法是用別人寫好的hook幫你做上面那些事，例如[這個](https://gist.github.com/apla/6179863)。\n不過，用上面第一種方法做替換的話，cordova重新建平台的時候又會洗回來一次(rm/add platform時，build不會)，所以並不是個很美好的解法，不過當你被死線追著跑的時候就先將就頂著吧...Orz\n\n####Q: 為什麼config.xml上的Orientation明明有設定portrait了，可是android上卻沒有用？\nA: 根據stackoverflow上[這篇回答](http://stackoverflow.com/questions/21212246/cordova-ignores-screen-orientation-lock)的說法，這是個bug，不過他應該已經被fix掉了才對，那為什麼還會有問題呢？去檢查AndroidManifest.xml中的設定後，發現`android:screenOrientation`是`userPortrait`，兩者間的差別在於：\n>If the user has locked sensor-based rotation, this behaves the same as portrait, otherwise it behaves the same as sensorPortrait.\n\n可是不對啊，我明明是下portrait，為什麼會變成userPortait？打開cordova裡面一隻叫做`android_parser.js`的檔案，會發現下面這段：\n```js\n// Set the orientation in the AndroidManifest\nvar orientationPref = this.findOrientationPreference(config);\nif (orientationPref) {\n\tvar act = manifest.getroot().find('./application/activity');\n\tswitch (orientationPref) {\n\t\tcase 'default':\n\t\t\tdelete act.attrib[\"android:screenOrientation\"];\n\t\t\tbreak;\n\t\tcase 'portrait':\n\t\t\tact.attrib[\"android:screenOrientation\"] = 'userPortrait';\n\t\t\tbreak;\n\t\tcase 'landscape':\n\t\t\tact.attrib[\"android:screenOrientation\"] = 'userLandscape';\n\t\t}\n}\n```\n簡單來說，就是cordova在build android時會把\"portrait\"轉成\"userPortait\"，\"landspace\"轉成\"userLandspace\"，不知道該說她貼心還是雞婆...\n解法就是把上面的code稍微改一下：\n```js\n// Set the orientation in the AndroidManifest\nvar orientationPref = this.findOrientationPreference(config);\nif (orientationPref) {\n\tvar act = manifest.getroot().find('./application/activity');\n\tswitch (orientationPref) {\n\t\tcase 'default':\n\t\t\tdelete act.attrib[\"android:screenOrientation\"];\n\t\t\tbreak;\n\t\tcase 'portrait':\n\t\t\t// act.attrib[\"android:screenOrientation\"] = 'userPortrait';\n\t\t\tact.attrib[\"android:screenOrientation\"] = 'portrait';\n\t\t\tbreak;\n\t\tcase 'landscape':\n\t\t\t// act.attrib[\"android:screenOrientation\"] = 'userLandscape';\n\t\t\tact.attrib[\"android:screenOrientation\"] = 'landscape';\n\t\t}\n}\n```\n####Q: 在config.xml中設置中文的name會不會有問題？\nA: 老實說，這問題很微妙，因為我在config.xml中設定app name為中文時，build android會發生問題，可是華文圈好像沒有相關災情傳出...如果跟我一樣碰到的話，就在發佈前去`platforms/android/res/values/string.xml`裡面改吧。\n\n\n##jQuery Mobile\n---\n####Q: changepage的時候會抖一下，為什麼？\nA: 就跟你上廁所的時候會抖一下是一樣的道理（誤\n這是很多人都會碰到的問題，不知道為什麼在transform的時候page的高會多出1px，結束後套上正常的min-height就產生了那一點點的抖動。解法有很多種，[這個](http://outof.me/fixing-flickers-jumps-of-jquery-mobile-transitions-in-phonegap-apps/)試過可以，不過會產生另一個問題就是ios會不能捲動page content，需要[iscroll.js](https://github.com/cubiq/iscroll)；後來發現johnbender[有解釋這個問題](https://github.com/jquery/jquery-mobile/issues/2846)，原因是jQuery mobile會預先向下scroll 1px來隱藏nav bar，解決方法就是在jQuery mobile引入後，還沒初始化頁面前設定$.mobile.defaultHomeScroll=0。\n> 寶傑，你知道嗎，這1px搞了我兩天...\n\n####Q: changepage的時候會閃一下，為什麼？\nA: 首先，先確認不是你的眼睛在閃（無誤），畢竟幹這行可說是靠眼睛吃飯的，要好好保養啊...\n如果眼睛沒問題的話，那就在page style上加個`backface-visibility: hidden`就可以了。\n\n##Backbone\n---\n####Q: touch event會被觸發兩次，或是某些頁面的even時好時壞？\nA: 檢查有沒有發生\"ghost view\"的狀況，也就是某個（或某些）dom被綁了一個以上的view，這種事情常發生在動態新增view的時候。\n","slug":"2014-04-30-note-cordova-with-jquery-mobile","published":1,"updated":"2015-04-20T12:54:38.681Z","photos":[],"link":"","_id":"ciai95rns000yl0pgtmq5gret"},{"layout":"post","title":"Chrome workspace with Sass and Compass","date":"2014-03-26T01:54:00.000Z","comments":1,"_content":"","source":"_posts/2014-03-26-note-chrome-workspace-with-sass-and-compass.md","raw":"---\nlayout: post\ntitle: 'Chrome workspace with Sass and Compass'\ndate: 2014-03-26 09:54\ncomments: true\ntags: \n---\n","slug":"2014-03-26-note-chrome-workspace-with-sass-and-compass","published":1,"updated":"2015-04-20T13:15:10.269Z","photos":[],"link":"","_id":"ciai95rnw0015l0pgwdwi8o5d"},{"layout":"post","title":"WebStorm中Sass File Watcher的一顆小地雷","date":"2014-03-08T04:37:00.000Z","comments":1,"_content":"當我們在寫Sass的時候，把它拆成各個區塊方便管理是一件很正常的事，像這樣：\n```\npartial.sass\nmain.sass\n```\n然後，因為partial.sass不需要被compiler成partial.css，所以檔名前面會加上加上`_`，變成\\_partial.sass。到目前為止一切都很合理。\n```\n_partial.sass\nmain.sass\n```\n接下來在main.sass中引入這個partial，看起來沒什麼問題，不過接下來就是地雷了\n```css\n@import partial\n\n// main.sass\n```\n通常，我們會希望在更改\\_partial中的內容後，重新編譯引入他的檔案，也就是main.sass。爬過stackoverflow之後，可以知道WebStorm提供了一個選項給你，叫做\"track only root files\"，取消的話她就會連帶編譯跟這個檔有關的所有檔案，很貼心對吧？\n\n...才怪，當你實際測試之後會發現，更改\\_partial.sass的內容後，並沒有編譯出新的main.css，要把import的檔名改一下：\n```css\n@import _partial\n\n// main.sass\n```\n這樣子，\\_partial.sass的內容被更改的時候，就會一併編譯main.sass了。不過問題還沒結束，仔細看資料夾，你會發現多了一個\\_partial.css...沒錯，他連`_`開頭的檔案也編譯了。\n\n正確的解法應該是， **要勾選track only root files，然後import的檔名必須加上`_`**，這樣就能正確的編譯且不產生多餘的檔案了。\n\n> ...馬德，stackoverflow誤我半天...","source":"_posts/2014-03-08-note-sass-with-webstorm.md","raw":"---\nlayout: post\ntitle: 'WebStorm中Sass File Watcher的一顆小地雷'\ndate: 2014-03-08 12:37\ncomments: true\ntags: [WebStorm, SASS, CSS]\n---\n當我們在寫Sass的時候，把它拆成各個區塊方便管理是一件很正常的事，像這樣：\n```\npartial.sass\nmain.sass\n```\n然後，因為partial.sass不需要被compiler成partial.css，所以檔名前面會加上加上`_`，變成\\_partial.sass。到目前為止一切都很合理。\n```\n_partial.sass\nmain.sass\n```\n接下來在main.sass中引入這個partial，看起來沒什麼問題，不過接下來就是地雷了\n```css\n@import partial\n\n// main.sass\n```\n通常，我們會希望在更改\\_partial中的內容後，重新編譯引入他的檔案，也就是main.sass。爬過stackoverflow之後，可以知道WebStorm提供了一個選項給你，叫做\"track only root files\"，取消的話她就會連帶編譯跟這個檔有關的所有檔案，很貼心對吧？\n\n...才怪，當你實際測試之後會發現，更改\\_partial.sass的內容後，並沒有編譯出新的main.css，要把import的檔名改一下：\n```css\n@import _partial\n\n// main.sass\n```\n這樣子，\\_partial.sass的內容被更改的時候，就會一併編譯main.sass了。不過問題還沒結束，仔細看資料夾，你會發現多了一個\\_partial.css...沒錯，他連`_`開頭的檔案也編譯了。\n\n正確的解法應該是， **要勾選track only root files，然後import的檔名必須加上`_`**，這樣就能正確的編譯且不產生多餘的檔案了。\n\n> ...馬德，stackoverflow誤我半天...","slug":"2014-03-08-note-sass-with-webstorm","published":1,"updated":"2015-04-20T12:54:38.701Z","photos":[],"link":"","_id":"ciai95ro00016l0pgoekxx2ao"},{"layout":"post","title":"在WebStorm中新增compass的語法提示","date":"2014-03-08T06:31:00.000Z","comments":1,"_content":"在WebStorm中，compass是沒有內建代碼提示的，而且所有的compass mixin都會被標示為undefined mixin（雖然不影響compiler），連`@import compass`底下都會爬一條紅蚯蚓，跟你說他找不到compass.sass這個檔案。目前看到最好的解法是手動新增符號連結。\n\n先切到專案中的sass目錄裡\n```\ncd projectlocate/sass\n```\n新增一個compass的符號連結\n```\nmklink /d compass $COMPASS_LOCATE\n```\n$COMPASS_LOCATE`是裝在ruby gem底下的compass stylesheet位置，舉例來說我的長這樣：\n```\nH:\\Units\\Ruby193\\lib\\ruby\\gems\\1.9.1\\gems\\compass-0.12.3\\frameworks\\compass\\stylesheets\\compass\n```\n然後就可以得到compass的代碼提示了，這作法就類似把新增compass到你的libary裡面，只是沒有實際引入檔案。\n\n如果要移除這個符號連結， **不要直接刪除**，要用下面這行指令：\n```\nrmdir compass\n```\n至於mac或linux中，Symbolic Link的指令是這樣：\n```\nln -s <dest> <link>\nrm <dest>\n```\n例如我的是/Library/Ruby/Gems/2.0.0/gems/compass-0.12.3/frameworks/compass/stylesheets/compass\n\n\n\n> 我說大哥阿，你既然都bundle compass進去了，為什麼不搞得徹底一點呢....\n","source":"_posts/2014-03-08-note-in-webstorm-added-compass-syntax-tips.md","raw":"---\nlayout: post\ntitle: '在WebStorm中新增compass的語法提示'\ndate: 2014-03-08 14:31\ncomments: true\ntags: [WebStorm, SASS, CSS] \n---\n在WebStorm中，compass是沒有內建代碼提示的，而且所有的compass mixin都會被標示為undefined mixin（雖然不影響compiler），連`@import compass`底下都會爬一條紅蚯蚓，跟你說他找不到compass.sass這個檔案。目前看到最好的解法是手動新增符號連結。\n\n先切到專案中的sass目錄裡\n```\ncd projectlocate/sass\n```\n新增一個compass的符號連結\n```\nmklink /d compass $COMPASS_LOCATE\n```\n$COMPASS_LOCATE`是裝在ruby gem底下的compass stylesheet位置，舉例來說我的長這樣：\n```\nH:\\Units\\Ruby193\\lib\\ruby\\gems\\1.9.1\\gems\\compass-0.12.3\\frameworks\\compass\\stylesheets\\compass\n```\n然後就可以得到compass的代碼提示了，這作法就類似把新增compass到你的libary裡面，只是沒有實際引入檔案。\n\n如果要移除這個符號連結， **不要直接刪除**，要用下面這行指令：\n```\nrmdir compass\n```\n至於mac或linux中，Symbolic Link的指令是這樣：\n```\nln -s <dest> <link>\nrm <dest>\n```\n例如我的是/Library/Ruby/Gems/2.0.0/gems/compass-0.12.3/frameworks/compass/stylesheets/compass\n\n\n\n> 我說大哥阿，你既然都bundle compass進去了，為什麼不搞得徹底一點呢....\n","slug":"2014-03-08-note-in-webstorm-added-compass-syntax-tips","published":1,"updated":"2015-04-20T12:54:38.781Z","photos":[],"link":"","_id":"ciai95ro3001dl0pgd3udfte0"},{"layout":"post","title":"Flex with LESS","date":"2014-02-10T07:42:00.000Z","comments":1,"_content":"","source":"_posts/2014-02-10-note-flex-with-less.md","raw":"---\nlayout: post\ntitle: 'Flex with LESS'\ndate: 2014-02-10 15:42\ncomments: true\ncategories: \n---\n","slug":"2014-02-10-note-flex-with-less","published":1,"updated":"2015-04-20T12:54:38.743Z","photos":[],"link":"","_id":"ciai95ro6001hl0pgorkzpoid"},{"layout":"post","title":"HTML5 Semantic Elements","date":"2014-02-03T23:59:00.000Z","comments":1,"_content":"<img src=\"http://html5doctor.com/downloads/h5d-sectioning-flowchart.png\"/>\n\n其實舊的HTML4.01中也有一些元素是具有語意性的，例如`<form>`、`<table>`、`<img>`，而在HTML5中，新增了更多的常用語意性元素，用來取代以往由各種`<div>`切成的區塊，例如`<head>`、`<footer>`等等。下面整理一些常用的HTML5語意性元素。\n\n###\\<header>\n用來表示區塊標題的區塊元素，這個區塊可以是一整個頁面、一個段落或一篇文章，可以把它當成一個放置介紹內容的容器。一個頁面中可以有多個header。\\<header>是一容器沒錯，但是它裡面裝的東西應該只有區塊的標題或者摘要。不要把\\<header>當成\\<div class=\"header\">來使用。另外，\\<header>也不能放在\\<footer>、\\<address>或另一個\\<header>裡面。\n\n###\\<nav>\n導覽列。裡面裝的東西應該只有主要的navigation links，不要把各種link都丟到\\<nav>裡面。舉例來說，footer裡面常常會有一排link，那個就不需要包進\\<nav>。\n\n###\\<section>\n文件中的一個專題群組或區塊。一般來說，裡面都會包含heading。如果這個區塊的內容可以分成幾個部分的話，那應該使用article。\n> Examples of sections would be chapters, the various tabbed pages in a tabbed dialog box, or the numbered sections of a thesis. A Web site’s home page could be split into sections for an introduction, news items, and contact information.\n\n使用section的地方像是文章中的章節，一個標籤式對話框中的各個標籤頁面，或論文的編號部分。一個網站的主業通常可以分成幾個section，像是introduction，news items還有contact information。\n> Do not use the \\<section> element as a generic container; this is what \\<div> is for, especially when the sectioning is only for styling purposes.\n\n不要把section當成div用，這大概是最常見的錯誤用法。section內裝的應該是有意義且附帶標題的一段內容。例如這樣：\n```html\n<section>\n  <h1>Heading</h1>\n  <p>Bunch of awesome content</p>\n</section>\n```\n\n<!--more-->\n\n\n###\\<article>\n一個獨立的區塊，同樣必須帶有heading。舉例來說，像這篇文章本身就是一個article，下面每個回應也都是一個單獨的article。\narticle跟section的區分是，article有更高的獨立性及完整性。MDN裡面是這樣說明的：\n> \"The HTML \\<article> Element represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable, e.g., in syndication.\"\n\narticle本身就算脫離了整體也是一個可以獨立存在、具有完整內容的區塊，例如這篇文章；而section雖然也具有獨立表達內容的能力，但是對外層有一定的相依性，例如這篇文章中的一個章節。\n\n###\\<aside>\naside元素代表從內容分離的部分。這些部分通常被表示為sidebar或interns。他們通常包含side explanations，像是術語定義；也可以放較為鬆散相關的東西，像廣告、的作者的傳記、個人資料信息或相關連結。像w3school舉的這個例子：\n```html\n<p>My family and I visited The Epcot center this summer.</p>\n\n<aside>\n  <h4>Epcot Center</h4>\n  <p>The Epcot Center is a theme park in Disney World, Florida.</p>\n</aside>\n```\n另外，不要用aside標記括弧內的文字，這通常被認為是主要內容的一部分。\n\n###\\<footer>\nfooter代表一個區塊的結尾訊息，這個區塊是離他最近的父 \\<article>, \\<aside>, \\<nav>, \\<section>, \\<blockquote>, \\<body>, \\<details>, \\<fieldset>, \\<figure>, \\<td>。footer內通常會包含作者、版權等資訊。footer元素不是父區塊的內容之一，所以並不會出現在outline中。在address元素中的作者資訊也可以放在footer裡面。\n```html\n<footer>\n  <p>Posted by: Hege Refsnes</p>\n  <p>Contact information: <a href=\"mailto:someone@example.com\">\n  someone@example.com</a>.</p>\n</footer>\n```\n\n###\\<figure>\n這也是一個常被誤用的標籤，頻率大概僅次於section。先看看它的定義：\n> The figure element represents a unit of content, optionally with a caption, that is self-contained, that is typically referenced as a single unit from the main flow of the document, and that can be moved away from the main flow of the document without affecting the document’s meaning.\n\n簡單來說，figure是一個有完整內容的區塊，他是主要內容的一部分，而且可以任意移動位置而不影響整體內容的表達。常見的問題是把每個img都包上figure，這完全沒有意義。簡單的判斷方式是想想看＂我把這個figure拿掉會不會影響到上下文的閱讀？＂，如果會的話，他就絕對不該是一個figure。\nfigure絕對不是只拿來包圖片的，他可以包含影音檔、圖表（可能是canvas或是svg）或是一段code。他跟aside的差別在於：\n\n* aside和主內容有關，但不是主內容的一部分\n* figure是主內容的一部分，但是他可以任意移動或刪除而不影響主內容的表達。\n\n通常figure會搭配\\<figcaption>服用，他放在第一個或最後一個子元素，像這樣：\n```html\n<figure>\n  <img src=\"/macaque.jpg\" alt=\"Macaque in the trees\">\n  <figcaption>A cheeky macaque, Lower Kintaganban River, Borneo. Original by <a href=\"http://www.flickr.com/photos/rclark/\">Richard Clark</a></figcaption>\n</figure>\n```\n範例可以參考[HTML5 Doctor](http://html5doctor.com/the-figure-figcaption-elements/)\n\n##其他\n---\n* IE8以下不支援HTML5，可以用[HTML5shiv](https://code.google.com/p/html5shiv/)來補足。\n* 如果沒有十足的把握，可以先用一般的寫法完成頁面，然後再去做語意化的動作。不當的語意化對SEO來說是個悲劇。\n* XDite大大在[如何設計出正確語意的 HTML5](http://wp.xdite.net/?p=3071)有提到＂不要對任何語意TAG下style，否則當需要調整語意結構時，會天下大亂＂，可能是我太菜，不知道為什麼會這樣說，也找不到相關的文章。如果每個semantic tag外面都包個div，這樣的code會比較好嗎？\n\n##參考\n---\n[MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element)\n[W3School](http://www.w3schools.com/html/html5_semantic_elements.asp)\n[HTML5Doctor](http://html5doctor.com/)\n[Blog.XDite.net:如何設計出正確語意的 HTML5](http://wp.xdite.net/?p=3071)\n[避免常見的六種 HTML5 錯誤用法](http://waterlily-lsl.com/modules/article/view.article.php/c1/258)\n[HTML5 中 div section article 的区别](http://www.qianduan.net/html5-differences-in-the-div-section-article.html)","source":"_posts/2014-02-04-note-of-semantic-html.md","raw":"---\nlayout: post\ntitle: 'HTML5 Semantic Elements'\ndate: 2014-02-04 07:59\ncomments: true\ntags: [HTML5] \n---\n<img src=\"http://html5doctor.com/downloads/h5d-sectioning-flowchart.png\"/>\n\n其實舊的HTML4.01中也有一些元素是具有語意性的，例如`<form>`、`<table>`、`<img>`，而在HTML5中，新增了更多的常用語意性元素，用來取代以往由各種`<div>`切成的區塊，例如`<head>`、`<footer>`等等。下面整理一些常用的HTML5語意性元素。\n\n###\\<header>\n用來表示區塊標題的區塊元素，這個區塊可以是一整個頁面、一個段落或一篇文章，可以把它當成一個放置介紹內容的容器。一個頁面中可以有多個header。\\<header>是一容器沒錯，但是它裡面裝的東西應該只有區塊的標題或者摘要。不要把\\<header>當成\\<div class=\"header\">來使用。另外，\\<header>也不能放在\\<footer>、\\<address>或另一個\\<header>裡面。\n\n###\\<nav>\n導覽列。裡面裝的東西應該只有主要的navigation links，不要把各種link都丟到\\<nav>裡面。舉例來說，footer裡面常常會有一排link，那個就不需要包進\\<nav>。\n\n###\\<section>\n文件中的一個專題群組或區塊。一般來說，裡面都會包含heading。如果這個區塊的內容可以分成幾個部分的話，那應該使用article。\n> Examples of sections would be chapters, the various tabbed pages in a tabbed dialog box, or the numbered sections of a thesis. A Web site’s home page could be split into sections for an introduction, news items, and contact information.\n\n使用section的地方像是文章中的章節，一個標籤式對話框中的各個標籤頁面，或論文的編號部分。一個網站的主業通常可以分成幾個section，像是introduction，news items還有contact information。\n> Do not use the \\<section> element as a generic container; this is what \\<div> is for, especially when the sectioning is only for styling purposes.\n\n不要把section當成div用，這大概是最常見的錯誤用法。section內裝的應該是有意義且附帶標題的一段內容。例如這樣：\n```html\n<section>\n  <h1>Heading</h1>\n  <p>Bunch of awesome content</p>\n</section>\n```\n\n<!--more-->\n\n\n###\\<article>\n一個獨立的區塊，同樣必須帶有heading。舉例來說，像這篇文章本身就是一個article，下面每個回應也都是一個單獨的article。\narticle跟section的區分是，article有更高的獨立性及完整性。MDN裡面是這樣說明的：\n> \"The HTML \\<article> Element represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable, e.g., in syndication.\"\n\narticle本身就算脫離了整體也是一個可以獨立存在、具有完整內容的區塊，例如這篇文章；而section雖然也具有獨立表達內容的能力，但是對外層有一定的相依性，例如這篇文章中的一個章節。\n\n###\\<aside>\naside元素代表從內容分離的部分。這些部分通常被表示為sidebar或interns。他們通常包含side explanations，像是術語定義；也可以放較為鬆散相關的東西，像廣告、的作者的傳記、個人資料信息或相關連結。像w3school舉的這個例子：\n```html\n<p>My family and I visited The Epcot center this summer.</p>\n\n<aside>\n  <h4>Epcot Center</h4>\n  <p>The Epcot Center is a theme park in Disney World, Florida.</p>\n</aside>\n```\n另外，不要用aside標記括弧內的文字，這通常被認為是主要內容的一部分。\n\n###\\<footer>\nfooter代表一個區塊的結尾訊息，這個區塊是離他最近的父 \\<article>, \\<aside>, \\<nav>, \\<section>, \\<blockquote>, \\<body>, \\<details>, \\<fieldset>, \\<figure>, \\<td>。footer內通常會包含作者、版權等資訊。footer元素不是父區塊的內容之一，所以並不會出現在outline中。在address元素中的作者資訊也可以放在footer裡面。\n```html\n<footer>\n  <p>Posted by: Hege Refsnes</p>\n  <p>Contact information: <a href=\"mailto:someone@example.com\">\n  someone@example.com</a>.</p>\n</footer>\n```\n\n###\\<figure>\n這也是一個常被誤用的標籤，頻率大概僅次於section。先看看它的定義：\n> The figure element represents a unit of content, optionally with a caption, that is self-contained, that is typically referenced as a single unit from the main flow of the document, and that can be moved away from the main flow of the document without affecting the document’s meaning.\n\n簡單來說，figure是一個有完整內容的區塊，他是主要內容的一部分，而且可以任意移動位置而不影響整體內容的表達。常見的問題是把每個img都包上figure，這完全沒有意義。簡單的判斷方式是想想看＂我把這個figure拿掉會不會影響到上下文的閱讀？＂，如果會的話，他就絕對不該是一個figure。\nfigure絕對不是只拿來包圖片的，他可以包含影音檔、圖表（可能是canvas或是svg）或是一段code。他跟aside的差別在於：\n\n* aside和主內容有關，但不是主內容的一部分\n* figure是主內容的一部分，但是他可以任意移動或刪除而不影響主內容的表達。\n\n通常figure會搭配\\<figcaption>服用，他放在第一個或最後一個子元素，像這樣：\n```html\n<figure>\n  <img src=\"/macaque.jpg\" alt=\"Macaque in the trees\">\n  <figcaption>A cheeky macaque, Lower Kintaganban River, Borneo. Original by <a href=\"http://www.flickr.com/photos/rclark/\">Richard Clark</a></figcaption>\n</figure>\n```\n範例可以參考[HTML5 Doctor](http://html5doctor.com/the-figure-figcaption-elements/)\n\n##其他\n---\n* IE8以下不支援HTML5，可以用[HTML5shiv](https://code.google.com/p/html5shiv/)來補足。\n* 如果沒有十足的把握，可以先用一般的寫法完成頁面，然後再去做語意化的動作。不當的語意化對SEO來說是個悲劇。\n* XDite大大在[如何設計出正確語意的 HTML5](http://wp.xdite.net/?p=3071)有提到＂不要對任何語意TAG下style，否則當需要調整語意結構時，會天下大亂＂，可能是我太菜，不知道為什麼會這樣說，也找不到相關的文章。如果每個semantic tag外面都包個div，這樣的code會比較好嗎？\n\n##參考\n---\n[MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element)\n[W3School](http://www.w3schools.com/html/html5_semantic_elements.asp)\n[HTML5Doctor](http://html5doctor.com/)\n[Blog.XDite.net:如何設計出正確語意的 HTML5](http://wp.xdite.net/?p=3071)\n[避免常見的六種 HTML5 錯誤用法](http://waterlily-lsl.com/modules/article/view.article.php/c1/258)\n[HTML5 中 div section article 的区别](http://www.qianduan.net/html5-differences-in-the-div-section-article.html)","slug":"2014-02-04-note-of-semantic-html","published":1,"updated":"2015-04-20T12:54:38.751Z","photos":[],"link":"","_id":"ciai95ro7001il0pguzhfnupt"},{"layout":"post","title":"WebClient端的關注點分離","date":"2014-02-03T02:55:00.000Z","comments":1,"_content":"內容出自[Javascript:patterns](http://shop.oreilly.com/product/9780596806767.do)第八章\n\nweb的client端可以分成三個主要的關注點，分別是：\n* Content(內容，HTML文件)\n* Presentation(表現，CSS樣式)\n* Behavior(行為，包含使用者互動及對文件的動態改變，通常使用Javascript)\n\n在做client端的規畫時，應該盡可能地保持關注點分離，有助於提升程式的品質及可維護性。 **關注點分離** 同樣可以和 **漸進式增強** 的觀念相輔相成：使用者從最基礎的內容（HTML）開始，隨著支援功能的增強而獲得更好的體驗（CSS, Javascript）。在實際應用中如下：\n* 將CSS關閉，確認網頁內容是否可以使用﹑內文是否可以閱讀\n* 將Javascript關閉，確保網頁主要功能還是可以正常運作，所有的連結都可以使用（所以不要用`href=\"#\"`），所有的表單都可以正常的提交。\n* 不要使用內嵌的事件處理器（例如`onclick`），或是內嵌的style屬性，因為這些東西不屬於內容層\n* 撰寫語意化的HTML\n\nJavascript的風格應為 **unobtrusive** ，意思是不應該擋到使用者的路，如果遇到不支援的瀏覽器也不應該讓頁面無法使用。另外，在處理瀏覽器差異時，應該用功能檢測取代瀏覽器偵測。\n\n##一點小感想\n---\n會寫這篇文章，是因為對書中有些地方有些不同的想法。我同意漸進式增強的觀念，同時也贊同關注點分離帶來的程式品質與可維護性，但是在有些狀況下，完美的關注點分離可能會降低使用者的最高體驗。例如SPA Web，在大量使用ajax的狀況下很難達到＂移除javascript仍然保持網站正常運作＂的條件，但是有必要為了這些極少數不支援javascript的使用者（無障礙網頁另當別論），去放棄大部分使用者的體驗嗎？記得之前看過某篇文章（原諒我找不到他），作者的觀點是＂ **給那些使用者一些提示，並引導他們前進** ＂，我想這個做法不論是對於使用者或是生產者而言都是好的。\n> 雖然[IE6,7使用者比例終於下跌了](http://arstechnica.com/information-technology/2013/10/internet-explorer-6-usage-drops-below-5-percent-in-september/)，但是廣大中國網民的IE6比率依舊讓人絕望阿...","source":"_posts/2014-02-03-note-webclient-side-separation-of-concerns.md","raw":"---\nlayout: post\ntitle: 'WebClient端的關注點分離'\ndate: 2014-02-03 10:55\ncomments: true\ntags: [javascript, HTML5, CSS]\n---\n內容出自[Javascript:patterns](http://shop.oreilly.com/product/9780596806767.do)第八章\n\nweb的client端可以分成三個主要的關注點，分別是：\n* Content(內容，HTML文件)\n* Presentation(表現，CSS樣式)\n* Behavior(行為，包含使用者互動及對文件的動態改變，通常使用Javascript)\n\n在做client端的規畫時，應該盡可能地保持關注點分離，有助於提升程式的品質及可維護性。 **關注點分離** 同樣可以和 **漸進式增強** 的觀念相輔相成：使用者從最基礎的內容（HTML）開始，隨著支援功能的增強而獲得更好的體驗（CSS, Javascript）。在實際應用中如下：\n* 將CSS關閉，確認網頁內容是否可以使用﹑內文是否可以閱讀\n* 將Javascript關閉，確保網頁主要功能還是可以正常運作，所有的連結都可以使用（所以不要用`href=\"#\"`），所有的表單都可以正常的提交。\n* 不要使用內嵌的事件處理器（例如`onclick`），或是內嵌的style屬性，因為這些東西不屬於內容層\n* 撰寫語意化的HTML\n\nJavascript的風格應為 **unobtrusive** ，意思是不應該擋到使用者的路，如果遇到不支援的瀏覽器也不應該讓頁面無法使用。另外，在處理瀏覽器差異時，應該用功能檢測取代瀏覽器偵測。\n\n##一點小感想\n---\n會寫這篇文章，是因為對書中有些地方有些不同的想法。我同意漸進式增強的觀念，同時也贊同關注點分離帶來的程式品質與可維護性，但是在有些狀況下，完美的關注點分離可能會降低使用者的最高體驗。例如SPA Web，在大量使用ajax的狀況下很難達到＂移除javascript仍然保持網站正常運作＂的條件，但是有必要為了這些極少數不支援javascript的使用者（無障礙網頁另當別論），去放棄大部分使用者的體驗嗎？記得之前看過某篇文章（原諒我找不到他），作者的觀點是＂ **給那些使用者一些提示，並引導他們前進** ＂，我想這個做法不論是對於使用者或是生產者而言都是好的。\n> 雖然[IE6,7使用者比例終於下跌了](http://arstechnica.com/information-technology/2013/10/internet-explorer-6-usage-drops-below-5-percent-in-september/)，但是廣大中國網民的IE6比率依舊讓人絕望阿...","slug":"2014-02-03-note-webclient-side-separation-of-concerns","published":1,"updated":"2015-04-20T12:54:38.717Z","photos":[],"link":"","_id":"ciai95roa001ll0pgfms0ezlx"},{"layout":"post","title":"Javascript Image Beacon","date":"2014-02-03T02:22:00.000Z","comments":1,"_content":"在javascript中，要對Server發出GET請求，除了慣用的ajax之外還有另外一個方法，叫做Image Beacon。方法如下：\n```javascript\nvar beacon = new Image(),\n    url = '/record.asp?',\n    params = [\n    \t'name=John', 'age=18'\n    ];\nbeacon.scr = url + params.join('&');\n```\n利用`Image`物件的`src`屬性來對伺服器發出GET請求，上面的範例對`/record.asp`發出了一個GET請求，並帶入參數`name`跟`age`。這個Image物件並不需要被Render到頁面中。\n\nImage Beacon跟ajax的差別在於：\n* 可跨域\n* 效能比XHR來的好\n* 只能使用GET，所以有長度限制\n\n這種方法常被用於 **只需要向Server發送數據** 的場合，例如蒐集統計數據。在這種情況下，Server可以回傳一個`204 No Content`的header，代表有收到這份訊息，避免客戶端持續等待。","source":"_posts/2014-02-03-experience-image-beacon.md","raw":"---\nlayout: post\ntitle: 'Javascript Image Beacon'\ndate: 2014-02-03 10:22\ncomments: true\ntags: [javascript] \n---\n在javascript中，要對Server發出GET請求，除了慣用的ajax之外還有另外一個方法，叫做Image Beacon。方法如下：\n```javascript\nvar beacon = new Image(),\n    url = '/record.asp?',\n    params = [\n    \t'name=John', 'age=18'\n    ];\nbeacon.scr = url + params.join('&');\n```\n利用`Image`物件的`src`屬性來對伺服器發出GET請求，上面的範例對`/record.asp`發出了一個GET請求，並帶入參數`name`跟`age`。這個Image物件並不需要被Render到頁面中。\n\nImage Beacon跟ajax的差別在於：\n* 可跨域\n* 效能比XHR來的好\n* 只能使用GET，所以有長度限制\n\n這種方法常被用於 **只需要向Server發送數據** 的場合，例如蒐集統計數據。在這種情況下，Server可以回傳一個`204 No Content`的header，代表有收到這份訊息，避免客戶端持續等待。","slug":"2014-02-03-experience-image-beacon","published":1,"updated":"2015-04-20T12:54:38.747Z","photos":[],"link":"","_id":"ciai95roe001pl0pgh12c0t25"},{"layout":"post","title":"CSS Media Query","date":"2014-01-22T21:29:00.000Z","comments":1,"_content":"最近在做RWD的練習，赫然發現自己的CSS有點弱阿...長久以來都習慣把一些東西交給javascript處理，是時候該打好CSS的根底了。（以上題外話）下面大概筆記一下關於Media Query的部分。\n\n##使用方式\n---\n有三種使用方式，第一種是在`<link>`Tag中將條件加入：\n```html\n<link rel=\"stylesheet\" media=\"screen and (min-width: 450px) and (max-width: 950px)\" href=\"style1.css\" />\n<link rel=\"stylesheet\" media=\"screen and (min-width: 950px)\" href=\"style2.css\" />\n<!-- 當螢幕寬度大於450小於950的時候引入style1，大於950的時候引入style2 -->\n```\n> `<link>`標籤中的`media`屬性是從html4就有的，只不過那時指定的只有media type，並不支援media query，同樣的，media type在css2中也可以使用。\n\n第二種是在CSS中的`@import`中加入條件：\n```css\n@import url(color.css) screen and (color);\n// 在彩色顯示下引入color.css\n```\n> 雖然我把他列出來，但請不要使用css的`@import`，他並不是標準的一部分，而且會拖慢網頁的效能。這點在[High Performance Web Sites](http://www.amazon.com/dp/0596529309?tag=stevsoud-20&camp=14573&creative=327641&linkCode=as1&creativeASIN=0596529309&adid=1S1KP4EV129EN37422C0&)中有提到，可以參考[這篇文章](http://www.stevesouders.com/blog/2009/04/09/dont-use-import/)。\n\n第三種是在css selector中加入條件：\n```css\n@media all and (min-width:500px) { … }\n@media (min-width:500px) { … }\n// 這兩者是一樣的\n```\n\n<!--more-->\n\n##運算子\n---\n###and\n...就是and，既不偉大也不卑微的and\n```css\n@media tv and (min-width: 700px) and (orientation: landscape) { ... }\n```\n\n###逗號\n作用等同於`or`，符合其中一個條件的都會套上style\n```css\n@media (min-width: 700px), handheld and (orientation: landscape) { ... }\n```\n\n###not\n下面三者的意義是一樣的\n```css\n@media not all and (monochrome) { ... }\n@media not (all and (monochrome)) { ... }\n@media (not all) and (monochrome) { ... }\n```\n`not`並不會影響到逗號之外的判斷式\n```css\n@media not screen and (color), print and (color)\n@media (not (screen and (color))), print and (color)\n// 上面兩個是一樣的\n```\n\n###only\n`only`會對於不支援media query的browser隱藏這份style，支援的劉覽器則會忽略這個字\n```html\n<link rel=\"stylesheet\" media=\"only screen and (color)\" href=\"example.css\" />\n```\n> 應該說，不支援Media Querie但正確讀取media type的瀏覽器，會因為media type不是\"only\"（可能是screen之類的），所以忽略這份樣式。如果browser不支援media type，不管怎樣都會忽略這份style。（如果我沒搞錯的話，連media type都不支援的應該是IE5之前的東西，大概是要用13張3.5吋磁片灌大富翁四的年代...）\n\n##features \n---\n請參閱[MDN](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries)。\n\n","source":"_posts/2014-01-23-note-css-media-query.md","raw":"---\nlayout: post\ntitle: 'CSS Media Query'\ndate: 2014-01-23 05:29\ncomments: true\ntag: [CSS]\n---\n最近在做RWD的練習，赫然發現自己的CSS有點弱阿...長久以來都習慣把一些東西交給javascript處理，是時候該打好CSS的根底了。（以上題外話）下面大概筆記一下關於Media Query的部分。\n\n##使用方式\n---\n有三種使用方式，第一種是在`<link>`Tag中將條件加入：\n```html\n<link rel=\"stylesheet\" media=\"screen and (min-width: 450px) and (max-width: 950px)\" href=\"style1.css\" />\n<link rel=\"stylesheet\" media=\"screen and (min-width: 950px)\" href=\"style2.css\" />\n<!-- 當螢幕寬度大於450小於950的時候引入style1，大於950的時候引入style2 -->\n```\n> `<link>`標籤中的`media`屬性是從html4就有的，只不過那時指定的只有media type，並不支援media query，同樣的，media type在css2中也可以使用。\n\n第二種是在CSS中的`@import`中加入條件：\n```css\n@import url(color.css) screen and (color);\n// 在彩色顯示下引入color.css\n```\n> 雖然我把他列出來，但請不要使用css的`@import`，他並不是標準的一部分，而且會拖慢網頁的效能。這點在[High Performance Web Sites](http://www.amazon.com/dp/0596529309?tag=stevsoud-20&camp=14573&creative=327641&linkCode=as1&creativeASIN=0596529309&adid=1S1KP4EV129EN37422C0&)中有提到，可以參考[這篇文章](http://www.stevesouders.com/blog/2009/04/09/dont-use-import/)。\n\n第三種是在css selector中加入條件：\n```css\n@media all and (min-width:500px) { … }\n@media (min-width:500px) { … }\n// 這兩者是一樣的\n```\n\n<!--more-->\n\n##運算子\n---\n###and\n...就是and，既不偉大也不卑微的and\n```css\n@media tv and (min-width: 700px) and (orientation: landscape) { ... }\n```\n\n###逗號\n作用等同於`or`，符合其中一個條件的都會套上style\n```css\n@media (min-width: 700px), handheld and (orientation: landscape) { ... }\n```\n\n###not\n下面三者的意義是一樣的\n```css\n@media not all and (monochrome) { ... }\n@media not (all and (monochrome)) { ... }\n@media (not all) and (monochrome) { ... }\n```\n`not`並不會影響到逗號之外的判斷式\n```css\n@media not screen and (color), print and (color)\n@media (not (screen and (color))), print and (color)\n// 上面兩個是一樣的\n```\n\n###only\n`only`會對於不支援media query的browser隱藏這份style，支援的劉覽器則會忽略這個字\n```html\n<link rel=\"stylesheet\" media=\"only screen and (color)\" href=\"example.css\" />\n```\n> 應該說，不支援Media Querie但正確讀取media type的瀏覽器，會因為media type不是\"only\"（可能是screen之類的），所以忽略這份樣式。如果browser不支援media type，不管怎樣都會忽略這份style。（如果我沒搞錯的話，連media type都不支援的應該是IE5之前的東西，大概是要用13張3.5吋磁片灌大富翁四的年代...）\n\n##features \n---\n請參閱[MDN](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries)。\n\n","slug":"2014-01-23-note-css-media-query","published":1,"updated":"2015-04-20T12:54:38.725Z","photos":[],"link":"","_id":"ciai95rog001rl0pgu2niu33g"},{"layout":"post","title":"Media query with LESS","date":"2014-01-22T23:08:00.000Z","comments":1,"_content":"在LESS中，對於Media Query有些更方便的寫法，下面舉一些例子：\n\n##嵌套\n---\n可以直接把`@media`當成selector寫，例如：\n```css\n.one {\n    @media (width: 400px) {\n        font-size: 1.2em;\n        @media print and color {\n            color: blue;\n        }\n    }\n}\n```\n會被編譯成\n```css\n@media (width: 400px) {\n  .one {\n    font-size: 1.2em;\n  }\n}\n@media (width: 400px) and print and color {\n  .one {\n    color: blue;\n  }\n}\n```\n\n<!--more-->\n\n\n##變數化\n---\n在1.4.0之後的版本，開啟嚴格模式的情況下，可以在Media Query中插入變數：\n```css\n@media screen, (max-width: @width) { ... }\n```\n你也可以把media query變數化，例如：\n```css\n@singleQuery: ~\"(max-width: 500px)\";\n@media screen, @singleQuery {\n    set {\n        padding: 3 3 3 3;\n    }\n}\n```\n會被編譯成\n```css\n@media screen, (max-width: 500px) {\n    set {\n        padding: 3 3 3 3;\n    }\n}\n```\n> 變數必須是一段完整的media query，像這樣會出錯：`@media screen and @partial { ... }`\n\n變數化的Media Query中也可以插進變數：\n```css\n@phoneValueMax: ( 599 / @bfs ) + 0em;\n@phone: ~\"screen and (max-width: @{phoneValueMax} )\";\n```\n##Mixin\n---\n也可以把它編成Mixin：\n```css\n@highdensity: ~\"only screen and (-webkit-min-device-pixel-ratio: 1.5)\",\n              ~\"only screen and (min--moz-device-pixel-ratio: 1.5)\",\n              ~\"only screen and (-o-min-device-pixel-ratio: 3/2)\",\n              ~\"only screen and (min-device-pixel-ratio: 1.5)\";\n```\n##參考\n---\n[LESS](http://www.lesscss.org/)\n[Variable media queries in Less CSS](http://blog.scur.pl/2012/06/variable-media-queries-less-css/)\n\n","source":"_posts/2014-01-23-experience-media-query-with-less.md","raw":"---\nlayout: post\ntitle: 'Media query with LESS'\ndate: 2014-01-23 07:08\ncomments: true\ntags: [CSS, LESS] \n---\n在LESS中，對於Media Query有些更方便的寫法，下面舉一些例子：\n\n##嵌套\n---\n可以直接把`@media`當成selector寫，例如：\n```css\n.one {\n    @media (width: 400px) {\n        font-size: 1.2em;\n        @media print and color {\n            color: blue;\n        }\n    }\n}\n```\n會被編譯成\n```css\n@media (width: 400px) {\n  .one {\n    font-size: 1.2em;\n  }\n}\n@media (width: 400px) and print and color {\n  .one {\n    color: blue;\n  }\n}\n```\n\n<!--more-->\n\n\n##變數化\n---\n在1.4.0之後的版本，開啟嚴格模式的情況下，可以在Media Query中插入變數：\n```css\n@media screen, (max-width: @width) { ... }\n```\n你也可以把media query變數化，例如：\n```css\n@singleQuery: ~\"(max-width: 500px)\";\n@media screen, @singleQuery {\n    set {\n        padding: 3 3 3 3;\n    }\n}\n```\n會被編譯成\n```css\n@media screen, (max-width: 500px) {\n    set {\n        padding: 3 3 3 3;\n    }\n}\n```\n> 變數必須是一段完整的media query，像這樣會出錯：`@media screen and @partial { ... }`\n\n變數化的Media Query中也可以插進變數：\n```css\n@phoneValueMax: ( 599 / @bfs ) + 0em;\n@phone: ~\"screen and (max-width: @{phoneValueMax} )\";\n```\n##Mixin\n---\n也可以把它編成Mixin：\n```css\n@highdensity: ~\"only screen and (-webkit-min-device-pixel-ratio: 1.5)\",\n              ~\"only screen and (min--moz-device-pixel-ratio: 1.5)\",\n              ~\"only screen and (-o-min-device-pixel-ratio: 3/2)\",\n              ~\"only screen and (min-device-pixel-ratio: 1.5)\";\n```\n##參考\n---\n[LESS](http://www.lesscss.org/)\n[Variable media queries in Less CSS](http://blog.scur.pl/2012/06/variable-media-queries-less-css/)\n\n","slug":"2014-01-23-experience-media-query-with-less","published":1,"updated":"2015-04-20T12:54:38.760Z","photos":[],"link":"","_id":"ciai95roi001tl0pgxfsm9luc"},{"layout":"post","title":"關於載入Script","date":"2014-01-17T01:02:00.000Z","comments":1,"_content":"最近在看[Javascript Patterns](http://www.tenlong.com.tw/items/9862764198?item_id=427729)這本書，剛好這陣子有碰到比較大的js data，就把書中一些關於Script讀取策略的部分整理一下。\n\n##Script Tag的屬性\n---\n`language`\n這個屬性有各種不同大小寫的格式，像是：`JavaScript`, `javascript`, `Javascript`，有時候還附帶版本號。但其實根本就不應該用這個屬性，因為預設語言就是JavaScript，版本號也運作得不好。\n> 註：W3C已經不推薦使用這個屬性\n\n`type`\nHTML4跟XHAML1標準會驗證這個屬性為必要，但其實不應該如此，因為預設就是JavaScript。HTML5已經將這個屬性改成非必要。\n\n`defer`\n這段指定的Script會在頁面Render結束之後才運作，HTML5有更方便的`async`屬性。\n> async跟defer的區別在於前者是在ParseDOM時載入Script並在載入完成後執行，後者則是在頁面載入結束後載入Script，並在載入完成後執行。一個小技巧是同時放上`async`跟`defer`，支援async的瀏覽器會忽略defer，不支援的則會使用defer。\n> 關於`defer`這個屬性，其實各瀏覽器實作的方式不一樣，許多現代瀏覽器，例如Chrome，預設就是在頁面Render結束後才載入`<head>`中有`src`的`<scripe>`。[這篇文章](http://mao.li/javascript/javascript-defer/)有作一些測試。\n\n##放置Script Tag的位置\n---\n`<script>`標籤會阻擋在他之後的事件，包括頁面render或下載，所以放置`<Script>`最好的位置是在`</body>`之前，這樣可以防止頁面載入被Scrtpt標籤阻擋而拖延。最差的方式則是在`<head>`中引入多個獨立的檔案，會佔去server許多不必要的連線數。\n> 個人經驗，有沒有pack成單一檔案對伺服器負載能力真的差蠻多的\n\n<!--more-->\n\n\n##HTTP分塊\n---\nHTTP協定支援分塊編碼，意思是你可以分批傳送頁面的片段。如果有一個非常複查的頁面，可以用像下面這種方法來分批傳送：\n```HTML\n<!doctype html>\n<html>\n<head>\n\t<title>My App</title>\n</head>\n<body>\n\t<div id=\"header\">\n  \t<!-- content1, like logo -->\n  </div>\n  // block1 end\n  <!-- content2, main content -->\n  // block2 end\n  <script src=\"main.js\"></script>\n</body>\n</html>\n// block3 end\n```\n先在第一區塊傳入部分標頭和主體，第二區塊傳入主要內容，第三區塊再傳入js檔為頁面添加特色和互動。這種作法十分符合漸進式增強和unobtrusive javascript的精神。\n\n##動態載入\n---\n要避免頁面render被script tag拖慢的問題，有下面幾種方法：\n* 用XHR請求來下載script，並用`eval()`來執行。不要這樣做。\n* 用`defer`和`async`屬性，但是有跨瀏覽器的問題。\n* 動態載入`<script>`元素   \n\n最後一種模式是個不錯的方法，像下面這樣：\n```js\nvar script = document.creatElement('script');\nscript.src = 'Main.js';\ndocument.documentElement.firstChild.appendChild(script);\n```\n上面簡單的產生了一個script元素，並把他append到`<head>`內。這種方法要注意順序的問題，可以用一個initScriptsArray來解決他：\n```js\nvar initScripts = [],\n\t\tinit = function(){\n    \t// for loop initScripts\n    };\ninitScripts.push(function(){\n\t// some script\n});\n```\n動態載入有很多應用方法，例如把它放到`</body>`前，確保使用者能先確認頁面的靜態內容，並趁這個時候載入互動相關的script，這種方法稱為lazy load（延遲載入）。或是依每個頁面行為或裝置的不同來分塊載入script，例如在mobile上部分較耗資源的效果可能會被停用，這時就可以不必載入那段script，這種方法稱為require load（隨選載入）。也可以在這一頁就預先載入下一頁需要的script，稱為preload（預先載入），不過使用這種方法必須注意，要讓預載的檔案只載入但不分析執行，因為不存在的DOM（下一頁的DOM）可能會造成錯誤。\n\n要下載一段script但不進行分析，可以用`<object>`元素來代替`<script>`：\n```js\nvar obj = document.creatElement('object');\nobj.data = 'preload.js';\n// 用data屬性代替src\ndocument.body.appendChild('obj');\n```\n> 書上有提到用image beacon的方式來處理IE，不過我找不到IE跟`<object>`之間發生了什麼事，為什麼要用Image beacon來處理這件事...\n\n預先載入模式可以套用各種類型的元件，例如圖片或影音檔案，主要用在可以預期使用者下一個行為的時候。例如在輸入帳號密碼時，就可以對登入後的頁面進行部分預載。\n\n","source":"_posts/2014-01-17-notes-on-loading-script.md","raw":"---\nlayout: post\ntitle: '關於載入Script'\ndate: 2014-01-17 09:02\ncomments: true\ntags: [javascript]\n---\n最近在看[Javascript Patterns](http://www.tenlong.com.tw/items/9862764198?item_id=427729)這本書，剛好這陣子有碰到比較大的js data，就把書中一些關於Script讀取策略的部分整理一下。\n\n##Script Tag的屬性\n---\n`language`\n這個屬性有各種不同大小寫的格式，像是：`JavaScript`, `javascript`, `Javascript`，有時候還附帶版本號。但其實根本就不應該用這個屬性，因為預設語言就是JavaScript，版本號也運作得不好。\n> 註：W3C已經不推薦使用這個屬性\n\n`type`\nHTML4跟XHAML1標準會驗證這個屬性為必要，但其實不應該如此，因為預設就是JavaScript。HTML5已經將這個屬性改成非必要。\n\n`defer`\n這段指定的Script會在頁面Render結束之後才運作，HTML5有更方便的`async`屬性。\n> async跟defer的區別在於前者是在ParseDOM時載入Script並在載入完成後執行，後者則是在頁面載入結束後載入Script，並在載入完成後執行。一個小技巧是同時放上`async`跟`defer`，支援async的瀏覽器會忽略defer，不支援的則會使用defer。\n> 關於`defer`這個屬性，其實各瀏覽器實作的方式不一樣，許多現代瀏覽器，例如Chrome，預設就是在頁面Render結束後才載入`<head>`中有`src`的`<scripe>`。[這篇文章](http://mao.li/javascript/javascript-defer/)有作一些測試。\n\n##放置Script Tag的位置\n---\n`<script>`標籤會阻擋在他之後的事件，包括頁面render或下載，所以放置`<Script>`最好的位置是在`</body>`之前，這樣可以防止頁面載入被Scrtpt標籤阻擋而拖延。最差的方式則是在`<head>`中引入多個獨立的檔案，會佔去server許多不必要的連線數。\n> 個人經驗，有沒有pack成單一檔案對伺服器負載能力真的差蠻多的\n\n<!--more-->\n\n\n##HTTP分塊\n---\nHTTP協定支援分塊編碼，意思是你可以分批傳送頁面的片段。如果有一個非常複查的頁面，可以用像下面這種方法來分批傳送：\n```HTML\n<!doctype html>\n<html>\n<head>\n\t<title>My App</title>\n</head>\n<body>\n\t<div id=\"header\">\n  \t<!-- content1, like logo -->\n  </div>\n  // block1 end\n  <!-- content2, main content -->\n  // block2 end\n  <script src=\"main.js\"></script>\n</body>\n</html>\n// block3 end\n```\n先在第一區塊傳入部分標頭和主體，第二區塊傳入主要內容，第三區塊再傳入js檔為頁面添加特色和互動。這種作法十分符合漸進式增強和unobtrusive javascript的精神。\n\n##動態載入\n---\n要避免頁面render被script tag拖慢的問題，有下面幾種方法：\n* 用XHR請求來下載script，並用`eval()`來執行。不要這樣做。\n* 用`defer`和`async`屬性，但是有跨瀏覽器的問題。\n* 動態載入`<script>`元素   \n\n最後一種模式是個不錯的方法，像下面這樣：\n```js\nvar script = document.creatElement('script');\nscript.src = 'Main.js';\ndocument.documentElement.firstChild.appendChild(script);\n```\n上面簡單的產生了一個script元素，並把他append到`<head>`內。這種方法要注意順序的問題，可以用一個initScriptsArray來解決他：\n```js\nvar initScripts = [],\n\t\tinit = function(){\n    \t// for loop initScripts\n    };\ninitScripts.push(function(){\n\t// some script\n});\n```\n動態載入有很多應用方法，例如把它放到`</body>`前，確保使用者能先確認頁面的靜態內容，並趁這個時候載入互動相關的script，這種方法稱為lazy load（延遲載入）。或是依每個頁面行為或裝置的不同來分塊載入script，例如在mobile上部分較耗資源的效果可能會被停用，這時就可以不必載入那段script，這種方法稱為require load（隨選載入）。也可以在這一頁就預先載入下一頁需要的script，稱為preload（預先載入），不過使用這種方法必須注意，要讓預載的檔案只載入但不分析執行，因為不存在的DOM（下一頁的DOM）可能會造成錯誤。\n\n要下載一段script但不進行分析，可以用`<object>`元素來代替`<script>`：\n```js\nvar obj = document.creatElement('object');\nobj.data = 'preload.js';\n// 用data屬性代替src\ndocument.body.appendChild('obj');\n```\n> 書上有提到用image beacon的方式來處理IE，不過我找不到IE跟`<object>`之間發生了什麼事，為什麼要用Image beacon來處理這件事...\n\n預先載入模式可以套用各種類型的元件，例如圖片或影音檔案，主要用在可以預期使用者下一個行為的時候。例如在輸入帳號密碼時，就可以對登入後的頁面進行部分預載。\n\n","slug":"2014-01-17-notes-on-loading-script","published":1,"updated":"2015-04-20T12:54:38.777Z","photos":[],"link":"","_id":"ciai95rok001xl0pgeptavpao"},{"layout":"post","title":"高雄捷運進站人數變化圖","date":"2014-01-15T06:37:00.000Z","comments":1,"_content":"Demo: [http://apolkingg8.github.io/DemoPages/KRT_logMap/demo.html](http://apolkingg8.github.io/DemoPages/KRT_logMap/demo.html)\n\n前陣子之前在社團看到北捷的運量變化圖，心血來潮就想說來個高捷版，不過基於各種原因拖到現在才做好XD\n\n剛開始猶豫很久，要用SVG還是Canvas還是純CSS，最後因為相容性的關係而選擇了SVG，不過最後做跨瀏覽器測試的時候還是有點問題（Opera有時候會卡住，平平都是Blink阿）。因為跟SVG不熟，做到後來有種想打掉重做的衝動（例如包裝架構，互動方式，還有那個根本沒必要的Slider...），不過還是等有空再說吧，好多預計要看要玩的東西都還沒動呢（跪","source":"_posts/2014-01-15--number-of-kaohsiung-mrt-station.md","raw":"---\nlayout: post\ntitle: '高雄捷運進站人數變化圖'\ndate: 2014-01-15 14:37\ncomments: true\ntags: [Works] \n---\nDemo: [http://apolkingg8.github.io/DemoPages/KRT_logMap/demo.html](http://apolkingg8.github.io/DemoPages/KRT_logMap/demo.html)\n\n前陣子之前在社團看到北捷的運量變化圖，心血來潮就想說來個高捷版，不過基於各種原因拖到現在才做好XD\n\n剛開始猶豫很久，要用SVG還是Canvas還是純CSS，最後因為相容性的關係而選擇了SVG，不過最後做跨瀏覽器測試的時候還是有點問題（Opera有時候會卡住，平平都是Blink阿）。因為跟SVG不熟，做到後來有種想打掉重做的衝動（例如包裝架構，互動方式，還有那個根本沒必要的Slider...），不過還是等有空再說吧，好多預計要看要玩的東西都還沒動呢（跪","slug":"2014-01-15--number-of-kaohsiung-mrt-station","published":1,"updated":"2015-04-20T12:54:38.754Z","photos":[],"link":"","_id":"ciai95rom001zl0pgusasteqg"},{"layout":"post","title":"在圖片上留言的jQuery plugin - CommentOnPhoto","date":"2014-01-10T23:36:00.000Z","comments":1,"_content":"GitPage: [https://github.com/apolkingg8/CommentOnPhoto](https://github.com/apolkingg8/CommentOnPhoto)\nDemoPage: [http://apolkingg8.github.io/DemoPages/COP/demo.html](http://apolkingg8.github.io/DemoPages/COP/demo.html)\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/6060/blog/6071/post/175444/Tyy2HejRSuOhHPHZ3U7T_demo.png\" style=\"width:100%;height:100%;\" alt=\"demo.png\">\n\n之前在某些網站上看過這個功能，覺得還蠻好玩的，不過貌似沒有人把它元件化；剛好這幾天又不小心看到jquery widget factory這東西，於是就拿它做練習的題材了。其實把東西元件化還蠻有趣的，有助於釐清問題或需求的本質，也可以讓自己的Code更加的性感（？）。\n  \n有些東西看起來很簡單，做起來也不難，但是要包成元件就有點麻煩，要包成一個同時兼顧擴展性、相容性、可調性又易於使用的元件就...很考驗功力了XD。因為是第一次寫比較完整的jQuery Plugin，可能有很多需要改進的地方，關於使用上有任何問題或feedback都歡迎聯絡我：）。\n\n題外話，我開始佩服那些寫文件的人了，README.MD要寫得漂亮真的不簡單啊...\n\n","source":"_posts/2014-01-11-output-on-top-of-the-picture-message-jquery-plugin-commentonphoto.md","raw":"---\nlayout: post\ntitle: '在圖片上留言的jQuery plugin - CommentOnPhoto'\ndate: 2014-01-11 07:36\ncomments: true\ntags: [Works] \n---\nGitPage: [https://github.com/apolkingg8/CommentOnPhoto](https://github.com/apolkingg8/CommentOnPhoto)\nDemoPage: [http://apolkingg8.github.io/DemoPages/COP/demo.html](http://apolkingg8.github.io/DemoPages/COP/demo.html)\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/6060/blog/6071/post/175444/Tyy2HejRSuOhHPHZ3U7T_demo.png\" style=\"width:100%;height:100%;\" alt=\"demo.png\">\n\n之前在某些網站上看過這個功能，覺得還蠻好玩的，不過貌似沒有人把它元件化；剛好這幾天又不小心看到jquery widget factory這東西，於是就拿它做練習的題材了。其實把東西元件化還蠻有趣的，有助於釐清問題或需求的本質，也可以讓自己的Code更加的性感（？）。\n  \n有些東西看起來很簡單，做起來也不難，但是要包成元件就有點麻煩，要包成一個同時兼顧擴展性、相容性、可調性又易於使用的元件就...很考驗功力了XD。因為是第一次寫比較完整的jQuery Plugin，可能有很多需要改進的地方，關於使用上有任何問題或feedback都歡迎聯絡我：）。\n\n題外話，我開始佩服那些寫文件的人了，README.MD要寫得漂亮真的不簡單啊...\n\n","slug":"2014-01-11-output-on-top-of-the-picture-message-jquery-plugin-commentonphoto","published":1,"updated":"2015-04-20T12:54:38.708Z","photos":[],"link":"","_id":"ciai95ron0022l0pgvtjsx7ub"},{"layout":"post","title":"jQuery Widget Factory極簡教學","date":"2014-01-11T00:45:00.000Z","comments":1,"_content":"\n\n##簡介\njQuery Widget Factory是jQuery UI提供的一個方法，用Factory Mode來建立 **有狀態的** jQuery plugin。大多數的jQueryUI都是用這個方法產生的，例如`button`：\n```JS\n$.widget( \"ui.button\", {\n\t// ...\n  });\n```\n不過也有些是例外，像`datepicker`就不是用這個方法產生的。\n\n##如何使用\n這個方法是基於jQuery，而不是jQuery UI Core，但是他的位置是在jQueryui.js裡面，所以兩者都必須引入\n> 註：如果不需要其他jQueryUI的話，可以只載入jquery.ui.widget.js\n\n```html\n<script type=\"text/javascript\" src=\"Libs/jquery-1.9.1.js\"></script>\n<script type=\"text/javascript\" src=\"Libs/jquery-ui-1.10.3.js\"></script>\n```\n方法的格式如下：\n```js\n$.widget('namespace.uiName', [base], prototype)\n```\n`namespace`只能有一層，像jQueryUI就是用`ui.button`\n`[base]`可選，用來指定已存在的物件當作基底，預設值是`$.widget`。例如你想要以jqueryUI的`dialog`為基底產生一個新的plugin，就可以像這樣：\n```js\n$.widget( \"custom.superDialog\", $.ui.dialog, {\n    red: function() {\n        this.element.css( \"color\", \"red\" );\n    }\n});\n```\n`prototype`這個widget的prototype object，套件的方法及設定都在這裡實作。\n\n<!--more-->\n\n##簡單的範例\n下面是一個來自官網的簡單的範例，可以在jsBin玩玩看。\n\n首先，建立一個progressbar，然後設定他的初始化方法`_creat()`\n```js\n$.widget( \"custom.progressbar\", {\n    _create: function() {\n        var progress = \"%\";\n        this.element\n            .addClass( \"progressbar\" )\n            .text( progress );\n    }\n});\n```\n> 還有另一個方法`_init`，兩者間的差異請參考官方文件\n> 這裡有另一個重點是`this.element`。如果用一般方法作jquery plugin的話，取得的this是selector後的jquery物件群組，但是widget中的 **this.element永遠只有一個** ，如果你selector後的jquery物件群組有多個物件，他會 **對每個對象各執行一次** 。\n\n為這個pregressbar增加option，設定初始化的值。\n```js\n$.widget( \"custom.progressbar\", {\n\t\toptions: {\n    \tvalue: 20%\n    },\n    _create: function() {\n        var progress = this.options.value + \"%\";\n        this.element\n            .addClass( \"progressbar\" )\n            .text( progress );\n    }\n});\n```\n> `options`是內建屬性，套件的參數會以key-value pair的形式傳到這個物件裡面，在這裡我們給予參數`value`預設值`'20%'`。  \n\n為套件增加public method`getValue`\n```js\n$.widget( \"custom.myprogressbar\", {\n\toptions: {\n\t\tvalue: '20'\n\t},\n\tgetValue: function(){\n\t\treturn this.options.value;\n\t},\n\t_create: function() {\n\t\tvar progress = this.options.value + \"%\";\n\t\tthis.element.text( progress );\n\t}\n});\n```\n> widget factory提供了很簡單的作法去區分private與public：前面有加`_`的會實作為private，其餘則是public，很方便吧？\n\n接下來，初始化套件並傳遞參數\n```html\n<div class='progressDiv'></div>\n<div class='progressDiv'></div>\n```\n```js\n$('.progressDiv').myprogressbar({ \n\tvalue: 70\n});\n```\n試看看剛剛寫的方法\n```js\nconsole.log($('.progressDiv').myprogressbar('getValue')); // 70 * 2\n```\n完成了！恭喜你，你會製作（簡單的）jQuery plugin了XD\n[jsBin Demo](http://jsbin.com/oRIjaVa/1/edit?html,console,output)\n\n##參考文件\n[jQuery官網教程](http://learn.jquery.com/jquery-ui/widget-factory/)\n[Widget Factory API Document](http://api.jqueryui.com/jQuery.widget/#jQuery-widget1)\n\n##後記\n真的有點簡略阿（汗），其實製作過程中還有不少眉眉角角，不過一時之間不好整理出來，有機會再作補充。\n","source":"_posts/2014-01-11-experiencejquery-widget-factory.md","raw":"---\nlayout: post\ntitle: 'jQuery Widget Factory極簡教學'\ndate: 2014-01-11 08:45\ncomments: true\ntags: [jQuery]\n---\n\n\n##簡介\njQuery Widget Factory是jQuery UI提供的一個方法，用Factory Mode來建立 **有狀態的** jQuery plugin。大多數的jQueryUI都是用這個方法產生的，例如`button`：\n```JS\n$.widget( \"ui.button\", {\n\t// ...\n  });\n```\n不過也有些是例外，像`datepicker`就不是用這個方法產生的。\n\n##如何使用\n這個方法是基於jQuery，而不是jQuery UI Core，但是他的位置是在jQueryui.js裡面，所以兩者都必須引入\n> 註：如果不需要其他jQueryUI的話，可以只載入jquery.ui.widget.js\n\n```html\n<script type=\"text/javascript\" src=\"Libs/jquery-1.9.1.js\"></script>\n<script type=\"text/javascript\" src=\"Libs/jquery-ui-1.10.3.js\"></script>\n```\n方法的格式如下：\n```js\n$.widget('namespace.uiName', [base], prototype)\n```\n`namespace`只能有一層，像jQueryUI就是用`ui.button`\n`[base]`可選，用來指定已存在的物件當作基底，預設值是`$.widget`。例如你想要以jqueryUI的`dialog`為基底產生一個新的plugin，就可以像這樣：\n```js\n$.widget( \"custom.superDialog\", $.ui.dialog, {\n    red: function() {\n        this.element.css( \"color\", \"red\" );\n    }\n});\n```\n`prototype`這個widget的prototype object，套件的方法及設定都在這裡實作。\n\n<!--more-->\n\n##簡單的範例\n下面是一個來自官網的簡單的範例，可以在jsBin玩玩看。\n\n首先，建立一個progressbar，然後設定他的初始化方法`_creat()`\n```js\n$.widget( \"custom.progressbar\", {\n    _create: function() {\n        var progress = \"%\";\n        this.element\n            .addClass( \"progressbar\" )\n            .text( progress );\n    }\n});\n```\n> 還有另一個方法`_init`，兩者間的差異請參考官方文件\n> 這裡有另一個重點是`this.element`。如果用一般方法作jquery plugin的話，取得的this是selector後的jquery物件群組，但是widget中的 **this.element永遠只有一個** ，如果你selector後的jquery物件群組有多個物件，他會 **對每個對象各執行一次** 。\n\n為這個pregressbar增加option，設定初始化的值。\n```js\n$.widget( \"custom.progressbar\", {\n\t\toptions: {\n    \tvalue: 20%\n    },\n    _create: function() {\n        var progress = this.options.value + \"%\";\n        this.element\n            .addClass( \"progressbar\" )\n            .text( progress );\n    }\n});\n```\n> `options`是內建屬性，套件的參數會以key-value pair的形式傳到這個物件裡面，在這裡我們給予參數`value`預設值`'20%'`。  \n\n為套件增加public method`getValue`\n```js\n$.widget( \"custom.myprogressbar\", {\n\toptions: {\n\t\tvalue: '20'\n\t},\n\tgetValue: function(){\n\t\treturn this.options.value;\n\t},\n\t_create: function() {\n\t\tvar progress = this.options.value + \"%\";\n\t\tthis.element.text( progress );\n\t}\n});\n```\n> widget factory提供了很簡單的作法去區分private與public：前面有加`_`的會實作為private，其餘則是public，很方便吧？\n\n接下來，初始化套件並傳遞參數\n```html\n<div class='progressDiv'></div>\n<div class='progressDiv'></div>\n```\n```js\n$('.progressDiv').myprogressbar({ \n\tvalue: 70\n});\n```\n試看看剛剛寫的方法\n```js\nconsole.log($('.progressDiv').myprogressbar('getValue')); // 70 * 2\n```\n完成了！恭喜你，你會製作（簡單的）jQuery plugin了XD\n[jsBin Demo](http://jsbin.com/oRIjaVa/1/edit?html,console,output)\n\n##參考文件\n[jQuery官網教程](http://learn.jquery.com/jquery-ui/widget-factory/)\n[Widget Factory API Document](http://api.jqueryui.com/jQuery.widget/#jQuery-widget1)\n\n##後記\n真的有點簡略阿（汗），其實製作過程中還有不少眉眉角角，不過一時之間不好整理出來，有機會再作補充。\n","slug":"2014-01-11-experiencejquery-widget-factory","published":1,"updated":"2015-04-20T12:54:38.737Z","photos":[],"link":"","_id":"ciai95rop0024l0pgxxlizvmw"},{"layout":"post","title":"jQueryDatePicker民國版","date":"2014-01-04T02:21:00.000Z","comments":1,"_content":"GitPage:[https://github.com/apolkingg8/JQueryDatePickerTW](https://github.com/apolkingg8/JQueryDatePickerTW)\n\n雖然這東西網路上好像很多，不過幾乎都是去給setting然後改input.val而已，沒有考慮到後續的問題，像是直接改val然後render出錯誤的日曆、沒辦法西元與民國日曆並存、select沒有修、even會被蓋掉等等。於是就自己寫了一個比較方便完整的版本，一方面作為練習，一方面這東西用到的機會還蠻大的XD。\n\n使用方法和原本的datepicker完全一樣，datepicker原本的api應該都可以照常使用，如果有問題的話請在Git或這裡跟我說 :P\n\n","source":"_posts/2014-01-04-jquerydatepicker-republic-of-china.md","raw":"---\nlayout: post\ntitle: 'jQueryDatePicker民國版'\ndate: 2014-01-04 10:21\ncomments: true\ntags: [Works, jQuery] \n---\nGitPage:[https://github.com/apolkingg8/JQueryDatePickerTW](https://github.com/apolkingg8/JQueryDatePickerTW)\n\n雖然這東西網路上好像很多，不過幾乎都是去給setting然後改input.val而已，沒有考慮到後續的問題，像是直接改val然後render出錯誤的日曆、沒辦法西元與民國日曆並存、select沒有修、even會被蓋掉等等。於是就自己寫了一個比較方便完整的版本，一方面作為練習，一方面這東西用到的機會還蠻大的XD。\n\n使用方法和原本的datepicker完全一樣，datepicker原本的api應該都可以照常使用，如果有問題的話請在Git或這裡跟我說 :P\n\n","slug":"2014-01-04-jquerydatepicker-republic-of-china","published":1,"updated":"2015-04-20T12:54:38.733Z","photos":[],"link":"","_id":"ciai95rou0027l0pgutg2tl7h"},{"layout":"post","title":".NET NPOI","date":"2014-01-01T07:08:00.000Z","comments":1,"_content":"每次要用都忘記用法，未老先衰阿...\n\n筆記一些重點\n\n1. usage: `NPOI`, `NPOI.HSSF.UserModel`\n2. 先取得FileStream \n```\nFileStream fs = new FileStream(url, FileMode.Open, FileAccess.Read);\n```\n3. 產生HSSFWorkBook \n```\nHSSFWorkbook workbook = new HSSFWorkbook(fs)\n```\n4. 結構：Workbook -> Sheets -> Rows -> Cell\n5. Cell不要直接`ToString()`，會拿到算式。有`NumericCellValue`之類的屬性可用\n6. NuGet拿到的是1.5版，XSSF是2.0版的東西，不過還在alpha，有很多問題。\n7. 要注意很多政府機關文件的格式會錯誤，要開啟後再另存。\n\n小抱怨一下，某些政府機關的公開資料真的天殺的難找，還要從檔名逆推出文件格式編號再去猜相對應的路經...這是在玩國家寶藏嗎？","source":"_posts/2014-01-01-notenet-npoi.md","raw":"---\nlayout: post\ntitle: '.NET NPOI'\ndate: 2014-01-01 15:08\ncomments: true\ntags: [.NET]\n---\n每次要用都忘記用法，未老先衰阿...\n\n筆記一些重點\n\n1. usage: `NPOI`, `NPOI.HSSF.UserModel`\n2. 先取得FileStream \n```\nFileStream fs = new FileStream(url, FileMode.Open, FileAccess.Read);\n```\n3. 產生HSSFWorkBook \n```\nHSSFWorkbook workbook = new HSSFWorkbook(fs)\n```\n4. 結構：Workbook -> Sheets -> Rows -> Cell\n5. Cell不要直接`ToString()`，會拿到算式。有`NumericCellValue`之類的屬性可用\n6. NuGet拿到的是1.5版，XSSF是2.0版的東西，不過還在alpha，有很多問題。\n7. 要注意很多政府機關文件的格式會錯誤，要開啟後再另存。\n\n小抱怨一下，某些政府機關的公開資料真的天殺的難找，還要從檔名逆推出文件格式編號再去猜相對應的路經...這是在玩國家寶藏嗎？","slug":"2014-01-01-notenet-npoi","published":1,"updated":"2015-04-20T12:56:23.695Z","photos":[],"link":"","_id":"ciai95row002al0pgk44sxk6f"},{"layout":"post","title":"Javascript : The Good Parts - 不良的部分","date":"2013-12-31T01:23:00.000Z","comments":1,"_content":"這章列出javascript一些可以輕鬆避用的問題功能。\n##==\n用`===`或`!==`來取代`==`或`!=`，因為後者在運算子兩邊型別不同時，會強制改變值的型別，而且規則十分複雜，下面列出一些有趣的例子：\n```js\n'' == '0' // false\n0 == '' // true\n0 == '0' // true\n\nfalse == 'false' // false\nfalse == '0' // true\n\nfalse == undefined // false\nfalse == null // false\nnull == undefined // true\n```\n詳細規則可以參考[這張](http://zero.milosz.ca)表，不過不要真的去背他阿（笑）\n##with敘述\n[with敘述](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with)提供了取用物件特性時的捷徑，但他的結果有時難以預料，因此應該避免使用他。作者認為with光是出現在語言中就已經拖慢了javascript的速度，這個語言沒有他會更好。\n##eval\n＂eval is evil＂這句耳熟能詳的話就是作者說的。他認為`eval`有以下的問題：\n\n* 難以閱讀\n* 拖慢效能\n* eval文段有太多權限，影響程式安全性\n\n基於上面這些問題，應該避免使用`eval`。`Function`建構式是`eval`的另外一種形式，同樣應該避免使用。`setTimeout`與`setInterval`函式可接受字串或函式作為引數，使用字串作為引數時，他們的行為就像`eval`，所以使用這兩個函式時應該避免以字串作為引數。\n> 關於'eval is evil'有不少的討論。部分的人認為應該在＂合理的需要＂而且＂你知道自己在幹什麼＂的情況下使用他，而不是如此斷定的禁用他。不過我還是傾向於後者，因為＂知道自己在幹什麼＂聽起來很簡單，事實上很難啊\n\n<!--more-->\n\n##continue\n`continue`會跳回迴圈的起始處。我還沒見過移除continue敘述後，沒有獲得改善的程式碼。\n> 這是作者說的，不是我說的\n\n##switch的案例掉落\n在javascript中，`switch-case`敘述在沒有break的情況下，會掉向下一個case：\n```js\nvar a = 'a';\nswitch(a){\n  case 'a':\n    document.write(' case1');\n  case 'b':\n    document.write(' case2');\n    break;\n  case 'c':\n    document.write(' case3'); \n}\n// case1 case2\n```\n這有時候會被當作一個trick，但作者認為＂程式語言裡最糟的功能，不是那些顯然危險或無用的功能，而是那些有用的、具有吸引力但又危險的功能。＂\n> 小插曲：其實作者之前也認為fall through的優點足以掩蓋缺點，直到他某天修改JSLint的Bug時膝蓋中了一箭...\n\n##無區塊的敘述\n不要為了省兩個字元捅自己或你的隊友。保持一致性有助於把事情做對。\n\n##++跟--\n在jsLint中這叫over trick。作者認為這會鼓勵一種魯莽草率的風格，大部分的buffer overrun都來自於這種風格的原始碼。\n\n##Bitwise運算子\n在JAVA中，bitwise運算子與整數一起工作，但javascript中沒有整數，只好把double轉成整數處理完後再轉回去。在多數語言中，bitwise離硬體很近而非常快速，但在javascript中卻不是這樣。\n\n##function敘述與function運算式\njavascript中同時擁有function敘述(function expression)與function運算式(function declaration)，下面兩者的意義是相等的：\n```js\nfunction foo() {}; // function declaration\nvar foo = function foo() {}; // function expression\n```\n作者認為後者的形式比較好，可以清楚的表現出＂函式也是個物件＂這個性質。此外，在if敘述中禁止使用function敘述，但多數的瀏覽器沒有理會這項規則，實作方式又各不相同，因而產生了可攜性的問題。\n\n##typed wrapper\njavascript有一組type wrapper，例如：\n```js\nvar a = new Boolean(false);\na.valueOf() // false\n```\n會產生一個有`valueOf`方法的物件，此方法回傳wrapper value。但事實上完全不需要這個功能，不要使用`new String``newNumber``new Boolean`這些方法，也避免使用`new Object`和`new Array`，改用`{}`與`[]`。\n##new\nnew運算子會建立繼承運算元的prototype成員的新物件，然後呼叫運算元，把新物件繫結至this。但是如果你忘了加new，運算元的this會指向window，這個問題無法被編譯器檢測出來，只能靠命名規則來協助。更好的方法是不用new。（這個問題在繼承模式的部分討論過，請參考[這裡](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch5.html)）\n##void\n在javascript中，void是個運算子，接受運算元並回傳undefined。這功能沒有用。\n> 學長，請容許我強調一遍，完全沒有用。","source":"_posts/2013-12-31-note-javascriptthe-good-parts-bad-part-2.md","raw":"---\nlayout: post\ntitle: 'Javascript : The Good Parts - 不良的部分'\ndate: 2013-12-31 09:23\ncomments: true\ntags: [javascript]\n---\n這章列出javascript一些可以輕鬆避用的問題功能。\n##==\n用`===`或`!==`來取代`==`或`!=`，因為後者在運算子兩邊型別不同時，會強制改變值的型別，而且規則十分複雜，下面列出一些有趣的例子：\n```js\n'' == '0' // false\n0 == '' // true\n0 == '0' // true\n\nfalse == 'false' // false\nfalse == '0' // true\n\nfalse == undefined // false\nfalse == null // false\nnull == undefined // true\n```\n詳細規則可以參考[這張](http://zero.milosz.ca)表，不過不要真的去背他阿（笑）\n##with敘述\n[with敘述](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with)提供了取用物件特性時的捷徑，但他的結果有時難以預料，因此應該避免使用他。作者認為with光是出現在語言中就已經拖慢了javascript的速度，這個語言沒有他會更好。\n##eval\n＂eval is evil＂這句耳熟能詳的話就是作者說的。他認為`eval`有以下的問題：\n\n* 難以閱讀\n* 拖慢效能\n* eval文段有太多權限，影響程式安全性\n\n基於上面這些問題，應該避免使用`eval`。`Function`建構式是`eval`的另外一種形式，同樣應該避免使用。`setTimeout`與`setInterval`函式可接受字串或函式作為引數，使用字串作為引數時，他們的行為就像`eval`，所以使用這兩個函式時應該避免以字串作為引數。\n> 關於'eval is evil'有不少的討論。部分的人認為應該在＂合理的需要＂而且＂你知道自己在幹什麼＂的情況下使用他，而不是如此斷定的禁用他。不過我還是傾向於後者，因為＂知道自己在幹什麼＂聽起來很簡單，事實上很難啊\n\n<!--more-->\n\n##continue\n`continue`會跳回迴圈的起始處。我還沒見過移除continue敘述後，沒有獲得改善的程式碼。\n> 這是作者說的，不是我說的\n\n##switch的案例掉落\n在javascript中，`switch-case`敘述在沒有break的情況下，會掉向下一個case：\n```js\nvar a = 'a';\nswitch(a){\n  case 'a':\n    document.write(' case1');\n  case 'b':\n    document.write(' case2');\n    break;\n  case 'c':\n    document.write(' case3'); \n}\n// case1 case2\n```\n這有時候會被當作一個trick，但作者認為＂程式語言裡最糟的功能，不是那些顯然危險或無用的功能，而是那些有用的、具有吸引力但又危險的功能。＂\n> 小插曲：其實作者之前也認為fall through的優點足以掩蓋缺點，直到他某天修改JSLint的Bug時膝蓋中了一箭...\n\n##無區塊的敘述\n不要為了省兩個字元捅自己或你的隊友。保持一致性有助於把事情做對。\n\n##++跟--\n在jsLint中這叫over trick。作者認為這會鼓勵一種魯莽草率的風格，大部分的buffer overrun都來自於這種風格的原始碼。\n\n##Bitwise運算子\n在JAVA中，bitwise運算子與整數一起工作，但javascript中沒有整數，只好把double轉成整數處理完後再轉回去。在多數語言中，bitwise離硬體很近而非常快速，但在javascript中卻不是這樣。\n\n##function敘述與function運算式\njavascript中同時擁有function敘述(function expression)與function運算式(function declaration)，下面兩者的意義是相等的：\n```js\nfunction foo() {}; // function declaration\nvar foo = function foo() {}; // function expression\n```\n作者認為後者的形式比較好，可以清楚的表現出＂函式也是個物件＂這個性質。此外，在if敘述中禁止使用function敘述，但多數的瀏覽器沒有理會這項規則，實作方式又各不相同，因而產生了可攜性的問題。\n\n##typed wrapper\njavascript有一組type wrapper，例如：\n```js\nvar a = new Boolean(false);\na.valueOf() // false\n```\n會產生一個有`valueOf`方法的物件，此方法回傳wrapper value。但事實上完全不需要這個功能，不要使用`new String``newNumber``new Boolean`這些方法，也避免使用`new Object`和`new Array`，改用`{}`與`[]`。\n##new\nnew運算子會建立繼承運算元的prototype成員的新物件，然後呼叫運算元，把新物件繫結至this。但是如果你忘了加new，運算元的this會指向window，這個問題無法被編譯器檢測出來，只能靠命名規則來協助。更好的方法是不用new。（這個問題在繼承模式的部分討論過，請參考[這裡](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch5.html)）\n##void\n在javascript中，void是個運算子，接受運算元並回傳undefined。這功能沒有用。\n> 學長，請容許我強調一遍，完全沒有用。","slug":"2013-12-31-note-javascriptthe-good-parts-bad-part-2","published":1,"updated":"2015-04-20T13:15:10.243Z","photos":[],"link":"","_id":"ciai95rox002dl0pgcu247e82"},{"layout":"post","title":"Javascript : The Good Parts - 糟糕的部分","date":"2013-12-24T00:44:00.000Z","comments":1,"_content":"##全域變數\njavascript最糟糕的一項特性，就是他對於全域變數的依賴。有三種可以宣告全域變數的方式：\n```js\nvar foo = 'value'; // 直接在最外層宣告\nwindow.foo = 'value' // window物件是所有全域變數的容器\nfoo = 'value' // 不經宣告就使用變數，稱為implied global\n```\n第三種原本的用意是對於初學者的體貼（蛤？），但這反而容易造成很難被找出來的bug。\n##範圍\n如同前面提到的，javascript沒有block scope，只有function scope，而且裡面還有變數抬升的特性。所以最好 **在每個區塊起始的地方宣告完區塊內所有變數** 。\n##分號的安插\njavascript有個試圖糾正錯誤的機制，它會自動幫你安插分號。不過這個機制有時候會造成更多的麻煩：\n```js\nreturn\n{\n\tstatus: true;\n};\n```\n上面的程式看起來很正常，不過javascript會認為你`return`後面忘了加上分號而貼心的幫你補上，於是就變成這樣：\n```js\nreturn; // undefind\n{\n\tstatus: true;\n};\n```\n所以撰寫javascript時應該採用K&R風格，把`{`放在句尾，可以避免類似的悲劇發生。\n<!--more-->\n\n##保留字\n作者認為有太多的保留字沒有被使用，造成命名上的麻煩（保留字不能用在變數或特性名稱）\n> 不過事實上，有一些是後來實作ECMA5有用到的\n\n##Unicode\n在設計javascript的年代，Unicode最多只到65536個字元，但現在已經突破百萬。\njavascript的字元是16位元，超出的部分以一對字元表示。Unicode把 **字元對** 當成一個字元，但對javascript來說是兩個。\n##typeof\ntypeof有許多非預期的狀況，例如：\n```js\ntypeof null // object\ntypeof [1, 2, 3] // object\ntypeof /a/ // 各瀏覽器實作不一致，可能是object或function\n```\n##parseInt\n`parseInt`是個把字串轉換為整數的函式，他會在遇到非數字字元的時候立即停止，例如：\n```js\nparseInt('16 say hi~ 17'); // 16\n```\n這函式還有另一個麻煩，如果字串的第一個字元是0，字串會依照八進位制做轉換，所以最好在每次使用時都帶入進位參數：\n```js\nparseInt('077'); // 63\nparseInt('077', 10); // 77\n```\n> 這點似乎在新版的Browser有fix過，沒有帶入參數就默認10進位\n\n##+運算子\n如果你希望 + 運算子是sum的作用，務必要檢查兩邊是不是\"都是\"數字。\n##浮點數\n這是最常被回報的bug。javascript採用[IEEE754標準](http://zh.wikipedia.org/wiki/IEEE_754)，導致他在處理十進位分數的時候會發生一些問題，例如：\n```JS\nconsole.log(0.1 + 0.2); // 0.30000000000000004\n```\n幸好，在整數運算的部分是正確的，所以可以先換成整數做運算在除回來。\n##NaN\n這也是個奇妙的東西，它的意義是＂非數值(not an number)＂，不過...\n```js\ntypeof NaN === 'number'; // true\n```\n還有更奇妙的\n```js\nNaN === NaN // false\nNaN !== NaN // true\n```\n這哪招阿...\n幸好javascript有提供一個檢查`NaN`的函式：\n```JS\nisNaN(NaN); // true\nisNaN(0); // false\nisNaN('hi~'); // true\nisNaN('0'); // false\n```\n> 這方法有點兩光阿...要檢查NaN還是得判斷兩次才行Orz\n\n還有一個`isFinite`函式，可以判斷＂值是否可以轉成數值＂，他會拒絕`NaN`跟`Infinity`。如果要確認值＂是不是數值(`number`)＂的話，需要自己加工：\n```js\nvar isNumber = function(value){\n\treturn typeof value === 'number' && isFinite(value);\n}\n```\n##偽陣列\n前面提過，javascript沒有真正的陣列，而是基於物件的偽陣列。跟真正的陣列相比，他的效能較差，但較容易使用。也因為這個特性的關係，`typeof`運算子沒有辦法區分物件跟陣列。為了判斷是否為陣列，需要把他的Constructor列入考慮：\n```js\nif(myValue && typeof myValue === 'object' \n\t\t&& myValue.constructor === Array){\n  //muValue is Array!\n}\n```\n如果陣列在不同的frame或window下建立，上面的測試可能給出false, 可以改成下面的形式：\n```js\nif(myValue && typeof myValue === 'object' \n    && typeof myValue.length === 'number'\n    && !(myValue.propertyIsEnumberable('length'))){\n  //muValue is Array!\n}\n```\n另外，`arguments`並不是個陣列，而是個具有length的物件，但上述測試會把它視為陣列；有時候我們會想要這種結果。\n##False類的值\n下面這些的值會被歸類在false：\n* 0 \t\t\t \t(number)\n* NaN \t\t \t(number)\n*\t''\t\t\t \t(String)\n* false \t \t(Boolean)\n* null \t\t  (Object)\n* undefind  (undefind)\n\nundefind跟NaN不是常數而是全域變數，可以去更改他們的值。應該不能這樣做，但真的可以。請千萬別這樣做。\n> 剛剛試了一下，這好像也會被Browser Fix掉...真可惜（喂！）\n\n##'hasOwnProperty'\n`hasOwnProperty`是個方法而非運算子，所以他有可能被覆蓋掉。（應該不會有人這麼白目吧？）\n\n##物件\nJavascript的物件從未真正為空，因為他們可以從prototype chain取得成員。下面是一個計算詞彙出現次數的範例:\n```js\nvar i;\nvar word;\nvar text = \"...some words and constructor\"\nvar words = text.toLowerCase().split(/[\\s,.]+/);\nvar count = {};\n\nfor(i = 0; i < words.length; i += 1){\n\tword = words[i];\n  if(count[word]){\n  \tcount[word] += 1;\n  } else {\n  \tcount[word] = 1;\n  }\n}\n```\n\ncount[constructor]會包含一串很長的字串（chrome是顯示`\"function Object() { [native code] }1\"`），因為count物件繼承Object.prototype，裡面也有一個constructor特性，他被轉成String然後在尾端加上1。所以應該跟for-in時一樣，用`hasOwnProperty`方法做檢查。","source":"_posts/2013-12-24-note-javascriptthe-good-parts-bad-part-1.md","raw":"---\nlayout: post\ntitle: 'Javascript : The Good Parts - 糟糕的部分'\ndate: 2013-12-24 08:44\ncomments: true\ntags: [javascript]\n---\n##全域變數\njavascript最糟糕的一項特性，就是他對於全域變數的依賴。有三種可以宣告全域變數的方式：\n```js\nvar foo = 'value'; // 直接在最外層宣告\nwindow.foo = 'value' // window物件是所有全域變數的容器\nfoo = 'value' // 不經宣告就使用變數，稱為implied global\n```\n第三種原本的用意是對於初學者的體貼（蛤？），但這反而容易造成很難被找出來的bug。\n##範圍\n如同前面提到的，javascript沒有block scope，只有function scope，而且裡面還有變數抬升的特性。所以最好 **在每個區塊起始的地方宣告完區塊內所有變數** 。\n##分號的安插\njavascript有個試圖糾正錯誤的機制，它會自動幫你安插分號。不過這個機制有時候會造成更多的麻煩：\n```js\nreturn\n{\n\tstatus: true;\n};\n```\n上面的程式看起來很正常，不過javascript會認為你`return`後面忘了加上分號而貼心的幫你補上，於是就變成這樣：\n```js\nreturn; // undefind\n{\n\tstatus: true;\n};\n```\n所以撰寫javascript時應該採用K&R風格，把`{`放在句尾，可以避免類似的悲劇發生。\n<!--more-->\n\n##保留字\n作者認為有太多的保留字沒有被使用，造成命名上的麻煩（保留字不能用在變數或特性名稱）\n> 不過事實上，有一些是後來實作ECMA5有用到的\n\n##Unicode\n在設計javascript的年代，Unicode最多只到65536個字元，但現在已經突破百萬。\njavascript的字元是16位元，超出的部分以一對字元表示。Unicode把 **字元對** 當成一個字元，但對javascript來說是兩個。\n##typeof\ntypeof有許多非預期的狀況，例如：\n```js\ntypeof null // object\ntypeof [1, 2, 3] // object\ntypeof /a/ // 各瀏覽器實作不一致，可能是object或function\n```\n##parseInt\n`parseInt`是個把字串轉換為整數的函式，他會在遇到非數字字元的時候立即停止，例如：\n```js\nparseInt('16 say hi~ 17'); // 16\n```\n這函式還有另一個麻煩，如果字串的第一個字元是0，字串會依照八進位制做轉換，所以最好在每次使用時都帶入進位參數：\n```js\nparseInt('077'); // 63\nparseInt('077', 10); // 77\n```\n> 這點似乎在新版的Browser有fix過，沒有帶入參數就默認10進位\n\n##+運算子\n如果你希望 + 運算子是sum的作用，務必要檢查兩邊是不是\"都是\"數字。\n##浮點數\n這是最常被回報的bug。javascript採用[IEEE754標準](http://zh.wikipedia.org/wiki/IEEE_754)，導致他在處理十進位分數的時候會發生一些問題，例如：\n```JS\nconsole.log(0.1 + 0.2); // 0.30000000000000004\n```\n幸好，在整數運算的部分是正確的，所以可以先換成整數做運算在除回來。\n##NaN\n這也是個奇妙的東西，它的意義是＂非數值(not an number)＂，不過...\n```js\ntypeof NaN === 'number'; // true\n```\n還有更奇妙的\n```js\nNaN === NaN // false\nNaN !== NaN // true\n```\n這哪招阿...\n幸好javascript有提供一個檢查`NaN`的函式：\n```JS\nisNaN(NaN); // true\nisNaN(0); // false\nisNaN('hi~'); // true\nisNaN('0'); // false\n```\n> 這方法有點兩光阿...要檢查NaN還是得判斷兩次才行Orz\n\n還有一個`isFinite`函式，可以判斷＂值是否可以轉成數值＂，他會拒絕`NaN`跟`Infinity`。如果要確認值＂是不是數值(`number`)＂的話，需要自己加工：\n```js\nvar isNumber = function(value){\n\treturn typeof value === 'number' && isFinite(value);\n}\n```\n##偽陣列\n前面提過，javascript沒有真正的陣列，而是基於物件的偽陣列。跟真正的陣列相比，他的效能較差，但較容易使用。也因為這個特性的關係，`typeof`運算子沒有辦法區分物件跟陣列。為了判斷是否為陣列，需要把他的Constructor列入考慮：\n```js\nif(myValue && typeof myValue === 'object' \n\t\t&& myValue.constructor === Array){\n  //muValue is Array!\n}\n```\n如果陣列在不同的frame或window下建立，上面的測試可能給出false, 可以改成下面的形式：\n```js\nif(myValue && typeof myValue === 'object' \n    && typeof myValue.length === 'number'\n    && !(myValue.propertyIsEnumberable('length'))){\n  //muValue is Array!\n}\n```\n另外，`arguments`並不是個陣列，而是個具有length的物件，但上述測試會把它視為陣列；有時候我們會想要這種結果。\n##False類的值\n下面這些的值會被歸類在false：\n* 0 \t\t\t \t(number)\n* NaN \t\t \t(number)\n*\t''\t\t\t \t(String)\n* false \t \t(Boolean)\n* null \t\t  (Object)\n* undefind  (undefind)\n\nundefind跟NaN不是常數而是全域變數，可以去更改他們的值。應該不能這樣做，但真的可以。請千萬別這樣做。\n> 剛剛試了一下，這好像也會被Browser Fix掉...真可惜（喂！）\n\n##'hasOwnProperty'\n`hasOwnProperty`是個方法而非運算子，所以他有可能被覆蓋掉。（應該不會有人這麼白目吧？）\n\n##物件\nJavascript的物件從未真正為空，因為他們可以從prototype chain取得成員。下面是一個計算詞彙出現次數的範例:\n```js\nvar i;\nvar word;\nvar text = \"...some words and constructor\"\nvar words = text.toLowerCase().split(/[\\s,.]+/);\nvar count = {};\n\nfor(i = 0; i < words.length; i += 1){\n\tword = words[i];\n  if(count[word]){\n  \tcount[word] += 1;\n  } else {\n  \tcount[word] = 1;\n  }\n}\n```\n\ncount[constructor]會包含一串很長的字串（chrome是顯示`\"function Object() { [native code] }1\"`），因為count物件繼承Object.prototype，裡面也有一個constructor特性，他被轉成String然後在尾端加上1。所以應該跟for-in時一樣，用`hasOwnProperty`方法做檢查。","slug":"2013-12-24-note-javascriptthe-good-parts-bad-part-1","published":1,"updated":"2015-04-20T13:15:10.261Z","photos":[],"link":"","_id":"ciai95rp0002fl0pg44hwyveh"},{"layout":"post","title":"從Blogger搬到Logdown","date":"2013-12-23T20:46:00.000Z","comments":1,"_content":"\n偶然在社群看到這個東西，試用過後有種 **\"寶貝~我終於找到你了\"** 的感覺XD\n可以用Markdown寫文章，又不必像Octorpess萬事手動，當下就決定把Blogger搬過來\n\n不過短暫的試用後，發現還是有些缺點，像是: \n    1. 以前從Chrome Console複製到Blogger會帶Style（應該說從任何地方都會），現在少了這個，只好把結果打在註解裡．\n    2. 然後之前的舊文轉過來也會有些走樣（很多style都不見了），所以要看原本的樣子可能要回到[Blogger](http://apolkingg8.blogspot.com)那邊看．\n    3. 社群資源有差（theme很少，bug修比較慢），畢竟這是要用時間累積的\n\n整體來說，還蠻喜歡這個平台的（其實是單純喜歡Markdown吧XD），如果這幾天沒發現什麼大問題的話，以後應該就會以這邊為主．\n\n\n","source":"_posts/2013-12-24-moved-from-blogger-to-logdown.md","raw":"---\nlayout: post\ntitle: '從Blogger搬到Logdown'\ndate: 2013-12-24 04:46\ncomments: true\ntags: [閒聊]\n---\n\n偶然在社群看到這個東西，試用過後有種 **\"寶貝~我終於找到你了\"** 的感覺XD\n可以用Markdown寫文章，又不必像Octorpess萬事手動，當下就決定把Blogger搬過來\n\n不過短暫的試用後，發現還是有些缺點，像是: \n    1. 以前從Chrome Console複製到Blogger會帶Style（應該說從任何地方都會），現在少了這個，只好把結果打在註解裡．\n    2. 然後之前的舊文轉過來也會有些走樣（很多style都不見了），所以要看原本的樣子可能要回到[Blogger](http://apolkingg8.blogspot.com)那邊看．\n    3. 社群資源有差（theme很少，bug修比較慢），畢竟這是要用時間累積的\n\n整體來說，還蠻喜歡這個平台的（其實是單純喜歡Markdown吧XD），如果這幾天沒發現什麼大問題的話，以後應該就會以這邊為主．\n\n\n","slug":"2013-12-24-moved-from-blogger-to-logdown","published":1,"updated":"2015-04-20T13:15:10.278Z","photos":[],"link":"","_id":"ciai95rp3002hl0pgodble9um"},{"layout":"post","title":"Javascript : The Good Parts - Ch.6 陣列","date":"2013-12-19T08:16:00.000Z","comments":1,"_content":"此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch6.html)觀看原文．","source":"_posts/2013-12-19-javascript-good-parts-ch6.md","raw":"---\nlayout: post\ntitle: 'Javascript : The Good Parts - Ch.6 陣列'\ndate: 2013-12-19 16:16\ncomments: true\ntags: [javascript]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch6.html)觀看原文．","slug":"2013-12-19-javascript-good-parts-ch6","published":1,"updated":"2015-04-20T13:15:10.252Z","photos":[],"link":"","_id":"ciai95rp6002jl0pgwpvttxlc"},{"layout":"post","title":"Javascript : The Good Parts - Ch.5 繼承 (二)","date":"2013-12-18T08:48:00.000Z","comments":1,"_content":"此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch5_19.html)觀看原文．","source":"_posts/2013-12-18-javascript-good-parts-ch5-19.md","raw":"---\nlayout: post\ntitle: 'Javascript : The Good Parts - Ch.5 繼承 (二)'\ndate: 2013-12-18 16:48\ncomments: true\ntags: [javascript]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch5_19.html)觀看原文．","slug":"2013-12-18-javascript-good-parts-ch5-19","published":1,"updated":"2015-04-20T13:15:10.285Z","photos":[],"link":"","_id":"ciai95rp8002ll0pgch7obr3d"},{"layout":"post","title":"GitHub Pages + Octopress on Windows初體驗","date":"2013-12-18T00:47:00.000Z","comments":1,"_content":"此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/github-pages-octopress-on-windows.html)觀看原文．","source":"_posts/2013-12-18-github-pages-octopress-on-windows.md","raw":"---\nlayout: post\ntitle: 'GitHub Pages + Octopress on Windows初體驗'\ndate: 2013-12-18 08:47\ncomments: true\ntags: [閒聊]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/github-pages-octopress-on-windows.html)觀看原文．","slug":"2013-12-18-github-pages-octopress-on-windows","published":1,"updated":"2015-04-20T13:05:35.689Z","photos":[],"link":"","_id":"ciai95rpc002nl0pgvlyyavie"},{"layout":"post","title":"Javascript : The Good Parts - Ch.5 繼承 (一)","date":"2013-12-13T23:27:00.000Z","comments":1,"_content":"此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch5.html)觀看原文．","source":"_posts/2013-12-14-javascript-good-parts-ch5.md","raw":"---\nlayout: post\ntitle: 'Javascript : The Good Parts - Ch.5 繼承 (一)'\ndate: 2013-12-14 07:27\ncomments: true\ntags: [javascript]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch5.html)觀看原文．","slug":"2013-12-14-javascript-good-parts-ch5","published":1,"updated":"2015-04-20T13:05:35.674Z","photos":[],"link":"","_id":"ciai95rpe002pl0pgiu4l8p0o"},{"layout":"post","title":"Javascript : The Good Parts - Ch.4 函式 (三)","date":"2013-12-11T01:21:00.000Z","comments":1,"_content":"此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch4_11.html)觀看原文．","source":"_posts/2013-12-11-javascript-good-parts-ch4-11.md","raw":"---\nlayout: post\ntitle: 'Javascript : The Good Parts - Ch.4 函式 (三)'\ndate: 2013-12-11 09:21\ncomments: true\ntags: [javascript]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch4_11.html)觀看原文．","slug":"2013-12-11-javascript-good-parts-ch4-11","published":1,"updated":"2015-04-20T13:05:35.716Z","photos":[],"link":"","_id":"ciai95rpg002rl0pghks9fhuo"},{"layout":"post","title":"Javascript : The Good Parts - Ch.4 函式 (二)","date":"2013-12-09T03:18:00.000Z","comments":1,"_content":"此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch4_9.html)觀看原文．","source":"_posts/2013-12-09-javascript-good-parts-ch4-9.md","raw":"---\nlayout: post\ntitle: 'Javascript : The Good Parts - Ch.4 函式 (二)'\ndate: 2013-12-09 11:18\ncomments: true\ntags: [javascript]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch4_9.html)觀看原文．","slug":"2013-12-09-javascript-good-parts-ch4-9","published":1,"updated":"2015-04-20T13:05:35.722Z","photos":[],"link":"","_id":"ciai95rph002tl0pgfdw6yt52"},{"layout":"post","title":"微軟RWD研討會高雄場","date":"2013-12-07T00:47:00.000Z","comments":1,"_content":"此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/rwd.html)觀看原文．","source":"_posts/2013-12-07-168754.md","raw":"---\nlayout: post\ntitle: '微軟RWD研討會高雄場'\ndate: 2013-12-07 08:47\ncomments: true\ntags: [閒聊, 微軟, RWD]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/rwd.html)觀看原文．","slug":"2013-12-07-168754","published":1,"updated":"2015-04-20T13:05:35.695Z","photos":[],"link":"","_id":"ciai95rpi002vl0pg4xg6m74z"},{"layout":"post","title":"Javascript : The Good Parts - Ch.4 函式 (一)","date":"2013-12-04T02:02:00.000Z","comments":1,"_content":"此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch4.html)觀看原文．","source":"_posts/2013-12-04-javascript-good-parts-ch4.md","raw":"---\nlayout: post\ntitle: 'Javascript : The Good Parts - Ch.4 函式 (一)'\ndate: 2013-12-04 10:02\ncomments: true\ntags: [javascript]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch4.html)觀看原文．","slug":"2013-12-04-javascript-good-parts-ch4","published":1,"updated":"2015-04-20T13:05:35.709Z","photos":[],"link":"","_id":"ciai95rpk0031l0pg26ylhicl"},{"layout":"post","title":"Javascript : The Good Parts - Ch.3 物件","date":"2013-12-03T01:17:00.000Z","comments":1,"_content":"此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch3.html)觀看原文．","source":"_posts/2013-12-03-javascript-good-parts-ch3.md","raw":"---\nlayout: post\ntitle: 'Javascript : The Good Parts - Ch.3 物件'\ndate: 2013-12-03 09:17\ncomments: true\ntags: [javascript]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch3.html)觀看原文．","slug":"2013-12-03-javascript-good-parts-ch3","published":1,"updated":"2015-04-20T13:05:35.702Z","photos":[],"link":"","_id":"ciai95rpm0033l0pgvncx0ztm"},{"layout":"post","title":"Javascript : The Good Parts - Ch.2 文法","date":"2013-12-02T01:12:00.000Z","comments":1,"_content":"此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch2.html)觀看原文．","source":"_posts/2013-12-02-javascript-good-parts-ch2.md","raw":"---\nlayout: post\ntitle: 'Javascript : The Good Parts - Ch.2 文法'\ndate: 2013-12-02 09:12\ncomments: true\ntags: [javascript]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch2.html)觀看原文．","slug":"2013-12-02-javascript-good-parts-ch2","published":1,"updated":"2015-04-20T12:57:48.797Z","photos":[],"link":"","_id":"ciai95rpn0035l0pgpc09us6s"},{"layout":"post","title":"YQL十分鐘簡單上手","date":"2014-05-11T22:53:00.000Z","comments":1,"_content":"","source":"_drafts/yql-for-ten-minutes-easy.md","raw":"---\nlayout: post\ntitle: 'YQL十分鐘簡單上手'\ndate: 2014-05-12 06:53\ncomments: true\ntags: \n---\n","slug":"yql-for-ten-minutes-easy","published":0,"updated":"2015-04-20T12:56:23.692Z","photos":[],"link":"","_id":"ciai95rpx0037l0pgt7zhbspg"},{"title":"聊一聊Hybrid Apps這檔事","_content":"\n從時薪八塊半畢業以來，幾乎都在做Hybrid App，包括Smart TV with Samsung & Panasonic,\nCordova on Android, iOS and Windows Phone, WinRT with WinJS, 還有自己玩的\nnw.js(aka: Node-Webkit) on Win & Mac，雖然不敢自稱大師，但也有不少有的沒的心得感想與抱怨，\n下面就拿出來分享一下\n\n###Why Hybrid Apps?\n先聊聊為什麼要用Hybrid Apps好了，我想大部分老闆的想法都一樣：省錢。拿Cordova來舉例好了，\n你找一個寫web的跟找一個寫Android的加一個寫iOS的再加一個寫WindowsPhone的，這價錢起碼差了三四倍\n：如果你找的web programer剛好有點認真有點強，還可以去凹他寫Native Plugin順便搞公司的\n網頁，反正web很簡單很快就搞定了嘛～\n\n結果就是，一堆半生不熟的新手們，搞出一堆品質不佳的Hybrid App，然後不明究裡的局外人就開始說：\n啊～你看，javascript只是個toy language而已啦，慢得要死毛病又一堆，巴拉巴拉扒拉...\n\n...話題好像有點跑遠了，讓我們回到Hybrid Apps上面。\n\n###真的有比較省嗎？\n如果你的老闆跟我之前呆過的某間公司一樣，本著做一個(專案)跑一個(客戶)的精神在做，那麼這的確很省...\n不過如果你想build的是一個高水準、給數十萬或數百萬user良好體驗的app，那麼就不一定了\n","source":"_drafts/talking-about-hybrid-apps.md","raw":"title: 聊一聊Hybrid Apps這檔事\ntags:\n---\n\n從時薪八塊半畢業以來，幾乎都在做Hybrid App，包括Smart TV with Samsung & Panasonic,\nCordova on Android, iOS and Windows Phone, WinRT with WinJS, 還有自己玩的\nnw.js(aka: Node-Webkit) on Win & Mac，雖然不敢自稱大師，但也有不少有的沒的心得感想與抱怨，\n下面就拿出來分享一下\n\n###Why Hybrid Apps?\n先聊聊為什麼要用Hybrid Apps好了，我想大部分老闆的想法都一樣：省錢。拿Cordova來舉例好了，\n你找一個寫web的跟找一個寫Android的加一個寫iOS的再加一個寫WindowsPhone的，這價錢起碼差了三四倍\n：如果你找的web programer剛好有點認真有點強，還可以去凹他寫Native Plugin順便搞公司的\n網頁，反正web很簡單很快就搞定了嘛～\n\n結果就是，一堆半生不熟的新手們，搞出一堆品質不佳的Hybrid App，然後不明究裡的局外人就開始說：\n啊～你看，javascript只是個toy language而已啦，慢得要死毛病又一堆，巴拉巴拉扒拉...\n\n...話題好像有點跑遠了，讓我們回到Hybrid Apps上面。\n\n###真的有比較省嗎？\n如果你的老闆跟我之前呆過的某間公司一樣，本著做一個(專案)跑一個(客戶)的精神在做，那麼這的確很省...\n不過如果你想build的是一個高水準、給數十萬或數百萬user良好體驗的app，那麼就不一定了\n","slug":"talking-about-hybrid-apps","published":0,"date":"2015-05-30T02:32:30.148Z","updated":"2015-05-30T02:32:30.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciai95rpy0038l0pgm3iu6hhg"},{"title":"learning es6 with babel - Class","_content":"\n`template string`是一顆很實用的語法糖(應該說，這東西早該出現了...Orz)\n，解決了以往用`\"`跟`'`拼湊複雜字串的麻煩。它使用` ` `\n來標記\n```js\n// 基本的單行用法\nvar t = `In JavaScript \"\\n\" is a line-feed.`;\n```\n如果要使用` ` `，可以用`\\`跳脫\n```js\nvar t = `\\`yo\\``;\n```\n可以多行\n```js\n//es6\nvar t = `In JavaScript is\n not legal, but it's\n  ok\n  with\n  template string`;\n```\n當多行的時候，babel會自動加上`\\n`\n```js\n//babel\nvar t = \"In JavaScript is\\n not legal, but it's \\n  ok \\n  with \\n  template string\";\n```\n可以嵌入變數，用`${}`標記；嵌入的變數如果沒有先聲明，會得到`not defined`錯誤\n```js\nvar name = \"Bob\", time = \"today\";\nvar t = `Hello ${name}, how are you ${time}?`;\n```\n嵌入區塊之中可以做運算，也可以摳function，甚至還能做多行多層的嵌套\n```js\n//es6\nvar double = x => x * 2\nvar t = `${1 + 2}` //3\nvar t = `${1 + double(2)}`//5\nvar t = `${1 + double(2) +\n  `yooo${\n    3 + 1\n  }`\n}`\nconsole.log(t) // 5yooo4\n\n//babel\nvar double = function (x) {\n  return x * 2;\n};\nvar t = \"\" + (1 + 2);\nvar t = \"\" + (1 + double(2));\nvar t = \"\" + (1 + double(2) + (\"yooo\" + (3 + 1)));\n```\ntemplate string還有一個比較進階的用法，叫`tagged template strings`，\n這有點難解釋，我們直接看下面的範例：\n```js\nvar a = 5;\nvar b = 10;\n\nfunction tag(strings, ...values) {\n  console.log(strings[0]); // \"Hello \"\n  console.log(strings[1]); // \" world \"\n  console.log(values[0]);  // 15\n  console.log(values[1]);  // 50\n\n  return \"Bazinga!\";\n}\n\ntag`Hello ${ a + b } world ${ a * b}`;\n// \"Bazinga!\"\n```\ntag函數接到的第一個參數是一個陣列，陣列內容依序是template string被嵌套切開的內容字串\n（包含空白），第二個以後的參數則是template string各個嵌套的結果值依序傳入。babel的實現方式\n如下：\n```js\n\"use strict\";\n\nvar _taggedTemplateLiteralLoose = function (strings, raw) {\n  strings.raw = raw;\n  return strings;\n};\n\nvar a = 5;\nvar b = 10;\n\nfunction tag(strings) {\n  console.log(strings[0]); // \"Hello \"\n  console.log(strings[1]); // \" world \"\n  console.log(arguments[1]); // 15\n  console.log(arguments[2]); // 50\n\n  return \"Bazinga!\";\n}\n\ntag(_taggedTemplateLiteralLoose(\n  [\"Hello \", \" world \", \"\"], [\"Hello \", \" world \", \"\"]\n  ), a + b, a * b\n);\n```\n切出嵌套字串的部分是在compile階段進行的，`_taggedTemplateLiteralLoose`這個function\n","source":"_drafts/learning-es6-with-babel-template-string.md","raw":"title: learning es6 with babel - Class\ntags:\n---\n\n`template string`是一顆很實用的語法糖(應該說，這東西早該出現了...Orz)\n，解決了以往用`\"`跟`'`拼湊複雜字串的麻煩。它使用` ` `\n來標記\n```js\n// 基本的單行用法\nvar t = `In JavaScript \"\\n\" is a line-feed.`;\n```\n如果要使用` ` `，可以用`\\`跳脫\n```js\nvar t = `\\`yo\\``;\n```\n可以多行\n```js\n//es6\nvar t = `In JavaScript is\n not legal, but it's\n  ok\n  with\n  template string`;\n```\n當多行的時候，babel會自動加上`\\n`\n```js\n//babel\nvar t = \"In JavaScript is\\n not legal, but it's \\n  ok \\n  with \\n  template string\";\n```\n可以嵌入變數，用`${}`標記；嵌入的變數如果沒有先聲明，會得到`not defined`錯誤\n```js\nvar name = \"Bob\", time = \"today\";\nvar t = `Hello ${name}, how are you ${time}?`;\n```\n嵌入區塊之中可以做運算，也可以摳function，甚至還能做多行多層的嵌套\n```js\n//es6\nvar double = x => x * 2\nvar t = `${1 + 2}` //3\nvar t = `${1 + double(2)}`//5\nvar t = `${1 + double(2) +\n  `yooo${\n    3 + 1\n  }`\n}`\nconsole.log(t) // 5yooo4\n\n//babel\nvar double = function (x) {\n  return x * 2;\n};\nvar t = \"\" + (1 + 2);\nvar t = \"\" + (1 + double(2));\nvar t = \"\" + (1 + double(2) + (\"yooo\" + (3 + 1)));\n```\ntemplate string還有一個比較進階的用法，叫`tagged template strings`，\n這有點難解釋，我們直接看下面的範例：\n```js\nvar a = 5;\nvar b = 10;\n\nfunction tag(strings, ...values) {\n  console.log(strings[0]); // \"Hello \"\n  console.log(strings[1]); // \" world \"\n  console.log(values[0]);  // 15\n  console.log(values[1]);  // 50\n\n  return \"Bazinga!\";\n}\n\ntag`Hello ${ a + b } world ${ a * b}`;\n// \"Bazinga!\"\n```\ntag函數接到的第一個參數是一個陣列，陣列內容依序是template string被嵌套切開的內容字串\n（包含空白），第二個以後的參數則是template string各個嵌套的結果值依序傳入。babel的實現方式\n如下：\n```js\n\"use strict\";\n\nvar _taggedTemplateLiteralLoose = function (strings, raw) {\n  strings.raw = raw;\n  return strings;\n};\n\nvar a = 5;\nvar b = 10;\n\nfunction tag(strings) {\n  console.log(strings[0]); // \"Hello \"\n  console.log(strings[1]); // \" world \"\n  console.log(arguments[1]); // 15\n  console.log(arguments[2]); // 50\n\n  return \"Bazinga!\";\n}\n\ntag(_taggedTemplateLiteralLoose(\n  [\"Hello \", \" world \", \"\"], [\"Hello \", \" world \", \"\"]\n  ), a + b, a * b\n);\n```\n切出嵌套字串的部分是在compile階段進行的，`_taggedTemplateLiteralLoose`這個function\n","slug":"learning-es6-with-babel-template-string","published":0,"date":"2015-04-20T13:24:51.516Z","updated":"2015-04-20T13:24:51.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciai95rpz0039l0pg6rmg7bam"},{"title":"learning es6 with babel - Class","_content":"es6中新增了`Class`關鍵字...先別緊張也別興奮，這不是什麼語言本質上的變革，它基本上只是一顆語法糖，\n功能跟我們慣用的`Klass`大同小異\n```js\nclass Animal {\n\n  constructor(name) {\n    this.name = name;\n  }\n\n  run() {\n    console.log(this.name + \" is running\");\n  }\n}\n```\n","source":"_drafts/learning-es6-with-babel-Class.md","raw":"title: learning es6 with babel - Class\ntags:\n---\nes6中新增了`Class`關鍵字...先別緊張也別興奮，這不是什麼語言本質上的變革，它基本上只是一顆語法糖，\n功能跟我們慣用的`Klass`大同小異\n```js\nclass Animal {\n\n  constructor(name) {\n    this.name = name;\n  }\n\n  run() {\n    console.log(this.name + \" is running\");\n  }\n}\n```\n","slug":"learning-es6-with-babel-Class","published":0,"date":"2015-03-31T14:01:33.013Z","updated":"2015-03-31T14:01:33.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciai95rq0003al0pgy1mgx1xv"},{"title":"js reference小陷阱","_content":"\n前幾天遇到一個有趣的小陷阱，拿出來跟大家分享一下\n```js\nvar list = [{id:1}, {id:2}]\n\nvar removeObjInArrById = function(_list, _id){\n  _list = _.reject(list, function(f){return f.id === _id})\n}\n\nremoveObjInArrById(list, 1)\n\nconsole.log(list) // [{id:1}, {id:2}] ...wtf?\n```\n上面是一個簡單的`function`，用來移除`list`中對應`id`的物件，不過結果卻失敗了...why?\n\n仔細trace一遍之後，發現原來是reference...我們來看一下問題出在哪：\n```js\nvar list = [{id:1}, {id:2}]\n```\n建立變數`list`，指向一個匿名陣列`[{id:1}, {id:2}]`，姑且稱之為`xArray`\n```js\nvar removeObjInArrById = function(_list, _id){\n  _list = _.reject(list, function(f){return f.id === _id})\n}\n```\n建立一個變數`removeObjInArrById`，指向一個匿名函式...叫他`xFunc`好了\n```js\nremoveObjInArrById(list, 1)\n```\n摳剛剛建立的`removeObjInArrById()`函式，傳入變數`list`的**參考**，以及一個值為`1`的\nnumber object。接下來就是重點了：\n```js\nfunction(_list, _id){\n  ...\n```\n接下來進入`xFunc`，這時local var`_list`指向外部的`list`，而`_id`指向一個新的`Nember(1)`\n```js\n_list = _.reject(list, function(f){return f.id === _id})\n```\n`_.reject`會回傳一個新的Array（取名為`arrFilted`），然後讓`_list`指向`arrFilted`\n...注意到問題了嗎？\n\n是的，這裡改變的是`removeObjInArrById`的scope中的`_list`的參考，而外部的`list`只是失去一個\n參考而已，物件的內容並沒有被改變。\n","source":"_drafts/js-function-args-reference.md","raw":"title: js reference小陷阱\ntags:\n---\n\n前幾天遇到一個有趣的小陷阱，拿出來跟大家分享一下\n```js\nvar list = [{id:1}, {id:2}]\n\nvar removeObjInArrById = function(_list, _id){\n  _list = _.reject(list, function(f){return f.id === _id})\n}\n\nremoveObjInArrById(list, 1)\n\nconsole.log(list) // [{id:1}, {id:2}] ...wtf?\n```\n上面是一個簡單的`function`，用來移除`list`中對應`id`的物件，不過結果卻失敗了...why?\n\n仔細trace一遍之後，發現原來是reference...我們來看一下問題出在哪：\n```js\nvar list = [{id:1}, {id:2}]\n```\n建立變數`list`，指向一個匿名陣列`[{id:1}, {id:2}]`，姑且稱之為`xArray`\n```js\nvar removeObjInArrById = function(_list, _id){\n  _list = _.reject(list, function(f){return f.id === _id})\n}\n```\n建立一個變數`removeObjInArrById`，指向一個匿名函式...叫他`xFunc`好了\n```js\nremoveObjInArrById(list, 1)\n```\n摳剛剛建立的`removeObjInArrById()`函式，傳入變數`list`的**參考**，以及一個值為`1`的\nnumber object。接下來就是重點了：\n```js\nfunction(_list, _id){\n  ...\n```\n接下來進入`xFunc`，這時local var`_list`指向外部的`list`，而`_id`指向一個新的`Nember(1)`\n```js\n_list = _.reject(list, function(f){return f.id === _id})\n```\n`_.reject`會回傳一個新的Array（取名為`arrFilted`），然後讓`_list`指向`arrFilted`\n...注意到問題了嗎？\n\n是的，這裡改變的是`removeObjInArrById`的scope中的`_list`的參考，而外部的`list`只是失去一個\n參考而已，物件的內容並沒有被改變。\n","slug":"js-function-args-reference","published":0,"date":"2015-05-30T02:32:30.146Z","updated":"2015-05-30T02:32:30.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciai95rq1003bl0pgjdewhq01"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciai95rn50003l0pg82uzo385","tag_id":"ciai95rn50004l0pgq00yz11i","_id":"ciai95rn80007l0pg7ezi6rbd"},{"post_id":"ciai95rn50003l0pg82uzo385","tag_id":"ciai95rn70005l0pgskkuvhbp","_id":"ciai95rn90008l0pgt3p8p1fx"},{"post_id":"ciai95rn50003l0pg82uzo385","tag_id":"ciai95rn80006l0pgu7q0fzjr","_id":"ciai95rn90009l0pg3ws6qpk2"},{"post_id":"ciai95rna000al0pgzrmmjz7d","tag_id":"ciai95rn50004l0pgq00yz11i","_id":"ciai95rnd000bl0pgovash7a7"},{"post_id":"ciai95rna000al0pgzrmmjz7d","tag_id":"ciai95rn70005l0pgskkuvhbp","_id":"ciai95rnd000cl0pgg2qgeep2"},{"post_id":"ciai95rna000al0pgzrmmjz7d","tag_id":"ciai95rn80006l0pgu7q0fzjr","_id":"ciai95rnd000dl0pg50ut1n4z"},{"post_id":"ciai95rne000el0pgmv50ftnj","tag_id":"ciai95rn50004l0pgq00yz11i","_id":"ciai95rnf000fl0pg5y6zwgyd"},{"post_id":"ciai95rne000el0pgmv50ftnj","tag_id":"ciai95rn70005l0pgskkuvhbp","_id":"ciai95rng000gl0pgfba9nm48"},{"post_id":"ciai95rne000el0pgmv50ftnj","tag_id":"ciai95rn80006l0pgu7q0fzjr","_id":"ciai95rng000hl0pgsvnouofn"},{"post_id":"ciai95rnh000il0pgwas5s0it","tag_id":"ciai95rnh000jl0pglzqtr8zg","_id":"ciai95rni000kl0pgkjn43fxp"},{"post_id":"ciai95rnj000ll0pgb46h9tu6","tag_id":"ciai95rnl000ml0pggjy4p0fj","_id":"ciai95rnm000pl0pg6c16mrfj"},{"post_id":"ciai95rnj000ll0pgb46h9tu6","tag_id":"ciai95rnl000nl0pgpfw2wtzi","_id":"ciai95rnm000ql0pgr4oglnax"},{"post_id":"ciai95rnj000ll0pgb46h9tu6","tag_id":"ciai95rnl000ol0pgviz4zc4z","_id":"ciai95rnm000rl0pgpa3j9zfp"},{"post_id":"ciai95rno000sl0pgfbyku642","tag_id":"ciai95rnl000ml0pggjy4p0fj","_id":"ciai95rno000tl0pg1b13gfek"},{"post_id":"ciai95rnq000ul0pgmm0ag5v3","tag_id":"ciai95rnl000ml0pggjy4p0fj","_id":"ciai95rnr000wl0pgskntsbhn"},{"post_id":"ciai95rnq000ul0pgmm0ag5v3","tag_id":"ciai95rnq000vl0pgwr7sae1g","_id":"ciai95rnr000xl0pg9s8zkyas"},{"post_id":"ciai95rns000yl0pgtmq5gret","tag_id":"ciai95rnl000ml0pggjy4p0fj","_id":"ciai95rnu0011l0pgeqm904lb"},{"post_id":"ciai95rns000yl0pgtmq5gret","tag_id":"ciai95rnt000zl0pgu8kh5tfh","_id":"ciai95rnu0012l0pgxtnozozq"},{"post_id":"ciai95rns000yl0pgtmq5gret","tag_id":"ciai95rnu0010l0pgpj3ec11c","_id":"ciai95rnu0013l0pg0ogvla8u"},{"post_id":"ciai95rns000yl0pgtmq5gret","tag_id":"ciai95rn70005l0pgskkuvhbp","_id":"ciai95rnu0014l0pgx8xltxtg"},{"post_id":"ciai95ro00016l0pgoekxx2ao","tag_id":"ciai95ro10017l0pgezu1d9cx","_id":"ciai95ro2001al0pg7b5fuz5z"},{"post_id":"ciai95ro00016l0pgoekxx2ao","tag_id":"ciai95ro10018l0pg501rr97c","_id":"ciai95ro2001bl0pg4bygsufa"},{"post_id":"ciai95ro00016l0pgoekxx2ao","tag_id":"ciai95ro20019l0pggtetlwlv","_id":"ciai95ro2001cl0pgdescmjzh"},{"post_id":"ciai95ro3001dl0pgd3udfte0","tag_id":"ciai95ro10017l0pgezu1d9cx","_id":"ciai95ro4001el0pg8luymymy"},{"post_id":"ciai95ro3001dl0pgd3udfte0","tag_id":"ciai95ro10018l0pg501rr97c","_id":"ciai95ro4001fl0pg6s143u17"},{"post_id":"ciai95ro3001dl0pgd3udfte0","tag_id":"ciai95ro20019l0pggtetlwlv","_id":"ciai95ro4001gl0pgd077ee69"},{"post_id":"ciai95ro7001il0pguzhfnupt","tag_id":"ciai95ro8001jl0pgli9aitb6","_id":"ciai95ro9001kl0pgvwjllqsf"},{"post_id":"ciai95roa001ll0pgfms0ezlx","tag_id":"ciai95rn70005l0pgskkuvhbp","_id":"ciai95rob001ml0pgxm4kaaif"},{"post_id":"ciai95roa001ll0pgfms0ezlx","tag_id":"ciai95ro8001jl0pgli9aitb6","_id":"ciai95rob001nl0pgtv7oepwo"},{"post_id":"ciai95roa001ll0pgfms0ezlx","tag_id":"ciai95ro20019l0pggtetlwlv","_id":"ciai95roc001ol0pg8hgajxmj"},{"post_id":"ciai95roe001pl0pgh12c0t25","tag_id":"ciai95rn70005l0pgskkuvhbp","_id":"ciai95roe001ql0pg9x2583jq"},{"post_id":"ciai95rog001rl0pgu2niu33g","tag_id":"ciai95ro20019l0pggtetlwlv","_id":"ciai95roh001sl0pg20uhhcpj"},{"post_id":"ciai95roi001tl0pgxfsm9luc","tag_id":"ciai95ro20019l0pggtetlwlv","_id":"ciai95roj001vl0pgl4eqyzns"},{"post_id":"ciai95roi001tl0pgxfsm9luc","tag_id":"ciai95roj001ul0pghepkruhe","_id":"ciai95roj001wl0pghxr6wjtv"},{"post_id":"ciai95rok001xl0pgeptavpao","tag_id":"ciai95rn70005l0pgskkuvhbp","_id":"ciai95rol001yl0pgls95shie"},{"post_id":"ciai95rom001zl0pgusasteqg","tag_id":"ciai95rom0020l0pge6hk2gjj","_id":"ciai95rom0021l0pgsw4h0njz"},{"post_id":"ciai95ron0022l0pgvtjsx7ub","tag_id":"ciai95rom0020l0pge6hk2gjj","_id":"ciai95roo0023l0pgs3xaxrhi"},{"post_id":"ciai95rop0024l0pgxxlizvmw","tag_id":"ciai95ror0025l0pggigj9d5t","_id":"ciai95ror0026l0pgkthuysv2"},{"post_id":"ciai95rou0027l0pgutg2tl7h","tag_id":"ciai95rom0020l0pge6hk2gjj","_id":"ciai95rou0028l0pgcuqyxtwo"},{"post_id":"ciai95rou0027l0pgutg2tl7h","tag_id":"ciai95ror0025l0pggigj9d5t","_id":"ciai95rou0029l0pgny7d1faa"},{"post_id":"ciai95row002al0pgk44sxk6f","tag_id":"ciai95row002bl0pgd3cun8ma","_id":"ciai95rox002cl0pg5md6ftbf"},{"post_id":"ciai95rox002dl0pgcu247e82","tag_id":"ciai95rn70005l0pgskkuvhbp","_id":"ciai95roz002el0pgpj6bg2v4"},{"post_id":"ciai95rp0002fl0pg44hwyveh","tag_id":"ciai95rn70005l0pgskkuvhbp","_id":"ciai95rp1002gl0pg7v3rjuu7"},{"post_id":"ciai95rp3002hl0pgodble9um","tag_id":"ciai95rnh000jl0pglzqtr8zg","_id":"ciai95rp4002il0pgss6scz27"},{"post_id":"ciai95rp6002jl0pgwpvttxlc","tag_id":"ciai95rn70005l0pgskkuvhbp","_id":"ciai95rp6002kl0pgle278svm"},{"post_id":"ciai95rp8002ll0pgch7obr3d","tag_id":"ciai95rn70005l0pgskkuvhbp","_id":"ciai95rp9002ml0pgxcju3s4s"},{"post_id":"ciai95rpc002nl0pgvlyyavie","tag_id":"ciai95rnh000jl0pglzqtr8zg","_id":"ciai95rpd002ol0pgpn80ve4x"},{"post_id":"ciai95rpe002pl0pgiu4l8p0o","tag_id":"ciai95rn70005l0pgskkuvhbp","_id":"ciai95rpe002ql0pgogm4zanu"},{"post_id":"ciai95rpg002rl0pghks9fhuo","tag_id":"ciai95rn70005l0pgskkuvhbp","_id":"ciai95rpg002sl0pgvpbbvwj1"},{"post_id":"ciai95rph002tl0pgfdw6yt52","tag_id":"ciai95rn70005l0pgskkuvhbp","_id":"ciai95rph002ul0pgnzc704w1"},{"post_id":"ciai95rpi002vl0pg4xg6m74z","tag_id":"ciai95rnh000jl0pglzqtr8zg","_id":"ciai95rpj002yl0pg828huzf4"},{"post_id":"ciai95rpi002vl0pg4xg6m74z","tag_id":"ciai95rpj002wl0pgh25g65qt","_id":"ciai95rpk002zl0pgpak7y93q"},{"post_id":"ciai95rpi002vl0pg4xg6m74z","tag_id":"ciai95rpj002xl0pg07ekxutp","_id":"ciai95rpk0030l0pg1s0ot8k5"},{"post_id":"ciai95rpk0031l0pg26ylhicl","tag_id":"ciai95rn70005l0pgskkuvhbp","_id":"ciai95rpl0032l0pgc6azsy43"},{"post_id":"ciai95rpm0033l0pgvncx0ztm","tag_id":"ciai95rn70005l0pgskkuvhbp","_id":"ciai95rpm0034l0pgh61h7g5l"},{"post_id":"ciai95rpn0035l0pgpc09us6s","tag_id":"ciai95rn70005l0pgskkuvhbp","_id":"ciai95rpw0036l0pg547uxuv3"}],"Tag":[{"name":"ES6","_id":"ciai95rn50004l0pgq00yz11i"},{"name":"javascript","_id":"ciai95rn70005l0pgskkuvhbp"},{"name":"Babel","_id":"ciai95rn80006l0pgu7q0fzjr"},{"name":"閒聊","_id":"ciai95rnh000jl0pglzqtr8zg"},{"name":"Cordova","_id":"ciai95rnl000ml0pggjy4p0fj"},{"name":"Android","_id":"ciai95rnl000nl0pgpfw2wtzi"},{"name":"Chrome","_id":"ciai95rnl000ol0pgviz4zc4z"},{"name":"Windows Phone","_id":"ciai95rnq000vl0pgwr7sae1g"},{"name":"jQuery Mobile","_id":"ciai95rnt000zl0pgu8kh5tfh"},{"name":"Backbone","_id":"ciai95rnu0010l0pgpj3ec11c"},{"name":"WebStorm","_id":"ciai95ro10017l0pgezu1d9cx"},{"name":"SASS","_id":"ciai95ro10018l0pg501rr97c"},{"name":"CSS","_id":"ciai95ro20019l0pggtetlwlv"},{"name":"HTML5","_id":"ciai95ro8001jl0pgli9aitb6"},{"name":"LESS","_id":"ciai95roj001ul0pghepkruhe"},{"name":"Works","_id":"ciai95rom0020l0pge6hk2gjj"},{"name":"jQuery","_id":"ciai95ror0025l0pggigj9d5t"},{"name":".NET","_id":"ciai95row002bl0pgd3cun8ma"},{"name":"微軟","_id":"ciai95rpj002wl0pgh25g65qt"},{"name":"RWD","_id":"ciai95rpj002xl0pg07ekxutp"}]}}