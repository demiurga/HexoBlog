{"Asset":[{"_id":"themes\\athena\\source\\js\\script.js","path":"js/script.js","modified":false},{"_id":"themes\\athena\\source\\css\\style.styl","path":"css/style.styl","modified":false},{"_id":"themes\\athena\\source\\css\\fonts\\FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":false},{"_id":"themes\\athena\\source\\css\\fonts\\fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":false},{"_id":"themes\\athena\\source\\css\\fonts\\fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":false},{"_id":"themes\\athena\\source\\css\\fonts\\fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":false},{"_id":"themes\\athena\\source\\css\\fonts\\fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":false},{"_id":"themes\\athena\\source\\css\\images\\banner.jpg","path":"css/images/banner.jpg","modified":false},{"_id":"themes\\athena\\source\\fancybox\\fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes\\athena\\source\\fancybox\\blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes\\athena\\source\\fancybox\\fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes\\athena\\source\\fancybox\\fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes\\athena\\source\\fancybox\\fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes\\athena\\source\\fancybox\\fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes\\athena\\source\\fancybox\\jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes\\athena\\source\\fancybox\\jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":false},{"_id":"themes\\athena\\source\\fancybox\\jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes\\athena\\source\\fancybox\\helpers\\jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":false},{"_id":"themes\\athena\\source\\fancybox\\helpers\\jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":false},{"_id":"themes\\athena\\source\\fancybox\\helpers\\fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":false},{"_id":"themes\\athena\\source\\fancybox\\helpers\\jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":false},{"_id":"themes\\athena\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":false},{"_id":"themes\\athena\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":false},{"_id":"themes\\phase\\source\\fancybox\\blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes\\phase\\source\\fancybox\\fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes\\phase\\source\\fancybox\\fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes\\phase\\source\\fancybox\\jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes\\phase\\source\\fancybox\\fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes\\phase\\source\\js\\gallery.js","path":"js/gallery.js","modified":false},{"_id":"themes\\phase\\source\\fancybox\\jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes\\phase\\source\\js\\jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":false},{"_id":"themes\\phase\\source\\js\\phasebeam.js","path":"js/phasebeam.js","modified":false},{"_id":"themes\\phase\\source\\css\\style.styl","path":"css/style.styl","modified":false},{"_id":"themes\\phase\\source\\css\\font\\fontawesome-webfont.eot","path":"css/font/fontawesome-webfont.eot","modified":false},{"_id":"themes\\phase\\source\\css\\font\\fontawesome-webfont.svg","path":"css/font/fontawesome-webfont.svg","modified":false},{"_id":"themes\\phase\\source\\css\\font\\fontawesome-webfont.ttf","path":"css/font/fontawesome-webfont.ttf","modified":false},{"_id":"themes\\phase\\source\\css\\font\\fontawesome-webfont.woff","path":"css/font/fontawesome-webfont.woff","modified":false},{"_id":"themes\\phase\\source\\css\\images\\facebook.png","path":"css/images/facebook.png","modified":false},{"_id":"themes\\phase\\source\\css\\images\\github.png","path":"css/images/github.png","modified":false},{"_id":"themes\\phase\\source\\css\\images\\google.png","path":"css/images/google.png","modified":false},{"_id":"themes\\phase\\source\\css\\images\\rss.png","path":"css/images/rss.png","modified":false},{"_id":"themes\\phase\\source\\css\\images\\twitter.png","path":"css/images/twitter.png","modified":false}],"Cache":[{"_id":"scaffolds\\draft.md","mtime":1426864888072},{"_id":"scaffolds\\photo.md","mtime":1426864888078},{"_id":"scaffolds\\post.md","mtime":1426864888081},{"_id":"scaffolds\\page.md","mtime":1426864888075},{"_id":"source\\_posts\\2013-12-02-javascript-good-parts-ch2.md","mtime":1426864888102},{"_id":"source\\_posts\\2013-12-03-javascript-good-parts-ch3.md","mtime":1426864888105},{"_id":"source\\_posts\\2013-12-04-javascript-good-parts-ch4.md","mtime":1426864888108},{"_id":"source\\_posts\\2013-12-09-javascript-good-parts-ch4-9.md","mtime":1426864888114},{"_id":"source\\_posts\\2013-12-07-168754.md","mtime":1426864888111},{"_id":"source\\_posts\\2013-12-11-javascript-good-parts-ch4-11.md","mtime":1426864888117},{"_id":"source\\_posts\\2013-12-14-javascript-good-parts-ch5.md","mtime":1426864888120},{"_id":"source\\_posts\\2013-12-18-github-pages-octopress-on-windows.md","mtime":1426864888123},{"_id":"source\\_posts\\2013-12-18-javascript-good-parts-ch5-19.md","mtime":1426864888126},{"_id":"source\\_posts\\2013-12-19-javascript-good-parts-ch6.md","mtime":1426864888129},{"_id":"source\\_posts\\2013-12-24-168788.md","mtime":1426864888131},{"_id":"source\\_posts\\2013-12-24-hello-world.md","mtime":1426864888135},{"_id":"source\\_posts\\2013-12-24-moved-from-blogger-to-logdown.md","mtime":1426864888138},{"_id":"source\\_posts\\2013-12-24-note-javascriptthe-good-parts-bad-part-1.md","mtime":1426864888143},{"_id":"source\\_posts\\2013-12-31-note-javascriptthe-good-parts-bad-part-2.md","mtime":1426864888149},{"_id":"source\\_posts\\2014-01-01-notenet-npoi.md","mtime":1426864888152},{"_id":"source\\_posts\\2014-01-02-notesprototype-with-proto.md","mtime":1426864888154},{"_id":"source\\_posts\\2014-01-04-jquerydatepicker-republic-of-china.md","mtime":1426864888158},{"_id":"source\\_posts\\2014-01-11-experiencejquery-widget-factory.md","mtime":1426864888162},{"_id":"source\\_posts\\2014-01-11-output-on-top-of-the-picture-message-jquery-plugin-commentonphoto.md","mtime":1426864888165},{"_id":"source\\_posts\\2014-01-15--number-of-kaohsiung-mrt-station.md","mtime":1426864888168},{"_id":"source\\_posts\\2014-01-17-notes-on-loading-script.md","mtime":1426864888178},{"_id":"source\\_posts\\2014-01-23-experience-media-query-with-less.md","mtime":1426864888182},{"_id":"source\\_posts\\2014-01-23-note-css-media-query.md","mtime":1426864888186},{"_id":"source\\_posts\\2014-02-03-experience-image-beacon.md","mtime":1426864888189},{"_id":"source\\_posts\\2014-02-03-note-webclient-side-separation-of-concerns.md","mtime":1426864888193},{"_id":"source\\_posts\\2014-02-04-note-of-semantic-html.md","mtime":1426864888197},{"_id":"source\\_posts\\2014-02-10-note-flex-with-less.md","mtime":1426864888199},{"_id":"source\\_posts\\2014-03-08-note-in-webstorm-added-compass-syntax-tips.md","mtime":1426864888207},{"_id":"source\\_posts\\2014-03-08-note-sass-with-webstorm.md","mtime":1426864888422},{"_id":"source\\_posts\\2014-03-26-note-chrome-workspace-with-sass-and-compass.md","mtime":1426864888426},{"_id":"source\\_posts\\2014-04-30-note-cordova-with-jquery-mobile.md","mtime":1426864888430},{"_id":"source\\_posts\\2014-05-12-teaching-yql-for-ten-minutes-easy.md","mtime":1426864888433},{"_id":"source\\_posts\\2014-05-17-note-cordova-34-with-wp8-minesweeper-records.md","mtime":1426864888437},{"_id":"source\\_posts\\2014-05-26-note-cordova-trouble-shooting.md","mtime":1426864888441},{"_id":"source\\_posts\\2014-05-29-experience-debug-cordova-app-with-android-44-and-chrome.md","mtime":1426864888445},{"_id":"source\\_drafts\\draft1.md","mtime":1426864888084},{"_id":"themes\\athena\\Gruntfile.js","mtime":1424790090184},{"_id":"themes\\athena\\README.md","mtime":1424790090186},{"_id":"themes\\athena\\_config.yml","mtime":1424790090187},{"_id":"themes\\athena\\scripts\\fancybox.js","mtime":1424790090245},{"_id":"themes\\athena\\layout\\archive.ejs","mtime":1424790090232},{"_id":"themes\\athena\\layout\\category.ejs","mtime":1424790090234},{"_id":"themes\\athena\\layout\\index.ejs","mtime":1424790090235},{"_id":"themes\\athena\\layout\\layout.ejs","mtime":1424790090239},{"_id":"themes\\athena\\layout\\page.ejs","mtime":1424790090241},{"_id":"themes\\athena\\layout\\post.ejs","mtime":1424790090242},{"_id":"themes\\athena\\layout\\tag.ejs","mtime":1424790090243},{"_id":"themes\\athena\\layout\\_widget\\archive.ejs","mtime":1424790090226},{"_id":"themes\\athena\\layout\\_widget\\category.ejs","mtime":1424790090227},{"_id":"themes\\athena\\layout\\_widget\\recent_posts.ejs","mtime":1424790090229},{"_id":"themes\\athena\\layout\\_widget\\tag.ejs","mtime":1424790090230},{"_id":"themes\\athena\\layout\\_widget\\tagcloud.ejs","mtime":1424790090231},{"_id":"themes\\athena\\layout\\_partial\\after-footer.ejs","mtime":1424790090192},{"_id":"themes\\athena\\layout\\_partial\\archive-post.ejs","mtime":1424790090193},{"_id":"themes\\athena\\layout\\_partial\\archive.ejs","mtime":1424790090197},{"_id":"themes\\athena\\layout\\_partial\\article.ejs","mtime":1424790090201},{"_id":"themes\\athena\\layout\\_partial\\footer.ejs","mtime":1424790090203},{"_id":"themes\\athena\\layout\\_partial\\google-analytics.ejs","mtime":1424790090206},{"_id":"themes\\athena\\layout\\_partial\\head.ejs","mtime":1424790090209},{"_id":"themes\\athena\\layout\\_partial\\header.ejs","mtime":1424790090211},{"_id":"themes\\athena\\layout\\_partial\\page.ejs","mtime":1424790090213},{"_id":"themes\\athena\\layout\\_partial\\post\\date.ejs","mtime":1424790090217},{"_id":"themes\\athena\\layout\\_partial\\post\\category.ejs","mtime":1424790090215},{"_id":"themes\\athena\\layout\\_partial\\post\\gallery.ejs","mtime":1424790090219},{"_id":"themes\\athena\\layout\\_partial\\post\\nav.ejs","mtime":1424790090221},{"_id":"themes\\athena\\layout\\_partial\\post\\tag.ejs","mtime":1424790090223},{"_id":"themes\\athena\\layout\\_partial\\post\\title.ejs","mtime":1424790090224},{"_id":"themes\\athena\\source\\js\\script.js","mtime":1424790090314},{"_id":"themes\\athena\\source\\css\\_extend.styl","mtime":1424790090246},{"_id":"themes\\athena\\source\\css\\_variables.styl","mtime":1424790090262},{"_id":"themes\\athena\\source\\css\\style.styl","mtime":1424790090291},{"_id":"themes\\athena\\source\\css\\_partial\\archive.styl","mtime":1424790090248},{"_id":"themes\\athena\\source\\css\\_partial\\article.styl","mtime":1424790090250},{"_id":"themes\\athena\\source\\css\\_partial\\comment.styl","mtime":1424790090251},{"_id":"themes\\athena\\source\\css\\_partial\\footer.styl","mtime":1424790090253},{"_id":"themes\\athena\\source\\css\\_partial\\header.styl","mtime":1424790090254},{"_id":"themes\\athena\\source\\css\\_partial\\highlight.styl","mtime":1424790090256},{"_id":"themes\\athena\\source\\css\\_partial\\mobile.styl","mtime":1424790090257},{"_id":"themes\\athena\\source\\css\\_util\\mixin.styl","mtime":1424790090261},{"_id":"themes\\athena\\source\\css\\_util\\grid.styl","mtime":1424790090259},{"_id":"themes\\athena\\source\\css\\fonts\\FontAwesome.otf","mtime":1424790090265},{"_id":"themes\\athena\\source\\css\\fonts\\fontawesome-webfont.eot","mtime":1424790090274},{"_id":"themes\\athena\\source\\css\\fonts\\fontawesome-webfont.svg","mtime":1424790090280},{"_id":"themes\\athena\\source\\css\\fonts\\fontawesome-webfont.ttf","mtime":1424790090283},{"_id":"themes\\athena\\source\\css\\fonts\\fontawesome-webfont.woff","mtime":1424790090286},{"_id":"themes\\athena\\source\\css\\images\\banner.jpg","mtime":1424790090289},{"_id":"themes\\athena\\source\\fancybox\\fancybox_loading.gif","mtime":1424790090292},{"_id":"themes\\athena\\source\\fancybox\\blank.gif","mtime":1424790090291},{"_id":"themes\\athena\\source\\fancybox\\fancybox_loading@2x.gif","mtime":1424790090293},{"_id":"themes\\athena\\source\\fancybox\\fancybox_overlay.png","mtime":1424790090293},{"_id":"themes\\athena\\source\\fancybox\\fancybox_sprite.png","mtime":1424790090293},{"_id":"themes\\athena\\source\\fancybox\\fancybox_sprite@2x.png","mtime":1424790090294},{"_id":"themes\\athena\\source\\fancybox\\jquery.fancybox.css","mtime":1424790090299},{"_id":"themes\\athena\\source\\fancybox\\jquery.fancybox.js","mtime":1424790090305},{"_id":"themes\\athena\\source\\fancybox\\jquery.fancybox.pack.js","mtime":1424790090311},{"_id":"themes\\athena\\source\\fancybox\\helpers\\jquery.fancybox-buttons.css","mtime":1424790090295},{"_id":"themes\\athena\\source\\fancybox\\helpers\\jquery.fancybox-buttons.js","mtime":1424790090296},{"_id":"themes\\athena\\source\\fancybox\\helpers\\fancybox_buttons.png","mtime":1424790090295},{"_id":"themes\\athena\\source\\fancybox\\helpers\\jquery.fancybox-media.js","mtime":1424790090296},{"_id":"themes\\athena\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.css","mtime":1424790090297},{"_id":"themes\\athena\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.js","mtime":1424790090297},{"_id":"source\\_posts\\2015-02-26-move-from-logdown-to-hexo.md","mtime":1426864888447},{"_id":"source\\_posts\\2015-03-15-learn-es6-with-babel.md","mtime":1426864888455},{"_id":"source\\_drafts\\learning-es6-with-babel-Class.md","mtime":1426864888087},{"_id":"source\\_posts\\2015-03-20-learning-es6-with-babel-const.md","mtime":1426865352589},{"_id":"source\\_posts\\2015-03-20-learning-es6-with-babel-let.md","mtime":1426865340290},{"_id":"themes\\phase\\LICENSE","mtime":1426865218200},{"_id":"themes\\phase\\README.md","mtime":1426865218203},{"_id":"themes\\phase\\_config.yml","mtime":1426865218206},{"_id":"themes\\phase\\languages\\default.yml","mtime":1426865218209},{"_id":"themes\\phase\\languages\\zh-TW.yml","mtime":1426865218211},{"_id":"themes\\phase\\layout\\archive.ejs","mtime":1426865218306},{"_id":"themes\\phase\\layout\\category.ejs","mtime":1426865218309},{"_id":"themes\\phase\\layout\\index.ejs","mtime":1426865218314},{"_id":"themes\\phase\\layout\\layout.ejs","mtime":1426865218318},{"_id":"themes\\phase\\layout\\page.ejs","mtime":1426865218321},{"_id":"themes\\phase\\layout\\post.ejs","mtime":1426865218322},{"_id":"themes\\phase\\layout\\tag.ejs","mtime":1426865218323},{"_id":"themes\\phase\\layout\\_partial\\after_footer.ejs","mtime":1426865218222},{"_id":"themes\\phase\\layout\\_partial\\archive.ejs","mtime":1426865218236},{"_id":"themes\\phase\\layout\\_partial\\comment.ejs","mtime":1426865218245},{"_id":"themes\\phase\\layout\\_partial\\article.ejs","mtime":1426865218241},{"_id":"themes\\phase\\layout\\_partial\\google_analytics.ejs","mtime":1426865218254},{"_id":"themes\\phase\\layout\\_partial\\footer.ejs","mtime":1426865218248},{"_id":"themes\\phase\\layout\\_partial\\head.ejs","mtime":1426865218263},{"_id":"themes\\phase\\layout\\_partial\\header.ejs","mtime":1426865218266},{"_id":"themes\\phase\\layout\\_partial\\pagination.ejs","mtime":1426865218269},{"_id":"themes\\phase\\layout\\_partial\\phasebeam.ejs","mtime":1426865218272},{"_id":"themes\\phase\\layout\\_partial\\post\\date.ejs","mtime":1426865218281},{"_id":"themes\\phase\\layout\\_partial\\post\\category.ejs","mtime":1426865218277},{"_id":"themes\\phase\\layout\\_partial\\post\\gallery.ejs","mtime":1426865218286},{"_id":"themes\\phase\\layout\\_partial\\post\\share.ejs","mtime":1426865218291},{"_id":"themes\\phase\\layout\\_partial\\post\\tag.ejs","mtime":1426865218295},{"_id":"themes\\phase\\layout\\_partial\\post\\taxonomy.ejs","mtime":1426865218300},{"_id":"themes\\phase\\source\\fancybox\\blank.gif","mtime":1426865218370},{"_id":"themes\\phase\\layout\\_partial\\post\\title.ejs","mtime":1426865218303},{"_id":"themes\\phase\\source\\fancybox\\fancybox_loading.gif","mtime":1426865218371},{"_id":"themes\\phase\\source\\fancybox\\fancybox_overlay.png","mtime":1426865218371},{"_id":"themes\\phase\\source\\fancybox\\jquery.fancybox.css","mtime":1426865218374},{"_id":"themes\\phase\\source\\fancybox\\fancybox_sprite.png","mtime":1426865218372},{"_id":"themes\\phase\\source\\js\\gallery.js","mtime":1426865218385},{"_id":"themes\\phase\\source\\fancybox\\jquery.fancybox.pack.js","mtime":1426865218381},{"_id":"themes\\phase\\source\\js\\jquery.imagesloaded.min.js","mtime":1426865218387},{"_id":"themes\\phase\\source\\js\\phasebeam.js","mtime":1426865218390},{"_id":"themes\\phase\\source\\css\\_base\\layout.styl","mtime":1426865218325},{"_id":"themes\\phase\\source\\css\\style.styl","mtime":1426865218370},{"_id":"themes\\phase\\source\\css\\_base\\variable.styl","mtime":1426865218327},{"_id":"themes\\phase\\source\\css\\_base\\utils.styl","mtime":1426865218326},{"_id":"themes\\phase\\source\\css\\_partial\\archive.styl","mtime":1426865218330},{"_id":"themes\\phase\\source\\css\\_partial\\article.styl","mtime":1426865218332},{"_id":"themes\\phase\\source\\css\\_partial\\footer.styl","mtime":1426865218335},{"_id":"themes\\phase\\source\\css\\_partial\\comment.styl","mtime":1426865218333},{"_id":"themes\\phase\\source\\css\\_partial\\header.styl","mtime":1426865218337},{"_id":"themes\\phase\\source\\css\\_partial\\pagination.styl","mtime":1426865218339},{"_id":"themes\\phase\\source\\css\\_partial\\phasebeam.styl","mtime":1426865218341},{"_id":"themes\\phase\\source\\css\\_partial\\syntax.styl","mtime":1426865218342},{"_id":"themes\\phase\\source\\css\\font\\fontawesome-webfont.eot","mtime":1426865218352},{"_id":"themes\\phase\\source\\css\\font\\fontawesome-webfont.svg","mtime":1426865218359},{"_id":"themes\\phase\\source\\css\\font\\fontawesome-webfont.ttf","mtime":1426865218362},{"_id":"themes\\phase\\source\\css\\font\\fontawesome-webfont.woff","mtime":1426865218365},{"_id":"themes\\phase\\source\\css\\images\\facebook.png","mtime":1426865218366},{"_id":"themes\\phase\\source\\css\\images\\github.png","mtime":1426865218366},{"_id":"themes\\phase\\source\\css\\images\\google.png","mtime":1426865218367},{"_id":"themes\\phase\\source\\css\\images\\rss.png","mtime":1426865218368},{"_id":"themes\\phase\\source\\css\\images\\twitter.png","mtime":1426865218368}],"Category":[{"name":"javascript","_id":"so3gs2i08i5k4jkz","posts":["1144z74g157wopou","tc3esht11qdnl4a7","opmyg6zipehckgi5","pu88vjvqq8ghjsy5","6m6h9kiry7j2ezc2","ax9icxwfwg5jk347","za69hzf6dv15d855","6f6b8mg5wr136ds9","konwupb4nkd8rzo3","h7w63ehdqbeg1b4l","ek1yqwssg6j2681j"]},{"name":"筆記","parent":"so3gs2i08i5k4jkz","_id":"ydzfc7kx1nfohn7b","posts":["1144z74g157wopou","tc3esht11qdnl4a7","opmyg6zipehckgi5","pu88vjvqq8ghjsy5","6m6h9kiry7j2ezc2","ax9icxwfwg5jk347","za69hzf6dv15d855","6f6b8mg5wr136ds9","konwupb4nkd8rzo3","h7w63ehdqbeg1b4l","ek1yqwssg6j2681j"]},{"name":"閒聊","_id":"g7mvcwv6r8qaohat","posts":["fmzmxqfnu7vd68l7"]},{"name":"微軟","parent":"g7mvcwv6r8qaohat","_id":"jo7rfrm5ey2b1ei6","posts":["fmzmxqfnu7vd68l7"]},{"name":"RWD","parent":"jo7rfrm5ey2b1ei6","_id":"3ej9zbbwjjplwsal","posts":["fmzmxqfnu7vd68l7"]},{"name":"github","_id":"ou05itiowaww24bo","posts":["owx89otmt4kzaq4o"]},{"name":"Octopress","parent":"ou05itiowaww24bo","_id":"8jn4u049v4rg56f9","posts":["owx89otmt4kzaq4o"]},{"name":"logdown","_id":"hi8shbu1vjbpjxjs","posts":["wfjggdedu9u2b7yu"]},{"name":"閒聊","parent":"hi8shbu1vjbpjxjs","_id":"8nevzhc4aj7yh4fy","posts":["wfjggdedu9u2b7yu"]},{"name":".Net","_id":"ge85mj4f5z2ysdut","posts":["qnlcg5zmnlsptyud"]},{"name":"筆記","parent":"ge85mj4f5z2ysdut","_id":"6wj2gia5rzvj6lnb","posts":["qnlcg5zmnlsptyud"]}],"Page":[],"Post":[{"layout":"post","title":"[筆記] Javascript : The Good Parts - Ch.2 文法","date":1385946720000,"comments":true,"categories":["so3gs2i08i5k4jkz","ydzfc7kx1nfohn7b"],"content":"<p>此篇文章位於<a href=\"http://apolkingg8.blogspot.com/\" target=\"_blank\" rel=\"external\">舊的Blogger</a>，因為轉移過程中有格式缺漏，請<a href=\"http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch2.html\" target=\"_blank\" rel=\"external\">點此</a>觀看原文．</p>\n","source":"_posts/2013-12-02-javascript-good-parts-ch2.md","raw":"---\nlayout: post\ntitle: '[筆記] Javascript : The Good Parts - Ch.2 文法'\ndate: 2013-12-02 09:12\ncomments: true\ncategories: [javascript, 筆記]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch2.html)觀看原文．","slug":"javascript-good-parts-ch2","updated":1426864888102,"excerpt":"","_id":"1144z74g157wopou","tags":[],"photos":[],"link":""},{"layout":"post","title":"[閒聊] 微軟RWD研討會高雄場","date":1386377220000,"comments":true,"categories":["g7mvcwv6r8qaohat","jo7rfrm5ey2b1ei6","3ej9zbbwjjplwsal"],"content":"<p>此篇文章位於<a href=\"http://apolkingg8.blogspot.com/\" target=\"_blank\" rel=\"external\">舊的Blogger</a>，因為轉移過程中有格式缺漏，請<a href=\"http://apolkingg8.blogspot.com/2013/12/rwd.html\" target=\"_blank\" rel=\"external\">點此</a>觀看原文．</p>\n","source":"_posts/2013-12-07-168754.md","raw":"---\nlayout: post\ntitle: '[閒聊] 微軟RWD研討會高雄場'\ndate: 2013-12-07 08:47\ncomments: true\ncategories: [閒聊, 微軟, RWD]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/rwd.html)觀看原文．","slug":"168754","updated":1426864888111,"excerpt":"","_id":"fmzmxqfnu7vd68l7","tags":[],"photos":[],"link":""},{"layout":"post","title":"[筆記] Javascript : The Good Parts - Ch.3 物件","date":1386033420000,"comments":true,"categories":["so3gs2i08i5k4jkz","ydzfc7kx1nfohn7b"],"content":"<p>此篇文章位於<a href=\"http://apolkingg8.blogspot.com/\" target=\"_blank\" rel=\"external\">舊的Blogger</a>，因為轉移過程中有格式缺漏，請<a href=\"http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch3.html\" target=\"_blank\" rel=\"external\">點此</a>觀看原文．</p>\n","source":"_posts/2013-12-03-javascript-good-parts-ch3.md","raw":"---\nlayout: post\ntitle: '[筆記] Javascript : The Good Parts - Ch.3 物件'\ndate: 2013-12-03 09:17\ncomments: true\ncategories: [javascript, 筆記]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch3.html)觀看原文．","slug":"javascript-good-parts-ch3","updated":1426864888105,"excerpt":"","_id":"tc3esht11qdnl4a7","tags":[],"photos":[],"link":""},{"layout":"post","title":"[筆記] Javascript : The Good Parts - Ch.4 函式 (一)","date":1386122520000,"comments":true,"categories":["so3gs2i08i5k4jkz","ydzfc7kx1nfohn7b"],"content":"<p>此篇文章位於<a href=\"http://apolkingg8.blogspot.com/\" target=\"_blank\" rel=\"external\">舊的Blogger</a>，因為轉移過程中有格式缺漏，請<a href=\"http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch4.html\" target=\"_blank\" rel=\"external\">點此</a>觀看原文．</p>\n","source":"_posts/2013-12-04-javascript-good-parts-ch4.md","raw":"---\nlayout: post\ntitle: '[筆記] Javascript : The Good Parts - Ch.4 函式 (一)'\ndate: 2013-12-04 10:02\ncomments: true\ncategories: [javascript, 筆記]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch4.html)觀看原文．","slug":"javascript-good-parts-ch4","updated":1426864888108,"excerpt":"","_id":"opmyg6zipehckgi5","tags":[],"photos":[],"link":""},{"layout":"post","title":"[筆記] Javascript : The Good Parts - Ch.4 函式 (二)","date":1386559080000,"comments":true,"categories":["so3gs2i08i5k4jkz","ydzfc7kx1nfohn7b"],"content":"<p>此篇文章位於<a href=\"http://apolkingg8.blogspot.com/\" target=\"_blank\" rel=\"external\">舊的Blogger</a>，因為轉移過程中有格式缺漏，請<a href=\"http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch4_9.html\" target=\"_blank\" rel=\"external\">點此</a>觀看原文．</p>\n","source":"_posts/2013-12-09-javascript-good-parts-ch4-9.md","raw":"---\nlayout: post\ntitle: '[筆記] Javascript : The Good Parts - Ch.4 函式 (二)'\ndate: 2013-12-09 11:18\ncomments: true\ncategories: [javascript, 筆記]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch4_9.html)觀看原文．","slug":"javascript-good-parts-ch4-9","updated":1426864888114,"excerpt":"","_id":"pu88vjvqq8ghjsy5","tags":[],"photos":[],"link":""},{"layout":"post","title":"[筆記] Javascript : The Good Parts - Ch.4 函式 (三)","date":1386724860000,"comments":true,"categories":["so3gs2i08i5k4jkz","ydzfc7kx1nfohn7b"],"content":"<p>此篇文章位於<a href=\"http://apolkingg8.blogspot.com/\" target=\"_blank\" rel=\"external\">舊的Blogger</a>，因為轉移過程中有格式缺漏，請<a href=\"http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch4_11.html\" target=\"_blank\" rel=\"external\">點此</a>觀看原文．</p>\n","source":"_posts/2013-12-11-javascript-good-parts-ch4-11.md","raw":"---\nlayout: post\ntitle: '[筆記] Javascript : The Good Parts - Ch.4 函式 (三)'\ndate: 2013-12-11 09:21\ncomments: true\ncategories: [javascript, 筆記]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch4_11.html)觀看原文．","slug":"javascript-good-parts-ch4-11","updated":1426864888117,"excerpt":"","_id":"6m6h9kiry7j2ezc2","tags":[],"photos":[],"link":""},{"layout":"post","title":"[筆記] Javascript : The Good Parts - Ch.5 繼承 (一)","date":1386977220000,"comments":true,"categories":["so3gs2i08i5k4jkz","ydzfc7kx1nfohn7b"],"content":"<p>此篇文章位於<a href=\"http://apolkingg8.blogspot.com/\" target=\"_blank\" rel=\"external\">舊的Blogger</a>，因為轉移過程中有格式缺漏，請<a href=\"http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch5.html\" target=\"_blank\" rel=\"external\">點此</a>觀看原文．</p>\n","source":"_posts/2013-12-14-javascript-good-parts-ch5.md","raw":"---\nlayout: post\ntitle: '[筆記] Javascript : The Good Parts - Ch.5 繼承 (一)'\ndate: 2013-12-14 07:27\ncomments: true\ncategories: [javascript, 筆記]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch5.html)觀看原文．","slug":"javascript-good-parts-ch5","updated":1426864888120,"excerpt":"","_id":"ax9icxwfwg5jk347","tags":[],"photos":[],"link":""},{"layout":"post","title":"[筆記] Javascript : The Good Parts - Ch.5 繼承 (二)","date":1387356480000,"comments":true,"categories":["so3gs2i08i5k4jkz","ydzfc7kx1nfohn7b"],"content":"<p>此篇文章位於<a href=\"http://apolkingg8.blogspot.com/\" target=\"_blank\" rel=\"external\">舊的Blogger</a>，因為轉移過程中有格式缺漏，請<a href=\"http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch5_19.html\" target=\"_blank\" rel=\"external\">點此</a>觀看原文．</p>\n","source":"_posts/2013-12-18-javascript-good-parts-ch5-19.md","raw":"---\nlayout: post\ntitle: '[筆記] Javascript : The Good Parts - Ch.5 繼承 (二)'\ndate: 2013-12-18 16:48\ncomments: true\ncategories: [javascript, 筆記]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch5_19.html)觀看原文．","slug":"javascript-good-parts-ch5-19","updated":1426864888126,"excerpt":"","_id":"za69hzf6dv15d855","tags":[],"photos":[],"link":""},{"layout":"post","title":"[心得] GitHub Pages + Octopress on Windows初體驗","date":1387327620000,"comments":true,"categories":["ou05itiowaww24bo","8jn4u049v4rg56f9"],"content":"<p>此篇文章位於<a href=\"http://apolkingg8.blogspot.com/\" target=\"_blank\" rel=\"external\">舊的Blogger</a>，因為轉移過程中有格式缺漏，請<a href=\"http://apolkingg8.blogspot.com/2013/12/github-pages-octopress-on-windows.html\" target=\"_blank\" rel=\"external\">點此</a>觀看原文．</p>\n","source":"_posts/2013-12-18-github-pages-octopress-on-windows.md","raw":"---\nlayout: post\ntitle: '[心得] GitHub Pages + Octopress on Windows初體驗'\ndate: 2013-12-18 08:47\ncomments: true\ncategories: [github, Octopress]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/github-pages-octopress-on-windows.html)觀看原文．","slug":"github-pages-octopress-on-windows","updated":1426864888123,"excerpt":"","_id":"owx89otmt4kzaq4o","tags":[],"photos":[],"link":""},{"layout":"post","title":"[筆記] Javascript : The Good Parts - Ch.9 風格","date":1387845720000,"comments":true,"categories":["so3gs2i08i5k4jkz","ydzfc7kx1nfohn7b"],"content":"","source":"_posts/2013-12-24-168788.md","raw":"---\nlayout: post\ntitle: '[筆記] Javascript : The Good Parts - Ch.9 風格'\ndate: 2013-12-24 08:42\ncomments: true\ncategories: [javascript, 筆記]\n---\n","slug":"168788","updated":1426864888131,"excerpt":"","_id":"6f6b8mg5wr136ds9","tags":[],"photos":[],"link":""},{"layout":"post","title":"[筆記] Javascript : The Good Parts - Ch.6 陣列","date":1387440960000,"comments":true,"categories":["so3gs2i08i5k4jkz","ydzfc7kx1nfohn7b"],"content":"<p>此篇文章位於<a href=\"http://apolkingg8.blogspot.com/\" target=\"_blank\" rel=\"external\">舊的Blogger</a>，因為轉移過程中有格式缺漏，請<a href=\"http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch6.html\" target=\"_blank\" rel=\"external\">點此</a>觀看原文．</p>\n","source":"_posts/2013-12-19-javascript-good-parts-ch6.md","raw":"---\nlayout: post\ntitle: '[筆記] Javascript : The Good Parts - Ch.6 陣列'\ndate: 2013-12-19 16:16\ncomments: true\ncategories: [javascript, 筆記]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch6.html)觀看原文．","slug":"javascript-good-parts-ch6","updated":1426864888129,"excerpt":"","_id":"konwupb4nkd8rzo3","tags":[],"photos":[],"link":""},{"layout":"post","title":"Hello World","date":1387828740000,"comments":true,"categories":[],"content":"<p>Hi, This a <strong>demo</strong> post of <a href=\"http://logdown.com\" target=\"_blank\" rel=\"external\">Logdown</a>. </p>\n<p>Logdown use Markdown as main syntax, you can find more example by reading this <a href=\"http://en.wikipedia.org/wiki/Markdown\" target=\"_blank\" rel=\"external\">document on Wikipedia</a></p>\n<p>Logdown also support drag &amp; drop image uploading. The picture syntax is like this:</p>\n<p><img src=\"http://logdown.com/images/logo.png\" alt=\"\"></p>\n<h2 id=\"Bloging_with_code_snippet:\">Bloging with code snippet:</h2>\n<p><code>inline code</code></p>\n<h3 id=\"Plain_Code\">Plain Code</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">puts</span> <span class=\"string\">\"Hello World!\"</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"Code_with_Language\">Code with Language</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello World!\"</span>);</div></pre></td></tr></table></figure>\n\n<h3 id=\"Code_with_Title\">Code with Title</h3>\n<figure class=\"highlight ruby\"><figcaption><span>hello_world.rb</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">puts <span class=\"string\">\"Hello World!\"</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"MathJax_Example\">MathJax Example</h2>\n<h3 id=\"Mathjax\">Mathjax</h3>\n<figure class=\"highlight mathjax\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = <span class=\"command\">\\dfrac</span><span class=\"special\">{</span>-b <span class=\"command\">\\pm</span> <span class=\"command\">\\sqrt</span><span class=\"special\">{</span>b^2 - 4ac<span class=\"special\">}</span><span class=\"special\">}</span><span class=\"special\">{</span>2a<span class=\"special\">}</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"Inline_Mathjax\">Inline Mathjax</h3>\n<p>The answser is <code>$a^2 + b^2 = c^2$</code>.</p>\n<h2 id=\"Table_Example\">Table Example</h2>\n<table>\n<thead>\n<tr>\n<th>Tables</th>\n<th style=\"text-align:center\">Are</th>\n<th style=\"text-align:right\">Cool</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>col 1</td>\n<td style=\"text-align:center\">Hello</td>\n<td style=\"text-align:right\">$1600</td>\n</tr>\n<tr>\n<td>col 2</td>\n<td style=\"text-align:center\">Hello</td>\n<td style=\"text-align:right\">$12</td>\n</tr>\n<tr>\n<td>col 3</td>\n<td style=\"text-align:center\">Hello</td>\n<td style=\"text-align:right\">$1</td>\n</tr>\n</tbody>\n</table>\n","source":"_posts/2013-12-24-hello-world.md","raw":"---\nlayout: post\ntitle: 'Hello World'\ndate: 2013-12-24 03:59\ncomments: true\ncategories: \n---\nHi, This a **demo** post of [Logdown](http://logdown.com). \n\nLogdown use Markdown as main syntax, you can find more example by reading this [document on Wikipedia](http://en.wikipedia.org/wiki/Markdown)\n\nLogdown also support drag & drop image uploading. The picture syntax is like this:\n\n![](http://logdown.com/images/logo.png)\n\n## Bloging with code snippet:\n\n`inline code`\n\n### Plain Code\n\n```\nputs \"Hello World!\"\n```\n\n### Code with Language\n\n```javascript\nconsole.log(\"Hello World!\");\n```\n\n### Code with Title\n\n```ruby hello_world.rb\nputs \"Hello World!\"\n```\n\n\n## MathJax Example\n\n### Mathjax\n\n```mathjax\nx = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}\n```\n\n### Inline Mathjax\n\nThe answser is `$a^2 + b^2 = c^2$`.\n\n## Table Example\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 1         | Hello         | $1600 |\n| col 2         | Hello         |   $12 |\n| col 3         | Hello         |    $1 |\n","slug":"hello-world","updated":1426864888135,"excerpt":"","_id":"01yx4fld0v9ucun2","tags":[],"photos":[],"link":""},{"layout":"post","title":"[閒聊] 從Blogger搬到Logdown","date":1387831560000,"comments":true,"categories":["hi8shbu1vjbpjxjs","8nevzhc4aj7yh4fy"],"content":"<p>偶然在社群看到這個東西，試用過後有種 <strong>“寶貝~我終於找到你了”</strong> 的感覺XD<br>可以用Markdown寫文章，又不必像Octorpess萬事手動，當下就決定把Blogger搬過來</p>\n<p>不過短暫的試用後，發現還是有些缺點，像是: </p>\n<pre><code><span class=\"bullet\">1. </span>以前從Chrome Console複製到Blogger會帶Style（應該說從任何地方都會），現在少了這個，只好把結果打在註解裡．\n<span class=\"bullet\">2. </span>然後之前的舊文轉過來也會有些走樣（很多style都不見了），所以要看原本的樣子可能要回到[<span class=\"link_label\">Blogger</span>](<span class=\"link_url\">http://apolkingg8.blogspot.com</span>)那邊看．\n<span class=\"bullet\">3. </span>社群資源有差（theme很少，bug修比較慢），畢竟這是要用時間累積的\n</code></pre><p>整體來說，還蠻喜歡這個平台的（其實是單純喜歡Markdown吧XD），如果這幾天沒發現什麼大問題的話，以後應該就會以這邊為主．</p>\n","source":"_posts/2013-12-24-moved-from-blogger-to-logdown.md","raw":"---\nlayout: post\ntitle: '[閒聊] 從Blogger搬到Logdown'\ndate: 2013-12-24 04:46\ncomments: true\ncategories: [logdown, 閒聊]\n---\n\n偶然在社群看到這個東西，試用過後有種 **\"寶貝~我終於找到你了\"** 的感覺XD\n可以用Markdown寫文章，又不必像Octorpess萬事手動，當下就決定把Blogger搬過來\n\n不過短暫的試用後，發現還是有些缺點，像是: \n    1. 以前從Chrome Console複製到Blogger會帶Style（應該說從任何地方都會），現在少了這個，只好把結果打在註解裡．\n    2. 然後之前的舊文轉過來也會有些走樣（很多style都不見了），所以要看原本的樣子可能要回到[Blogger](http://apolkingg8.blogspot.com)那邊看．\n    3. 社群資源有差（theme很少，bug修比較慢），畢竟這是要用時間累積的\n\n整體來說，還蠻喜歡這個平台的（其實是單純喜歡Markdown吧XD），如果這幾天沒發現什麼大問題的話，以後應該就會以這邊為主．\n\n\n","slug":"moved-from-blogger-to-logdown","updated":1426864888138,"excerpt":"","_id":"wfjggdedu9u2b7yu","tags":[],"photos":[],"link":""},{"layout":"post","title":"[筆記] Javascript : The Good Parts - 糟糕的部分","date":1387845840000,"comments":true,"categories":["so3gs2i08i5k4jkz","ydzfc7kx1nfohn7b"],"content":"<h2 id=\"全域變數\">全域變數</h2>\n<p>javascript最糟糕的一項特性，就是他對於全域變數的依賴。有三種可以宣告全域變數的方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">'value'</span>; <span class=\"comment\">// 直接在最外層宣告</span></div><div class=\"line\"><span class=\"built_in\">window</span>.foo = <span class=\"string\">'value'</span> <span class=\"comment\">// window物件是所有全域變數的容器</span></div><div class=\"line\">foo = <span class=\"string\">'value'</span> <span class=\"comment\">// 不經宣告就使用變數，稱為implied global</span></div></pre></td></tr></table></figure>\n\n<p>第三種原本的用意是對於初學者的體貼（蛤？），但這反而容易造成很難被找出來的bug。</p>\n<h2 id=\"範圍\">範圍</h2>\n<p>如同前面提到的，javascript沒有block scope，只有function scope，而且裡面還有變數抬升的特性。所以最好 <strong>在每個區塊起始的地方宣告完區塊內所有變數</strong> 。</p>\n<h2 id=\"分號的安插\">分號的安插</h2>\n<p>javascript有個試圖糾正錯誤的機制，它會自動幫你安插分號。不過這個機制有時候會造成更多的麻煩：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">return</span></div><div class=\"line\">{</div><div class=\"line\">\tstatus: <span class=\"literal\">true</span>;</div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<p>上面的程式看起來很正常，不過javascript會認為你<code>return</code>後面忘了加上分號而貼心的幫你補上，於是就變成這樣：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">return</span>; <span class=\"comment\">// undefind</span></div><div class=\"line\">{</div><div class=\"line\">\tstatus: <span class=\"literal\">true</span>;</div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<p>所以撰寫javascript時應該採用K&amp;R風格，把<code>{</code>放在句尾，可以避免類似的悲劇發生。<br><a id=\"more\"></a></p>\n<h2 id=\"保留字\">保留字</h2>\n<p>作者認為有太多的保留字沒有被使用，造成命名上的麻煩（保留字不能用在變數或特性名稱）</p>\n<blockquote>\n<p>不過事實上，有一些是後來實作ECMA5有用到的</p>\n</blockquote>\n<h2 id=\"Unicode\">Unicode</h2>\n<p>在設計javascript的年代，Unicode最多只到65536個字元，但現在已經突破百萬。<br>javascript的字元是16位元，超出的部分以一對字元表示。Unicode把 <strong>字元對</strong> 當成一個字元，但對javascript來說是兩個。</p>\n<h2 id=\"typeof\">typeof</h2>\n<p>typeof有許多非預期的狀況，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span> <span class=\"comment\">// object</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>] <span class=\"comment\">// object</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> /a/ <span class=\"comment\">// 各瀏覽器實作不一致，可能是object或function</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"parseInt\">parseInt</h2>\n<p><code>parseInt</code>是個把字串轉換為整數的函式，他會在遇到非數字字元的時候立即停止，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'16 say hi~ 17'</span>); <span class=\"comment\">// 16</span></div></pre></td></tr></table></figure>\n\n<p>這函式還有另一個麻煩，如果字串的第一個字元是0，字串會依照八進位制做轉換，所以最好在每次使用時都帶入進位參數：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'077'</span>); <span class=\"comment\">// 63</span></div><div class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'077'</span>, <span class=\"number\">10</span>); <span class=\"comment\">// 77</span></div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>這點似乎在新版的Browser有fix過，沒有帶入參數就默認10進位</p>\n</blockquote>\n<h2 id=\"+運算子\">+運算子</h2>\n<p>如果你希望 + 運算子是sum的作用，務必要檢查兩邊是不是”都是”數字。</p>\n<h2 id=\"浮點數\">浮點數</h2>\n<p>這是最常被回報的bug。javascript採用<a href=\"http://zh.wikipedia.org/wiki/IEEE_754\" target=\"_blank\" rel=\"external\">IEEE754標準</a>，導致他在處理十進位分數的時候會發生一些問題，例如：</p>\n<figure class=\"highlight JS\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>); <span class=\"comment\">// 0.30000000000000004</span></div></pre></td></tr></table></figure>\n\n<p>幸好，在整數運算的部分是正確的，所以可以先換成整數做運算在除回來。</p>\n<h2 id=\"NaN\">NaN</h2>\n<p>這也是個奇妙的東西，它的意義是＂非數值(not an number)＂，不過…</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">NaN</span> === <span class=\"string\">'number'</span>; <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n\n<p>還有更奇妙的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span> <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"literal\">NaN</span> !== <span class=\"literal\">NaN</span> <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n\n<p>這哪招阿…<br>幸好javascript有提供一個檢查<code>NaN</code>的函式：</p>\n<figure class=\"highlight JS\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>); <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"number\">0</span>); <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"string\">'hi~'</span>); <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"string\">'0'</span>); <span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>這方法有點兩光阿…要檢查NaN還是得判斷兩次才行Orz</p>\n</blockquote>\n<p>還有一個<code>isFinite</code>函式，可以判斷＂值是否可以轉成數值＂，他會拒絕<code>NaN</code>跟<code>Infinity</code>。如果要確認值＂是不是數值(<code>number</code>)＂的話，需要自己加工：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> isNumber = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(value)</span></span>{</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> value === <span class=\"string\">'number'</span> && <span class=\"built_in\">isFinite</span>(value);</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h2 id=\"偽陣列\">偽陣列</h2>\n<p>前面提過，javascript沒有真正的陣列，而是基於物件的偽陣列。跟真正的陣列相比，他的效能較差，但較容易使用。也因為這個特性的關係，<code>typeof</code>運算子沒有辦法區分物件跟陣列。為了判斷是否為陣列，需要把他的Constructor列入考慮：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(myValue && <span class=\"keyword\">typeof</span> myValue === <span class=\"string\">'object'</span> </div><div class=\"line\">\t\t&& myValue.constructor === <span class=\"built_in\">Array</span>){</div><div class=\"line\">  <span class=\"comment\">//muValue is Array!</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>如果陣列在不同的frame或window下建立，上面的測試可能給出false, 可以改成下面的形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(myValue && <span class=\"keyword\">typeof</span> myValue === <span class=\"string\">'object'</span> </div><div class=\"line\">    && <span class=\"keyword\">typeof</span> myValue.length === <span class=\"string\">'number'</span></div><div class=\"line\">    && !(myValue.propertyIsEnumberable(<span class=\"string\">'length'</span>))){</div><div class=\"line\">  <span class=\"comment\">//muValue is Array!</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>另外，<code>arguments</code>並不是個陣列，而是個具有length的物件，但上述測試會把它視為陣列；有時候我們會想要這種結果。</p>\n<h2 id=\"False類的值\">False類的值</h2>\n<p>下面這些的值會被歸類在false：</p>\n<ul>\n<li>0                  (number)</li>\n<li>NaN              (number)</li>\n<li>‘’                 (String)</li>\n<li>false          (Boolean)</li>\n<li>null           (Object)</li>\n<li>undefind  (undefind)</li>\n</ul>\n<p>undefind跟NaN不是常數而是全域變數，可以去更改他們的值。應該不能這樣做，但真的可以。請千萬別這樣做。</p>\n<blockquote>\n<p>剛剛試了一下，這好像也會被Browser Fix掉…真可惜（喂！）</p>\n</blockquote>\n<h2 id=\"‘hasOwnProperty’\">‘hasOwnProperty’</h2>\n<p><code>hasOwnProperty</code>是個方法而非運算子，所以他有可能被覆蓋掉。（應該不會有人這麼白目吧？）</p>\n<h2 id=\"物件\">物件</h2>\n<p>Javascript的物件從未真正為空，因為他們可以從prototype chain取得成員。下面是一個計算詞彙出現次數的範例:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> i;</div><div class=\"line\"><span class=\"keyword\">var</span> word;</div><div class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">\"...some words and constructor\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> words = text.toLowerCase().split(<span class=\"regexp\">/[\\s,.]+/</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> count = {};</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; words.length; i += <span class=\"number\">1</span>){</div><div class=\"line\">\tword = words[i];</div><div class=\"line\">  <span class=\"keyword\">if</span>(count[word]){</div><div class=\"line\">  \tcount[word] += <span class=\"number\">1</span>;</div><div class=\"line\">  } <span class=\"keyword\">else</span> {</div><div class=\"line\">  \tcount[word] = <span class=\"number\">1</span>;</div><div class=\"line\">  }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>count[constructor]會包含一串很長的字串（chrome是顯示<code>&quot;function Object() { [native code] }1&quot;</code>），因為count物件繼承Object.prototype，裡面也有一個constructor特性，他被轉成String然後在尾端加上1。所以應該跟for-in時一樣，用<code>hasOwnProperty</code>方法做檢查。</p>\n","source":"_posts/2013-12-24-note-javascriptthe-good-parts-bad-part-1.md","raw":"---\nlayout: post\ntitle: '[筆記] Javascript : The Good Parts - 糟糕的部分'\ndate: 2013-12-24 08:44\ncomments: true\ncategories: [javascript, 筆記]\n---\n##全域變數\njavascript最糟糕的一項特性，就是他對於全域變數的依賴。有三種可以宣告全域變數的方式：\n```js\nvar foo = 'value'; // 直接在最外層宣告\nwindow.foo = 'value' // window物件是所有全域變數的容器\nfoo = 'value' // 不經宣告就使用變數，稱為implied global\n```\n第三種原本的用意是對於初學者的體貼（蛤？），但這反而容易造成很難被找出來的bug。\n##範圍\n如同前面提到的，javascript沒有block scope，只有function scope，而且裡面還有變數抬升的特性。所以最好 **在每個區塊起始的地方宣告完區塊內所有變數** 。\n##分號的安插\njavascript有個試圖糾正錯誤的機制，它會自動幫你安插分號。不過這個機制有時候會造成更多的麻煩：\n```js\nreturn\n{\n\tstatus: true;\n};\n```\n上面的程式看起來很正常，不過javascript會認為你`return`後面忘了加上分號而貼心的幫你補上，於是就變成這樣：\n```js\nreturn; // undefind\n{\n\tstatus: true;\n};\n```\n所以撰寫javascript時應該採用K&R風格，把`{`放在句尾，可以避免類似的悲劇發生。\n<!--more-->\n\n##保留字\n作者認為有太多的保留字沒有被使用，造成命名上的麻煩（保留字不能用在變數或特性名稱）\n> 不過事實上，有一些是後來實作ECMA5有用到的\n\n##Unicode\n在設計javascript的年代，Unicode最多只到65536個字元，但現在已經突破百萬。\njavascript的字元是16位元，超出的部分以一對字元表示。Unicode把 **字元對** 當成一個字元，但對javascript來說是兩個。\n##typeof\ntypeof有許多非預期的狀況，例如：\n```js\ntypeof null // object\ntypeof [1, 2, 3] // object\ntypeof /a/ // 各瀏覽器實作不一致，可能是object或function\n```\n##parseInt\n`parseInt`是個把字串轉換為整數的函式，他會在遇到非數字字元的時候立即停止，例如：\n```js\nparseInt('16 say hi~ 17'); // 16\n```\n這函式還有另一個麻煩，如果字串的第一個字元是0，字串會依照八進位制做轉換，所以最好在每次使用時都帶入進位參數：\n```js\nparseInt('077'); // 63\nparseInt('077', 10); // 77\n```\n> 這點似乎在新版的Browser有fix過，沒有帶入參數就默認10進位\n\n##+運算子\n如果你希望 + 運算子是sum的作用，務必要檢查兩邊是不是\"都是\"數字。\n##浮點數\n這是最常被回報的bug。javascript採用[IEEE754標準](http://zh.wikipedia.org/wiki/IEEE_754)，導致他在處理十進位分數的時候會發生一些問題，例如：\n```JS\nconsole.log(0.1 + 0.2); // 0.30000000000000004\n```\n幸好，在整數運算的部分是正確的，所以可以先換成整數做運算在除回來。\n##NaN\n這也是個奇妙的東西，它的意義是＂非數值(not an number)＂，不過...\n```js\ntypeof NaN === 'number'; // true\n```\n還有更奇妙的\n```js\nNaN === NaN // false\nNaN !== NaN // true\n```\n這哪招阿...\n幸好javascript有提供一個檢查`NaN`的函式：\n```JS\nisNaN(NaN); // true\nisNaN(0); // false\nisNaN('hi~'); // true\nisNaN('0'); // false\n```\n> 這方法有點兩光阿...要檢查NaN還是得判斷兩次才行Orz\n\n還有一個`isFinite`函式，可以判斷＂值是否可以轉成數值＂，他會拒絕`NaN`跟`Infinity`。如果要確認值＂是不是數值(`number`)＂的話，需要自己加工：\n```js\nvar isNumber = function(value){\n\treturn typeof value === 'number' && isFinite(value);\n}\n```\n##偽陣列\n前面提過，javascript沒有真正的陣列，而是基於物件的偽陣列。跟真正的陣列相比，他的效能較差，但較容易使用。也因為這個特性的關係，`typeof`運算子沒有辦法區分物件跟陣列。為了判斷是否為陣列，需要把他的Constructor列入考慮：\n```js\nif(myValue && typeof myValue === 'object' \n\t\t&& myValue.constructor === Array){\n  //muValue is Array!\n}\n```\n如果陣列在不同的frame或window下建立，上面的測試可能給出false, 可以改成下面的形式：\n```js\nif(myValue && typeof myValue === 'object' \n    && typeof myValue.length === 'number'\n    && !(myValue.propertyIsEnumberable('length'))){\n  //muValue is Array!\n}\n```\n另外，`arguments`並不是個陣列，而是個具有length的物件，但上述測試會把它視為陣列；有時候我們會想要這種結果。\n##False類的值\n下面這些的值會被歸類在false：\n* 0 \t\t\t \t(number)\n* NaN \t\t \t(number)\n*\t''\t\t\t \t(String)\n* false \t \t(Boolean)\n* null \t\t  (Object)\n* undefind  (undefind)\n\nundefind跟NaN不是常數而是全域變數，可以去更改他們的值。應該不能這樣做，但真的可以。請千萬別這樣做。\n> 剛剛試了一下，這好像也會被Browser Fix掉...真可惜（喂！）\n\n##'hasOwnProperty'\n`hasOwnProperty`是個方法而非運算子，所以他有可能被覆蓋掉。（應該不會有人這麼白目吧？）\n\n##物件\nJavascript的物件從未真正為空，因為他們可以從prototype chain取得成員。下面是一個計算詞彙出現次數的範例:\n```js\nvar i;\nvar word;\nvar text = \"...some words and constructor\"\nvar words = text.toLowerCase().split(/[\\s,.]+/);\nvar count = {};\n\nfor(i = 0; i < words.length; i += 1){\n\tword = words[i];\n  if(count[word]){\n  \tcount[word] += 1;\n  } else {\n  \tcount[word] = 1;\n  }\n}\n```\n\ncount[constructor]會包含一串很長的字串（chrome是顯示`\"function Object() { [native code] }1\"`），因為count物件繼承Object.prototype，裡面也有一個constructor特性，他被轉成String然後在尾端加上1。所以應該跟for-in時一樣，用`hasOwnProperty`方法做檢查。","slug":"note-javascriptthe-good-parts-bad-part-1","updated":1426864888143,"excerpt":"<h2 id=\"全域變數\">全域變數</h2>\n<p>javascript最糟糕的一項特性，就是他對於全域變數的依賴。有三種可以宣告全域變數的方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">'value'</span>; <span class=\"comment\">// 直接在最外層宣告</span></div><div class=\"line\"><span class=\"built_in\">window</span>.foo = <span class=\"string\">'value'</span> <span class=\"comment\">// window物件是所有全域變數的容器</span></div><div class=\"line\">foo = <span class=\"string\">'value'</span> <span class=\"comment\">// 不經宣告就使用變數，稱為implied global</span></div></pre></td></tr></table></figure>\n\n<p>第三種原本的用意是對於初學者的體貼（蛤？），但這反而容易造成很難被找出來的bug。</p>\n<h2 id=\"範圍\">範圍</h2>\n<p>如同前面提到的，javascript沒有block scope，只有function scope，而且裡面還有變數抬升的特性。所以最好 <strong>在每個區塊起始的地方宣告完區塊內所有變數</strong> 。</p>\n<h2 id=\"分號的安插\">分號的安插</h2>\n<p>javascript有個試圖糾正錯誤的機制，它會自動幫你安插分號。不過這個機制有時候會造成更多的麻煩：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">return</span></div><div class=\"line\">{</div><div class=\"line\">\tstatus: <span class=\"literal\">true</span>;</div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<p>上面的程式看起來很正常，不過javascript會認為你<code>return</code>後面忘了加上分號而貼心的幫你補上，於是就變成這樣：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">return</span>; <span class=\"comment\">// undefind</span></div><div class=\"line\">{</div><div class=\"line\">\tstatus: <span class=\"literal\">true</span>;</div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<p>所以撰寫javascript時應該採用K&amp;R風格，把<code>{</code>放在句尾，可以避免類似的悲劇發生。<br>","_id":"h7w63ehdqbeg1b4l","tags":[],"photos":[],"link":""},{"layout":"post","title":"[筆記] Javascript : The Good Parts - 不良的部分","date":1388452980000,"comments":true,"categories":["so3gs2i08i5k4jkz","ydzfc7kx1nfohn7b"],"content":"<p>這章列出javascript一些可以輕鬆避用的問題功能。</p>\n<h2 id=\"==\">==</h2>\n<p>用<code>===</code>或<code>!==</code>來取代<code>==</code>或<code>!=</code>，因為後者在運算子兩邊型別不同時，會強制改變值的型別，而且規則十分複雜，下面列出一些有趣的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">''</span> == <span class=\"string\">'0'</span> <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"number\">0</span> == <span class=\"string\">''</span> <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"number\">0</span> == <span class=\"string\">'0'</span> <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"literal\">false</span> == <span class=\"string\">'false'</span> <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"literal\">false</span> == <span class=\"string\">'0'</span> <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"literal\">false</span> == <span class=\"literal\">undefined</span> <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"literal\">false</span> == <span class=\"literal\">null</span> <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span> <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n\n<p>詳細規則可以參考<a href=\"http://zero.milosz.ca\" target=\"_blank\" rel=\"external\">這張</a>表，不過不要真的去背他阿（笑）</p>\n<h2 id=\"with敘述\">with敘述</h2>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with\" target=\"_blank\" rel=\"external\">with敘述</a>提供了取用物件特性時的捷徑，但他的結果有時難以預料，因此應該避免使用他。作者認為with光是出現在語言中就已經拖慢了javascript的速度，這個語言沒有他會更好。</p>\n<h2 id=\"eval\">eval</h2>\n<p>＂eval is evil＂這句耳熟能詳的話就是作者說的。他認為<code>eval</code>有以下的問題：</p>\n<ul>\n<li>難以閱讀</li>\n<li>拖慢效能</li>\n<li>eval文段有太多權限，影響程式安全性</li>\n</ul>\n<p>基於上面這些問題，應該避免使用<code>eval</code>。<code>Function</code>建構式是<code>eval</code>的另外一種形式，同樣應該避免使用。<code>setTimeout</code>與<code>setInterval</code>函式可接受字串或函式作為引數，使用字串作為引數時，他們的行為就像<code>eval</code>，所以使用這兩個函式時應該避免以字串作為引數。</p>\n<blockquote>\n<p>關於’eval is evil’有不少的討論。部分的人認為應該在＂合理的需要＂而且＂你知道自己在幹什麼＂的情況下使用他，而不是如此斷定的禁用他。不過我還是傾向於後者，因為＂知道自己在幹什麼＂聽起來很簡單，事實上很難啊</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"continue\">continue</h2>\n<p><code>continue</code>會跳回迴圈的起始處。我還沒見過移除continue敘述後，沒有獲得改善的程式碼。</p>\n<blockquote>\n<p>這是作者說的，不是我說的</p>\n</blockquote>\n<h2 id=\"switch的案例掉落\">switch的案例掉落</h2>\n<p>在javascript中，<code>switch-case</code>敘述在沒有break的情況下，會掉向下一個case：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'a'</span>;</div><div class=\"line\"><span class=\"keyword\">switch</span>(a){</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'a'</span>:</div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">' case1'</span>);</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'b'</span>:</div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">' case2'</span>);</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'c'</span>:</div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">' case3'</span>); </div><div class=\"line\">}</div><div class=\"line\"><span class=\"comment\">// case1 case2</span></div></pre></td></tr></table></figure>\n\n<p>這有時候會被當作一個trick，但作者認為＂程式語言裡最糟的功能，不是那些顯然危險或無用的功能，而是那些有用的、具有吸引力但又危險的功能。＂</p>\n<blockquote>\n<p>小插曲：其實作者之前也認為fall through的優點足以掩蓋缺點，直到他某天修改JSLint的Bug時膝蓋中了一箭…</p>\n</blockquote>\n<h2 id=\"無區塊的敘述\">無區塊的敘述</h2>\n<p>不要為了省兩個字元捅自己或你的隊友。保持一致性有助於把事情做對。</p>\n<h2 id=\"++跟—\">++跟—</h2>\n<p>在jsLint中這叫over trick。作者認為這會鼓勵一種魯莽草率的風格，大部分的buffer overrun都來自於這種風格的原始碼。</p>\n<h2 id=\"Bitwise運算子\">Bitwise運算子</h2>\n<p>在JAVA中，bitwise運算子與整數一起工作，但javascript中沒有整數，只好把double轉成整數處理完後再轉回去。在多數語言中，bitwise離硬體很近而非常快速，但在javascript中卻不是這樣。</p>\n<h2 id=\"function敘述與function運算式\">function敘述與function運算式</h2>\n<p>javascript中同時擁有function敘述(function expression)與function運算式(function declaration)，下面兩者的意義是相等的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>{}; <span class=\"comment\">// function declaration</span></div><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>{}; <span class=\"comment\">// function expression</span></div></pre></td></tr></table></figure>\n\n<p>作者認為後者的形式比較好，可以清楚的表現出＂函式也是個物件＂這個性質。此外，在if敘述中禁止使用function敘述，但多數的瀏覽器沒有理會這項規則，實作方式又各不相同，因而產生了可攜性的問題。</p>\n<h2 id=\"typed_wrapper\">typed wrapper</h2>\n<p>javascript有一組type wrapper，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>(<span class=\"literal\">false</span>);</div><div class=\"line\">a.valueOf() <span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n\n<p>會產生一個有<code>valueOf</code>方法的物件，此方法回傳wrapper value。但事實上完全不需要這個功能，不要使用<code>new String``newNumber``new Boolean</code>這些方法，也避免使用<code>new Object</code>和<code>new Array</code>，改用<code>{}</code>與<code>[]</code>。</p>\n<h2 id=\"new\">new</h2>\n<p>new運算子會建立繼承運算元的prototype成員的新物件，然後呼叫運算元，把新物件繫結至this。但是如果你忘了加new，運算元的this會指向window，這個問題無法被編譯器檢測出來，只能靠命名規則來協助。更好的方法是不用new。（這個問題在繼承模式的部分討論過，請參考<a href=\"http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch5.html\" target=\"_blank\" rel=\"external\">這裡</a>）</p>\n<h2 id=\"void\">void</h2>\n<p>在javascript中，void是個運算子，接受運算元並回傳undefined。這功能沒有用。</p>\n<blockquote>\n<p>學長，請容許我強調一遍，完全沒有用。</p>\n</blockquote>\n","source":"_posts/2013-12-31-note-javascriptthe-good-parts-bad-part-2.md","raw":"---\nlayout: post\ntitle: '[筆記] Javascript : The Good Parts - 不良的部分'\ndate: 2013-12-31 09:23\ncomments: true\ncategories: [javascript, 筆記]\n---\n這章列出javascript一些可以輕鬆避用的問題功能。\n##==\n用`===`或`!==`來取代`==`或`!=`，因為後者在運算子兩邊型別不同時，會強制改變值的型別，而且規則十分複雜，下面列出一些有趣的例子：\n```js\n'' == '0' // false\n0 == '' // true\n0 == '0' // true\n\nfalse == 'false' // false\nfalse == '0' // true\n\nfalse == undefined // false\nfalse == null // false\nnull == undefined // true\n```\n詳細規則可以參考[這張](http://zero.milosz.ca)表，不過不要真的去背他阿（笑）\n##with敘述\n[with敘述](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with)提供了取用物件特性時的捷徑，但他的結果有時難以預料，因此應該避免使用他。作者認為with光是出現在語言中就已經拖慢了javascript的速度，這個語言沒有他會更好。\n##eval\n＂eval is evil＂這句耳熟能詳的話就是作者說的。他認為`eval`有以下的問題：\n\n* 難以閱讀\n* 拖慢效能\n* eval文段有太多權限，影響程式安全性\n\n基於上面這些問題，應該避免使用`eval`。`Function`建構式是`eval`的另外一種形式，同樣應該避免使用。`setTimeout`與`setInterval`函式可接受字串或函式作為引數，使用字串作為引數時，他們的行為就像`eval`，所以使用這兩個函式時應該避免以字串作為引數。\n> 關於'eval is evil'有不少的討論。部分的人認為應該在＂合理的需要＂而且＂你知道自己在幹什麼＂的情況下使用他，而不是如此斷定的禁用他。不過我還是傾向於後者，因為＂知道自己在幹什麼＂聽起來很簡單，事實上很難啊\n\n<!--more-->\n\n##continue\n`continue`會跳回迴圈的起始處。我還沒見過移除continue敘述後，沒有獲得改善的程式碼。\n> 這是作者說的，不是我說的\n\n##switch的案例掉落\n在javascript中，`switch-case`敘述在沒有break的情況下，會掉向下一個case：\n```js\nvar a = 'a';\nswitch(a){\n  case 'a':\n    document.write(' case1');\n  case 'b':\n    document.write(' case2');\n    break;\n  case 'c':\n    document.write(' case3'); \n}\n// case1 case2\n```\n這有時候會被當作一個trick，但作者認為＂程式語言裡最糟的功能，不是那些顯然危險或無用的功能，而是那些有用的、具有吸引力但又危險的功能。＂\n> 小插曲：其實作者之前也認為fall through的優點足以掩蓋缺點，直到他某天修改JSLint的Bug時膝蓋中了一箭...\n\n##無區塊的敘述\n不要為了省兩個字元捅自己或你的隊友。保持一致性有助於把事情做對。\n\n##++跟--\n在jsLint中這叫over trick。作者認為這會鼓勵一種魯莽草率的風格，大部分的buffer overrun都來自於這種風格的原始碼。\n\n##Bitwise運算子\n在JAVA中，bitwise運算子與整數一起工作，但javascript中沒有整數，只好把double轉成整數處理完後再轉回去。在多數語言中，bitwise離硬體很近而非常快速，但在javascript中卻不是這樣。\n\n##function敘述與function運算式\njavascript中同時擁有function敘述(function expression)與function運算式(function declaration)，下面兩者的意義是相等的：\n```js\nfunction foo() {}; // function declaration\nvar foo = function foo() {}; // function expression\n```\n作者認為後者的形式比較好，可以清楚的表現出＂函式也是個物件＂這個性質。此外，在if敘述中禁止使用function敘述，但多數的瀏覽器沒有理會這項規則，實作方式又各不相同，因而產生了可攜性的問題。\n\n##typed wrapper\njavascript有一組type wrapper，例如：\n```js\nvar a = new Boolean(false);\na.valueOf() // false\n```\n會產生一個有`valueOf`方法的物件，此方法回傳wrapper value。但事實上完全不需要這個功能，不要使用`new String``newNumber``new Boolean`這些方法，也避免使用`new Object`和`new Array`，改用`{}`與`[]`。\n##new\nnew運算子會建立繼承運算元的prototype成員的新物件，然後呼叫運算元，把新物件繫結至this。但是如果你忘了加new，運算元的this會指向window，這個問題無法被編譯器檢測出來，只能靠命名規則來協助。更好的方法是不用new。（這個問題在繼承模式的部分討論過，請參考[這裡](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch5.html)）\n##void\n在javascript中，void是個運算子，接受運算元並回傳undefined。這功能沒有用。\n> 學長，請容許我強調一遍，完全沒有用。","slug":"note-javascriptthe-good-parts-bad-part-2","updated":1426864888149,"excerpt":"<p>這章列出javascript一些可以輕鬆避用的問題功能。</p>\n<h2 id=\"==\">==</h2>\n<p>用<code>===</code>或<code>!==</code>來取代<code>==</code>或<code>!=</code>，因為後者在運算子兩邊型別不同時，會強制改變值的型別，而且規則十分複雜，下面列出一些有趣的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">''</span> == <span class=\"string\">'0'</span> <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"number\">0</span> == <span class=\"string\">''</span> <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"number\">0</span> == <span class=\"string\">'0'</span> <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"literal\">false</span> == <span class=\"string\">'false'</span> <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"literal\">false</span> == <span class=\"string\">'0'</span> <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"literal\">false</span> == <span class=\"literal\">undefined</span> <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"literal\">false</span> == <span class=\"literal\">null</span> <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span> <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n\n<p>詳細規則可以參考<a href=\"http://zero.milosz.ca\" target=\"_blank\" rel=\"external\">這張</a>表，不過不要真的去背他阿（笑）</p>\n<h2 id=\"with敘述\">with敘述</h2>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with\" target=\"_blank\" rel=\"external\">with敘述</a>提供了取用物件特性時的捷徑，但他的結果有時難以預料，因此應該避免使用他。作者認為with光是出現在語言中就已經拖慢了javascript的速度，這個語言沒有他會更好。</p>\n<h2 id=\"eval\">eval</h2>\n<p>＂eval is evil＂這句耳熟能詳的話就是作者說的。他認為<code>eval</code>有以下的問題：</p>\n<ul>\n<li>難以閱讀</li>\n<li>拖慢效能</li>\n<li>eval文段有太多權限，影響程式安全性</li>\n</ul>\n<p>基於上面這些問題，應該避免使用<code>eval</code>。<code>Function</code>建構式是<code>eval</code>的另外一種形式，同樣應該避免使用。<code>setTimeout</code>與<code>setInterval</code>函式可接受字串或函式作為引數，使用字串作為引數時，他們的行為就像<code>eval</code>，所以使用這兩個函式時應該避免以字串作為引數。</p>\n<blockquote>\n<p>關於’eval is evil’有不少的討論。部分的人認為應該在＂合理的需要＂而且＂你知道自己在幹什麼＂的情況下使用他，而不是如此斷定的禁用他。不過我還是傾向於後者，因為＂知道自己在幹什麼＂聽起來很簡單，事實上很難啊</p>\n</blockquote>\n","_id":"ek1yqwssg6j2681j","tags":[],"photos":[],"link":""},{"layout":"post","title":"[筆記] prototype與__proto__","date":1388632860000,"comments":true,"categories":[],"content":"","source":"_posts/2014-01-02-notesprototype-with-proto.md","raw":"---\nlayout: post\ntitle: '[筆記] prototype與__proto__'\ndate: 2014-01-02 11:21\ncomments: true\ncategories: \n---\n","slug":"notesprototype-with-proto","updated":1426864888154,"excerpt":"","_id":"bx2u5431zk3t8xgk","tags":[],"photos":[],"link":""},{"layout":"post","title":"[產出] jQueryDatePicker民國版","date":1388802060000,"comments":true,"categories":[],"content":"<p>GitPage:<a href=\"https://github.com/apolkingg8/JQueryDatePickerTW\" target=\"_blank\" rel=\"external\">https://github.com/apolkingg8/JQueryDatePickerTW</a></p>\n<p>雖然這東西網路上好像很多，不過幾乎都是去給setting然後改input.val而已，沒有考慮到後續的問題，像是直接改val然後render出錯誤的日曆、沒辦法西元與民國日曆並存、select沒有修、even會被蓋掉等等。於是就自己寫了一個比較方便完整的版本，一方面作為練習，一方面這東西用到的機會還蠻大的XD。</p>\n<p>使用方法和原本的datepicker完全一樣，datepicker原本的api應該都可以照常使用，如果有問題的話請在Git或這裡跟我說 :P</p>\n","source":"_posts/2014-01-04-jquerydatepicker-republic-of-china.md","raw":"---\nlayout: post\ntitle: '[產出] jQueryDatePicker民國版'\ndate: 2014-01-04 10:21\ncomments: true\ncategories: \n---\nGitPage:[https://github.com/apolkingg8/JQueryDatePickerTW](https://github.com/apolkingg8/JQueryDatePickerTW)\n\n雖然這東西網路上好像很多，不過幾乎都是去給setting然後改input.val而已，沒有考慮到後續的問題，像是直接改val然後render出錯誤的日曆、沒辦法西元與民國日曆並存、select沒有修、even會被蓋掉等等。於是就自己寫了一個比較方便完整的版本，一方面作為練習，一方面這東西用到的機會還蠻大的XD。\n\n使用方法和原本的datepicker完全一樣，datepicker原本的api應該都可以照常使用，如果有問題的話請在Git或這裡跟我說 :P\n\n","slug":"jquerydatepicker-republic-of-china","updated":1426864888158,"excerpt":"","_id":"87v3mh2lwjvkdqi7","tags":[],"photos":[],"link":""},{"layout":"post","title":"[筆記] .NET NPOI","date":1388560080000,"comments":true,"categories":["ge85mj4f5z2ysdut","6wj2gia5rzvj6lnb"],"content":"<p>每次要用都忘記用法，未老先衰阿…</p>\n<p>筆記一些重點</p>\n<ol>\n<li>usage: <code>NPOI</code>, <code>NPOI.HSSF.UserModel</code></li>\n<li>先取得FileStream </li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">FileStream fs = new FileStream(url, FileMode.<span class=\"keyword\">Open</span>, FileAccess.<span class=\"keyword\">Read</span>);</div></pre></td></tr></table></figure>\n\n<ol>\n<li>產生HSSFWorkBook </li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">HSSFWorkbook workbook </span>=<span class=\"string\"> new HSSFWorkbook(fs)</span></div></pre></td></tr></table></figure>\n\n<ol>\n<li>結構：Workbook -&gt; Sheets -&gt; Rows -&gt; Cell</li>\n<li>Cell不要直接<code>ToString()</code>，會拿到算式。有<code>NumericCellValue</code>之類的屬性可用</li>\n<li>NuGet拿到的是1.5版，XSSF是2.0版的東西，不過還在alpha，有很多問題。</li>\n<li>要注意很多政府機關文件的格式會錯誤，要開啟後再另存。</li>\n</ol>\n<p>小抱怨一下，某些政府機關的公開資料真的天殺的難找，還要從檔名逆推出文件格式編號再去猜相對應的路經…這是在玩國家寶藏嗎？</p>\n","source":"_posts/2014-01-01-notenet-npoi.md","raw":"---\nlayout: post\ntitle: '[筆記] .NET NPOI'\ndate: 2014-01-01 15:08\ncomments: true\ncategories: [.Net, 筆記]\n---\n每次要用都忘記用法，未老先衰阿...\n\n筆記一些重點\n\n1. usage: `NPOI`, `NPOI.HSSF.UserModel`\n2. 先取得FileStream \n```\nFileStream fs = new FileStream(url, FileMode.Open, FileAccess.Read);\n```\n3. 產生HSSFWorkBook \n```\nHSSFWorkbook workbook = new HSSFWorkbook(fs)\n```\n4. 結構：Workbook -> Sheets -> Rows -> Cell\n5. Cell不要直接`ToString()`，會拿到算式。有`NumericCellValue`之類的屬性可用\n6. NuGet拿到的是1.5版，XSSF是2.0版的東西，不過還在alpha，有很多問題。\n7. 要注意很多政府機關文件的格式會錯誤，要開啟後再另存。\n\n小抱怨一下，某些政府機關的公開資料真的天殺的難找，還要從檔名逆推出文件格式編號再去猜相對應的路經...這是在玩國家寶藏嗎？","slug":"notenet-npoi","updated":1426864888152,"excerpt":"","_id":"qnlcg5zmnlsptyud","tags":[],"photos":[],"link":""},{"layout":"post","title":"[心得] jQuery Widget Factory極簡教學","date":1389401100000,"comments":true,"categories":[],"content":"<h2 id=\"簡介\">簡介</h2>\n<p>jQuery Widget Factory是jQuery UI提供的一個方法，用Factory Mode來建立 <strong>有狀態的</strong> jQuery plugin。大多數的jQueryUI都是用這個方法產生的，例如<code>button</code>：</p>\n<figure class=\"highlight JS\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.widget( <span class=\"string\">\"ui.button\"</span>, {</div><div class=\"line\">\t<span class=\"comment\">// ...</span></div><div class=\"line\">  });</div></pre></td></tr></table></figure>\n\n<p>不過也有些是例外，像<code>datepicker</code>就不是用這個方法產生的。</p>\n<h2 id=\"如何使用\">如何使用</h2>\n<p>這個方法是基於jQuery，而不是jQuery UI Core，但是他的位置是在jQueryui.js裡面，所以兩者都必須引入</p>\n<blockquote>\n<p>註：如果不需要其他jQueryUI的話，可以只載入jquery.ui.widget.js</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/javascript\"</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"Libs/jquery-1.9.1.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/javascript\"</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"Libs/jquery-ui-1.10.3.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>方法的格式如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.widget(<span class=\"string\">'namespace.uiName'</span>, [base], prototype)</div></pre></td></tr></table></figure>\n\n<p><code>namespace</code>只能有一層，像jQueryUI就是用<code>ui.button</code><br><code>[base]</code>可選，用來指定已存在的物件當作基底，預設值是<code>$.widget</code>。例如你想要以jqueryUI的<code>dialog</code>為基底產生一個新的plugin，就可以像這樣：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.widget( <span class=\"string\">\"custom.superDialog\"</span>, $.ui.dialog, {</div><div class=\"line\">    red: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">        <span class=\"keyword\">this</span>.element.css( <span class=\"string\">\"color\"</span>, <span class=\"string\">\"red\"</span> );</div><div class=\"line\">    }</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p><code>prototype</code>這個widget的prototype object，套件的方法及設定都在這裡實作。</p>\n<a id=\"more\"></a>\n<h2 id=\"簡單的範例\">簡單的範例</h2>\n<p>下面是一個來自官網的簡單的範例，可以在jsBin玩玩看。</p>\n<p>首先，建立一個progressbar，然後設定他的初始化方法<code>_creat()</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.widget( <span class=\"string\">\"custom.progressbar\"</span>, {</div><div class=\"line\">    _create: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">        <span class=\"keyword\">var</span> progress = <span class=\"string\">\"%\"</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.element</div><div class=\"line\">            .addClass( <span class=\"string\">\"progressbar\"</span> )</div><div class=\"line\">            .text( progress );</div><div class=\"line\">    }</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>還有另一個方法<code>_init</code>，兩者間的差異請參考官方文件<br>這裡有另一個重點是<code>this.element</code>。如果用一般方法作jquery plugin的話，取得的this是selector後的jquery物件群組，但是widget中的 <strong>this.element永遠只有一個</strong> ，如果你selector後的jquery物件群組有多個物件，他會 <strong>對每個對象各執行一次</strong> 。</p>\n</blockquote>\n<p>為這個pregressbar增加option，設定初始化的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.widget( <span class=\"string\">\"custom.progressbar\"</span>, {</div><div class=\"line\">\t\toptions: {</div><div class=\"line\">    \tvalue: <span class=\"number\">20</span>%</div><div class=\"line\">    },</div><div class=\"line\">    _create: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">        <span class=\"keyword\">var</span> progress = <span class=\"keyword\">this</span>.options.value + <span class=\"string\">\"%\"</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.element</div><div class=\"line\">            .addClass( <span class=\"string\">\"progressbar\"</span> )</div><div class=\"line\">            .text( progress );</div><div class=\"line\">    }</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>options</code>是內建屬性，套件的參數會以key-value pair的形式傳到這個物件裡面，在這裡我們給予參數<code>value</code>預設值<code>&#39;20%&#39;</code>。  </p>\n</blockquote>\n<p>為套件增加public method<code>getValue</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.widget( <span class=\"string\">\"custom.myprogressbar\"</span>, {</div><div class=\"line\">\toptions: {</div><div class=\"line\">\t\tvalue: <span class=\"string\">'20'</span></div><div class=\"line\">\t},</div><div class=\"line\">\tgetValue: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.options.value;</div><div class=\"line\">\t},</div><div class=\"line\">\t_create: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> progress = <span class=\"keyword\">this</span>.options.value + <span class=\"string\">\"%\"</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.element.text( progress );</div><div class=\"line\">\t}</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>widget factory提供了很簡單的作法去區分private與public：前面有加<code>_</code>的會實作為private，其餘則是public，很方便吧？</p>\n</blockquote>\n<p>接下來，初始化套件並傳遞參數</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">class</span>=<span class=\"value\">'progressDiv'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">class</span>=<span class=\"value\">'progressDiv'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'.progressDiv'</span>).myprogressbar({ </div><div class=\"line\">\tvalue: <span class=\"number\">70</span></div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>試看看剛剛寫的方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log($(<span class=\"string\">'.progressDiv'</span>).myprogressbar(<span class=\"string\">'getValue'</span>)); <span class=\"comment\">// 70 * 2</span></div></pre></td></tr></table></figure>\n\n<p>完成了！恭喜你，你會製作（簡單的）jQuery plugin了XD<br><a href=\"http://jsbin.com/oRIjaVa/1/edit?html,console,output\" target=\"_blank\" rel=\"external\">jsBin Demo</a></p>\n<h2 id=\"參考文件\">參考文件</h2>\n<p><a href=\"http://learn.jquery.com/jquery-ui/widget-factory/\" target=\"_blank\" rel=\"external\">jQuery官網教程</a><br><a href=\"http://api.jqueryui.com/jQuery.widget/#jQuery-widget1\" target=\"_blank\" rel=\"external\">Widget Factory API Document</a></p>\n<h2 id=\"後記\">後記</h2>\n<p>真的有點簡略阿（汗），其實製作過程中還有不少眉眉角角，不過一時之間不好整理出來，有機會再作補充。</p>\n","source":"_posts/2014-01-11-experiencejquery-widget-factory.md","raw":"---\nlayout: post\ntitle: '[心得] jQuery Widget Factory極簡教學'\ndate: 2014-01-11 08:45\ncomments: true\ncategories: \n---\n\n\n##簡介\njQuery Widget Factory是jQuery UI提供的一個方法，用Factory Mode來建立 **有狀態的** jQuery plugin。大多數的jQueryUI都是用這個方法產生的，例如`button`：\n```JS\n$.widget( \"ui.button\", {\n\t// ...\n  });\n```\n不過也有些是例外，像`datepicker`就不是用這個方法產生的。\n\n##如何使用\n這個方法是基於jQuery，而不是jQuery UI Core，但是他的位置是在jQueryui.js裡面，所以兩者都必須引入\n> 註：如果不需要其他jQueryUI的話，可以只載入jquery.ui.widget.js\n\n```html\n<script type=\"text/javascript\" src=\"Libs/jquery-1.9.1.js\"></script>\n<script type=\"text/javascript\" src=\"Libs/jquery-ui-1.10.3.js\"></script>\n```\n方法的格式如下：\n```js\n$.widget('namespace.uiName', [base], prototype)\n```\n`namespace`只能有一層，像jQueryUI就是用`ui.button`\n`[base]`可選，用來指定已存在的物件當作基底，預設值是`$.widget`。例如你想要以jqueryUI的`dialog`為基底產生一個新的plugin，就可以像這樣：\n```js\n$.widget( \"custom.superDialog\", $.ui.dialog, {\n    red: function() {\n        this.element.css( \"color\", \"red\" );\n    }\n});\n```\n`prototype`這個widget的prototype object，套件的方法及設定都在這裡實作。\n\n<!--more-->\n\n##簡單的範例\n下面是一個來自官網的簡單的範例，可以在jsBin玩玩看。\n\n首先，建立一個progressbar，然後設定他的初始化方法`_creat()`\n```js\n$.widget( \"custom.progressbar\", {\n    _create: function() {\n        var progress = \"%\";\n        this.element\n            .addClass( \"progressbar\" )\n            .text( progress );\n    }\n});\n```\n> 還有另一個方法`_init`，兩者間的差異請參考官方文件\n> 這裡有另一個重點是`this.element`。如果用一般方法作jquery plugin的話，取得的this是selector後的jquery物件群組，但是widget中的 **this.element永遠只有一個** ，如果你selector後的jquery物件群組有多個物件，他會 **對每個對象各執行一次** 。\n\n為這個pregressbar增加option，設定初始化的值。\n```js\n$.widget( \"custom.progressbar\", {\n\t\toptions: {\n    \tvalue: 20%\n    },\n    _create: function() {\n        var progress = this.options.value + \"%\";\n        this.element\n            .addClass( \"progressbar\" )\n            .text( progress );\n    }\n});\n```\n> `options`是內建屬性，套件的參數會以key-value pair的形式傳到這個物件裡面，在這裡我們給予參數`value`預設值`'20%'`。  \n\n為套件增加public method`getValue`\n```js\n$.widget( \"custom.myprogressbar\", {\n\toptions: {\n\t\tvalue: '20'\n\t},\n\tgetValue: function(){\n\t\treturn this.options.value;\n\t},\n\t_create: function() {\n\t\tvar progress = this.options.value + \"%\";\n\t\tthis.element.text( progress );\n\t}\n});\n```\n> widget factory提供了很簡單的作法去區分private與public：前面有加`_`的會實作為private，其餘則是public，很方便吧？\n\n接下來，初始化套件並傳遞參數\n```html\n<div class='progressDiv'></div>\n<div class='progressDiv'></div>\n```\n```js\n$('.progressDiv').myprogressbar({ \n\tvalue: 70\n});\n```\n試看看剛剛寫的方法\n```js\nconsole.log($('.progressDiv').myprogressbar('getValue')); // 70 * 2\n```\n完成了！恭喜你，你會製作（簡單的）jQuery plugin了XD\n[jsBin Demo](http://jsbin.com/oRIjaVa/1/edit?html,console,output)\n\n##參考文件\n[jQuery官網教程](http://learn.jquery.com/jquery-ui/widget-factory/)\n[Widget Factory API Document](http://api.jqueryui.com/jQuery.widget/#jQuery-widget1)\n\n##後記\n真的有點簡略阿（汗），其實製作過程中還有不少眉眉角角，不過一時之間不好整理出來，有機會再作補充。\n","slug":"experiencejquery-widget-factory","updated":1426864888162,"excerpt":"<h2 id=\"簡介\">簡介</h2>\n<p>jQuery Widget Factory是jQuery UI提供的一個方法，用Factory Mode來建立 <strong>有狀態的</strong> jQuery plugin。大多數的jQueryUI都是用這個方法產生的，例如<code>button</code>：</p>\n<figure class=\"highlight JS\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.widget( <span class=\"string\">\"ui.button\"</span>, {</div><div class=\"line\">\t<span class=\"comment\">// ...</span></div><div class=\"line\">  });</div></pre></td></tr></table></figure>\n\n<p>不過也有些是例外，像<code>datepicker</code>就不是用這個方法產生的。</p>\n<h2 id=\"如何使用\">如何使用</h2>\n<p>這個方法是基於jQuery，而不是jQuery UI Core，但是他的位置是在jQueryui.js裡面，所以兩者都必須引入</p>\n<blockquote>\n<p>註：如果不需要其他jQueryUI的話，可以只載入jquery.ui.widget.js</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/javascript\"</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"Libs/jquery-1.9.1.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/javascript\"</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"Libs/jquery-ui-1.10.3.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>方法的格式如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.widget(<span class=\"string\">'namespace.uiName'</span>, [base], prototype)</div></pre></td></tr></table></figure>\n\n<p><code>namespace</code>只能有一層，像jQueryUI就是用<code>ui.button</code><br><code>[base]</code>可選，用來指定已存在的物件當作基底，預設值是<code>$.widget</code>。例如你想要以jqueryUI的<code>dialog</code>為基底產生一個新的plugin，就可以像這樣：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.widget( <span class=\"string\">\"custom.superDialog\"</span>, $.ui.dialog, {</div><div class=\"line\">    red: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">        <span class=\"keyword\">this</span>.element.css( <span class=\"string\">\"color\"</span>, <span class=\"string\">\"red\"</span> );</div><div class=\"line\">    }</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p><code>prototype</code>這個widget的prototype object，套件的方法及設定都在這裡實作。</p>\n","_id":"r43aarhmrpy86egn","tags":[],"photos":[],"link":""},{"layout":"post","title":"[產出] 在圖片上留言的jQuery plugin - CommentOnPhoto","date":1389396960000,"comments":true,"categories":[],"content":"<p>GitPage: <a href=\"https://github.com/apolkingg8/CommentOnPhoto\" target=\"_blank\" rel=\"external\">https://github.com/apolkingg8/CommentOnPhoto</a><br>DemoPage: <a href=\"http://apolkingg8.github.io/DemoPages/COP/demo.html\" target=\"_blank\" rel=\"external\">http://apolkingg8.github.io/DemoPages/COP/demo.html</a></p>\n<p><img class=\"center\" src=\"http://user-image.logdown.io/user/6060/blog/6071/post/175444/Tyy2HejRSuOhHPHZ3U7T_demo.png\" style=\"width:100%;height:100%;\" alt=\"demo.png\"></p>\n<p>之前在某些網站上看過這個功能，覺得還蠻好玩的，不過貌似沒有人把它元件化；剛好這幾天又不小心看到jquery widget factory這東西，於是就拿它做練習的題材了。其實把東西元件化還蠻有趣的，有助於釐清問題或需求的本質，也可以讓自己的Code更加的性感（？）。</p>\n<p>有些東西看起來很簡單，做起來也不難，但是要包成元件就有點麻煩，要包成一個同時兼顧擴展性、相容性、可調性又易於使用的元件就…很考驗功力了XD。因為是第一次寫比較完整的jQuery Plugin，可能有很多需要改進的地方，關於使用上有任何問題或feedback都歡迎聯絡我：）。</p>\n<p>題外話，我開始佩服那些寫文件的人了，README.MD要寫得漂亮真的不簡單啊…</p>\n","source":"_posts/2014-01-11-output-on-top-of-the-picture-message-jquery-plugin-commentonphoto.md","raw":"---\nlayout: post\ntitle: '[產出] 在圖片上留言的jQuery plugin - CommentOnPhoto'\ndate: 2014-01-11 07:36\ncomments: true\ncategories: \n---\nGitPage: [https://github.com/apolkingg8/CommentOnPhoto](https://github.com/apolkingg8/CommentOnPhoto)\nDemoPage: [http://apolkingg8.github.io/DemoPages/COP/demo.html](http://apolkingg8.github.io/DemoPages/COP/demo.html)\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/6060/blog/6071/post/175444/Tyy2HejRSuOhHPHZ3U7T_demo.png\" style=\"width:100%;height:100%;\" alt=\"demo.png\">\n\n之前在某些網站上看過這個功能，覺得還蠻好玩的，不過貌似沒有人把它元件化；剛好這幾天又不小心看到jquery widget factory這東西，於是就拿它做練習的題材了。其實把東西元件化還蠻有趣的，有助於釐清問題或需求的本質，也可以讓自己的Code更加的性感（？）。\n  \n有些東西看起來很簡單，做起來也不難，但是要包成元件就有點麻煩，要包成一個同時兼顧擴展性、相容性、可調性又易於使用的元件就...很考驗功力了XD。因為是第一次寫比較完整的jQuery Plugin，可能有很多需要改進的地方，關於使用上有任何問題或feedback都歡迎聯絡我：）。\n\n題外話，我開始佩服那些寫文件的人了，README.MD要寫得漂亮真的不簡單啊...\n\n","slug":"output-on-top-of-the-picture-message-jquery-plugin-commentonphoto","updated":1426864888165,"excerpt":"","_id":"bg6jsw2xs6y6a0o2","tags":[],"photos":[],"link":""},{"layout":"post","title":"[產出] 高雄捷運進站人數變化圖","date":1389767820000,"comments":true,"categories":[],"content":"<p>Demo: <a href=\"http://apolkingg8.github.io/DemoPages/KRT_logMap/demo.html\" target=\"_blank\" rel=\"external\">http://apolkingg8.github.io/DemoPages/KRT_logMap/demo.html</a></p>\n<p>前陣子之前在社團看到北捷的運量變化圖，心血來潮就想說來個高捷版，不過基於各種原因拖到現在才做好XD</p>\n<p>剛開始猶豫很久，要用SVG還是Canvas還是純CSS，最後因為相容性的關係而選擇了SVG，不過最後做跨瀏覽器測試的時候還是有點問題（Opera有時候會卡住，平平都是Blink阿）。因為跟SVG不熟，做到後來有種想打掉重做的衝動（例如包裝架構，互動方式，還有那個根本沒必要的Slider…），不過還是等有空再說吧，好多預計要看要玩的東西都還沒動呢（跪</p>\n","source":"_posts/2014-01-15--number-of-kaohsiung-mrt-station.md","raw":"---\nlayout: post\ntitle: '[產出] 高雄捷運進站人數變化圖'\ndate: 2014-01-15 14:37\ncomments: true\ncategories: \n---\nDemo: [http://apolkingg8.github.io/DemoPages/KRT_logMap/demo.html](http://apolkingg8.github.io/DemoPages/KRT_logMap/demo.html)\n\n前陣子之前在社團看到北捷的運量變化圖，心血來潮就想說來個高捷版，不過基於各種原因拖到現在才做好XD\n\n剛開始猶豫很久，要用SVG還是Canvas還是純CSS，最後因為相容性的關係而選擇了SVG，不過最後做跨瀏覽器測試的時候還是有點問題（Opera有時候會卡住，平平都是Blink阿）。因為跟SVG不熟，做到後來有種想打掉重做的衝動（例如包裝架構，互動方式，還有那個根本沒必要的Slider...），不過還是等有空再說吧，好多預計要看要玩的東西都還沒動呢（跪","slug":"-number-of-kaohsiung-mrt-station","updated":1426864888168,"excerpt":"","_id":"ysowee7m113qz1ww","tags":[],"photos":[],"link":""},{"layout":"post","title":"[筆記] Media query with LESS","date":1390432080000,"comments":true,"categories":[],"content":"<p>在LESS中，對於Media Query有些更方便的寫法，下面舉一些例子：</p>\n<h2 id=\"嵌套\">嵌套</h2>\n<hr>\n<p>可以直接把<code>@media</code>當成selector寫，例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">.one {</div><div class=\"line\">    @media (width: 400px) {</div><div class=\"line\">        font-size: 1.2em;</div><div class=\"line\">        @media print and color {</div><div class=\"line\">            color: blue;</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>會被編譯成</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"at_rule\">@<span class=\"keyword\">media</span> (width: <span class=\"number\">400px</span>) </span>{</div><div class=\"line\">  <span class=\"class\">.one</span> <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">font-size</span>:<span class=\"value\"> <span class=\"number\">1.2em</span></span></span>;</div><div class=\"line\">  <span class=\"rule\">}</span></div><div class=\"line\">}</div><div class=\"line\"><span class=\"at_rule\">@<span class=\"keyword\">media</span> (width: <span class=\"number\">400px</span>) and print and color </span>{</div><div class=\"line\">  <span class=\"class\">.one</span> <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">color</span>:<span class=\"value\"> blue</span></span>;</div><div class=\"line\">  <span class=\"rule\">}</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n<h2 id=\"變數化\">變數化</h2>\n<hr>\n<p>在1.4.0之後的版本，開啟嚴格模式的情況下，可以在Media Query中插入變數：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"at_rule\">@<span class=\"keyword\">media</span> screen, (max-width: @width) </span>{ ... }</div></pre></td></tr></table></figure>\n\n<p>你也可以把media query變數化，例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"at_rule\">@<span class=\"keyword\">singleQuery:</span> ~<span class=\"string\">\"(max-width: 500px)\"</span></span>;</div><div class=\"line\"><span class=\"at_rule\">@<span class=\"keyword\">media</span> screen, @singleQuery </span>{</div><div class=\"line\">    <span class=\"tag\">set</span> <span class=\"rules\">{</span></div><div class=\"line\">        <span class=\"rule\"><span class=\"attribute\">padding</span>:<span class=\"value\"> <span class=\"number\">3</span> <span class=\"number\">3</span> <span class=\"number\">3</span> <span class=\"number\">3</span></span></span>;</div><div class=\"line\">    <span class=\"rule\">}</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>會被編譯成</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"at_rule\">@<span class=\"keyword\">media</span> screen, (max-width: <span class=\"number\">500px</span>) </span>{</div><div class=\"line\">    <span class=\"tag\">set</span> <span class=\"rules\">{</span></div><div class=\"line\">        <span class=\"rule\"><span class=\"attribute\">padding</span>:<span class=\"value\"> <span class=\"number\">3</span> <span class=\"number\">3</span> <span class=\"number\">3</span> <span class=\"number\">3</span></span></span>;</div><div class=\"line\">    <span class=\"rule\">}</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>變數必須是一段完整的media query，像這樣會出錯：<code>@media screen and @partial { ... }</code></p>\n</blockquote>\n<p>變數化的Media Query中也可以插進變數：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"at_rule\">@<span class=\"keyword\">phoneValueMax:</span> ( <span class=\"number\">599</span> / @bfs ) + <span class=\"number\">0em</span></span>;</div><div class=\"line\"><span class=\"at_rule\">@<span class=\"keyword\">phone:</span> ~<span class=\"string\">\"screen and (max-width: @{phoneValueMax} )\"</span></span>;</div></pre></td></tr></table></figure>\n\n<h2 id=\"Mixin\">Mixin</h2>\n<hr>\n<p>也可以把它編成Mixin：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"at_rule\">@<span class=\"keyword\">highdensity:</span> ~<span class=\"string\">\"only screen and (-webkit-min-device-pixel-ratio: 1.5)\"</span>,</span></div><div class=\"line\">              ~<span class=\"string\">\"only screen and (min--moz-device-pixel-ratio: 1.5)\"</span>,</div><div class=\"line\">              ~<span class=\"string\">\"only screen and (-o-min-device-pixel-ratio: 3/2)\"</span>,</div><div class=\"line\">              ~<span class=\"string\">\"only screen and (min-device-pixel-ratio: 1.5)\"</span>;</div></pre></td></tr></table></figure>\n\n<h2 id=\"參考\">參考</h2>\n<hr>\n<p><a href=\"http://www.lesscss.org/\" target=\"_blank\" rel=\"external\">LESS</a><br><a href=\"http://blog.scur.pl/2012/06/variable-media-queries-less-css/\" target=\"_blank\" rel=\"external\">Variable media queries in Less CSS</a></p>\n","source":"_posts/2014-01-23-experience-media-query-with-less.md","raw":"---\nlayout: post\ntitle: '[筆記] Media query with LESS'\ndate: 2014-01-23 07:08\ncomments: true\ncategories: \n---\n在LESS中，對於Media Query有些更方便的寫法，下面舉一些例子：\n\n##嵌套\n---\n可以直接把`@media`當成selector寫，例如：\n```css\n.one {\n    @media (width: 400px) {\n        font-size: 1.2em;\n        @media print and color {\n            color: blue;\n        }\n    }\n}\n```\n會被編譯成\n```css\n@media (width: 400px) {\n  .one {\n    font-size: 1.2em;\n  }\n}\n@media (width: 400px) and print and color {\n  .one {\n    color: blue;\n  }\n}\n```\n\n<!--more-->\n\n\n##變數化\n---\n在1.4.0之後的版本，開啟嚴格模式的情況下，可以在Media Query中插入變數：\n```css\n@media screen, (max-width: @width) { ... }\n```\n你也可以把media query變數化，例如：\n```css\n@singleQuery: ~\"(max-width: 500px)\";\n@media screen, @singleQuery {\n    set {\n        padding: 3 3 3 3;\n    }\n}\n```\n會被編譯成\n```css\n@media screen, (max-width: 500px) {\n    set {\n        padding: 3 3 3 3;\n    }\n}\n```\n> 變數必須是一段完整的media query，像這樣會出錯：`@media screen and @partial { ... }`\n\n變數化的Media Query中也可以插進變數：\n```css\n@phoneValueMax: ( 599 / @bfs ) + 0em;\n@phone: ~\"screen and (max-width: @{phoneValueMax} )\";\n```\n##Mixin\n---\n也可以把它編成Mixin：\n```css\n@highdensity: ~\"only screen and (-webkit-min-device-pixel-ratio: 1.5)\",\n              ~\"only screen and (min--moz-device-pixel-ratio: 1.5)\",\n              ~\"only screen and (-o-min-device-pixel-ratio: 3/2)\",\n              ~\"only screen and (min-device-pixel-ratio: 1.5)\";\n```\n##參考\n---\n[LESS](http://www.lesscss.org/)\n[Variable media queries in Less CSS](http://blog.scur.pl/2012/06/variable-media-queries-less-css/)\n\n","slug":"experience-media-query-with-less","updated":1426864888182,"excerpt":"<p>在LESS中，對於Media Query有些更方便的寫法，下面舉一些例子：</p>\n<h2 id=\"嵌套\">嵌套</h2>\n<hr>\n<p>可以直接把<code>@media</code>當成selector寫，例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">.one {</div><div class=\"line\">    @media (width: 400px) {</div><div class=\"line\">        font-size: 1.2em;</div><div class=\"line\">        @media print and color {</div><div class=\"line\">            color: blue;</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>會被編譯成</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"at_rule\">@<span class=\"keyword\">media</span> (width: <span class=\"number\">400px</span>) </span>{</div><div class=\"line\">  <span class=\"class\">.one</span> <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">font-size</span>:<span class=\"value\"> <span class=\"number\">1.2em</span></span></span>;</div><div class=\"line\">  <span class=\"rule\">}</span></div><div class=\"line\">}</div><div class=\"line\"><span class=\"at_rule\">@<span class=\"keyword\">media</span> (width: <span class=\"number\">400px</span>) and print and color </span>{</div><div class=\"line\">  <span class=\"class\">.one</span> <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">color</span>:<span class=\"value\"> blue</span></span>;</div><div class=\"line\">  <span class=\"rule\">}</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n","_id":"k1ddwhu1kg73mn2m","tags":[],"photos":[],"link":""},{"layout":"post","title":"[筆記] CSS Media Query","date":1390426140000,"comments":true,"categories":[],"content":"<p>最近在做RWD的練習，赫然發現自己的CSS有點弱阿…長久以來都習慣把一些東西交給javascript處理，是時候該打好CSS的根底了。（以上題外話）下面大概筆記一下關於Media Query的部分。</p>\n<h2 id=\"使用方式\">使用方式</h2>\n<hr>\n<p>有三種使用方式，第一種是在<code>&lt;link&gt;</code>Tag中將條件加入：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">link</span> <span class=\"attribute\">rel</span>=<span class=\"value\">\"stylesheet\"</span> <span class=\"attribute\">media</span>=<span class=\"value\">\"screen and (min-width: 450px) and (max-width: 950px)\"</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"style1.css\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">link</span> <span class=\"attribute\">rel</span>=<span class=\"value\">\"stylesheet\"</span> <span class=\"attribute\">media</span>=<span class=\"value\">\"screen and (min-width: 950px)\"</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"style2.css\"</span> /&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 當螢幕寬度大於450小於950的時候引入style1，大於950的時候引入style2 --&gt;</span></div></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>&lt;link&gt;</code>標籤中的<code>media</code>屬性是從html4就有的，只不過那時指定的只有media type，並不支援media query，同樣的，media type在css2中也可以使用。</p>\n</blockquote>\n<p>第二種是在CSS中的<code>@import</code>中加入條件：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">@import url(color.css) screen and (color);</div><div class=\"line\">// 在彩色顯示下引入color.css</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>雖然我把他列出來，但請不要使用css的<code>@import</code>，他並不是標準的一部分，而且會拖慢網頁的效能。這點在<a href=\"http://www.amazon.com/dp/0596529309?tag=stevsoud-20&amp;camp=14573&amp;creative=327641&amp;linkCode=as1&amp;creativeASIN=0596529309&amp;adid=1S1KP4EV129EN37422C0&amp;\" target=\"_blank\" rel=\"external\">High Performance Web Sites</a>中有提到，可以參考<a href=\"http://www.stevesouders.com/blog/2009/04/09/dont-use-import/\" target=\"_blank\" rel=\"external\">這篇文章</a>。</p>\n</blockquote>\n<p>第三種是在css selector中加入條件：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@media all and (min-width:500px) { … }</div><div class=\"line\">@media (min-width:500px) { … }</div><div class=\"line\">// 這兩者是一樣的</div></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n<h2 id=\"運算子\">運算子</h2>\n<hr>\n<h3 id=\"and\">and</h3>\n<p>…就是and，既不偉大也不卑微的and</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"at_rule\">@<span class=\"keyword\">media</span> tv and (min-width: <span class=\"number\">700px</span>) and (orientation: landscape) </span>{ ... }</div></pre></td></tr></table></figure>\n\n<h3 id=\"逗號\">逗號</h3>\n<p>作用等同於<code>or</code>，符合其中一個條件的都會套上style</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"at_rule\">@<span class=\"keyword\">media</span> (min-width: <span class=\"number\">700px</span>), handheld and (orientation: landscape) </span>{ ... }</div></pre></td></tr></table></figure>\n\n<h3 id=\"not\">not</h3>\n<p>下面三者的意義是一樣的</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"at_rule\">@<span class=\"keyword\">media</span> not all and (monochrome) </span>{ ... }</div><div class=\"line\"><span class=\"at_rule\">@<span class=\"keyword\">media</span> not (all and (monochrome)) </span>{ ... }</div><div class=\"line\"><span class=\"at_rule\">@<span class=\"keyword\">media</span> (not all) and (monochrome) </span>{ ... }</div></pre></td></tr></table></figure>\n\n<p><code>not</code>並不會影響到逗號之外的判斷式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"at_rule\">@<span class=\"keyword\">media</span> not screen and (color), print and (color)</span></div><div class=\"line\">@media (not (screen and (color))), print and (color)</div><div class=\"line\">// 上面兩個是一樣的</div></pre></td></tr></table></figure>\n\n<h3 id=\"only\">only</h3>\n<p><code>only</code>會對於不支援media query的browser隱藏這份style，支援的劉覽器則會忽略這個字</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">link</span> <span class=\"attribute\">rel</span>=<span class=\"value\">\"stylesheet\"</span> <span class=\"attribute\">media</span>=<span class=\"value\">\"only screen and (color)\"</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"example.css\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>應該說，不支援Media Querie但正確讀取media type的瀏覽器，會因為media type不是”only”（可能是screen之類的），所以忽略這份樣式。如果browser不支援media type，不管怎樣都會忽略這份style。（如果我沒搞錯的話，連media type都不支援的應該是IE5之前的東西，大概是要用13張3.5吋磁片灌大富翁四的年代…）</p>\n</blockquote>\n<h2 id=\"features\">features</h2>\n<hr>\n<p>請參閱<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries\" target=\"_blank\" rel=\"external\">MDN</a>。</p>\n","source":"_posts/2014-01-23-note-css-media-query.md","raw":"---\nlayout: post\ntitle: '[筆記] CSS Media Query'\ndate: 2014-01-23 05:29\ncomments: true\ncategories: \n---\n最近在做RWD的練習，赫然發現自己的CSS有點弱阿...長久以來都習慣把一些東西交給javascript處理，是時候該打好CSS的根底了。（以上題外話）下面大概筆記一下關於Media Query的部分。\n\n##使用方式\n---\n有三種使用方式，第一種是在`<link>`Tag中將條件加入：\n```html\n<link rel=\"stylesheet\" media=\"screen and (min-width: 450px) and (max-width: 950px)\" href=\"style1.css\" />\n<link rel=\"stylesheet\" media=\"screen and (min-width: 950px)\" href=\"style2.css\" />\n<!-- 當螢幕寬度大於450小於950的時候引入style1，大於950的時候引入style2 -->\n```\n> `<link>`標籤中的`media`屬性是從html4就有的，只不過那時指定的只有media type，並不支援media query，同樣的，media type在css2中也可以使用。\n\n第二種是在CSS中的`@import`中加入條件：\n```css\n@import url(color.css) screen and (color);\n// 在彩色顯示下引入color.css\n```\n> 雖然我把他列出來，但請不要使用css的`@import`，他並不是標準的一部分，而且會拖慢網頁的效能。這點在[High Performance Web Sites](http://www.amazon.com/dp/0596529309?tag=stevsoud-20&camp=14573&creative=327641&linkCode=as1&creativeASIN=0596529309&adid=1S1KP4EV129EN37422C0&)中有提到，可以參考[這篇文章](http://www.stevesouders.com/blog/2009/04/09/dont-use-import/)。\n\n第三種是在css selector中加入條件：\n```css\n@media all and (min-width:500px) { … }\n@media (min-width:500px) { … }\n// 這兩者是一樣的\n```\n\n<!--more-->\n\n##運算子\n---\n###and\n...就是and，既不偉大也不卑微的and\n```css\n@media tv and (min-width: 700px) and (orientation: landscape) { ... }\n```\n\n###逗號\n作用等同於`or`，符合其中一個條件的都會套上style\n```css\n@media (min-width: 700px), handheld and (orientation: landscape) { ... }\n```\n\n###not\n下面三者的意義是一樣的\n```css\n@media not all and (monochrome) { ... }\n@media not (all and (monochrome)) { ... }\n@media (not all) and (monochrome) { ... }\n```\n`not`並不會影響到逗號之外的判斷式\n```css\n@media not screen and (color), print and (color)\n@media (not (screen and (color))), print and (color)\n// 上面兩個是一樣的\n```\n\n###only\n`only`會對於不支援media query的browser隱藏這份style，支援的劉覽器則會忽略這個字\n```html\n<link rel=\"stylesheet\" media=\"only screen and (color)\" href=\"example.css\" />\n```\n> 應該說，不支援Media Querie但正確讀取media type的瀏覽器，會因為media type不是\"only\"（可能是screen之類的），所以忽略這份樣式。如果browser不支援media type，不管怎樣都會忽略這份style。（如果我沒搞錯的話，連media type都不支援的應該是IE5之前的東西，大概是要用13張3.5吋磁片灌大富翁四的年代...）\n\n##features \n---\n請參閱[MDN](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries)。\n\n","slug":"note-css-media-query","updated":1426864888186,"excerpt":"<p>最近在做RWD的練習，赫然發現自己的CSS有點弱阿…長久以來都習慣把一些東西交給javascript處理，是時候該打好CSS的根底了。（以上題外話）下面大概筆記一下關於Media Query的部分。</p>\n<h2 id=\"使用方式\">使用方式</h2>\n<hr>\n<p>有三種使用方式，第一種是在<code>&lt;link&gt;</code>Tag中將條件加入：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">link</span> <span class=\"attribute\">rel</span>=<span class=\"value\">\"stylesheet\"</span> <span class=\"attribute\">media</span>=<span class=\"value\">\"screen and (min-width: 450px) and (max-width: 950px)\"</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"style1.css\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">link</span> <span class=\"attribute\">rel</span>=<span class=\"value\">\"stylesheet\"</span> <span class=\"attribute\">media</span>=<span class=\"value\">\"screen and (min-width: 950px)\"</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"style2.css\"</span> /&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 當螢幕寬度大於450小於950的時候引入style1，大於950的時候引入style2 --&gt;</span></div></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>&lt;link&gt;</code>標籤中的<code>media</code>屬性是從html4就有的，只不過那時指定的只有media type，並不支援media query，同樣的，media type在css2中也可以使用。</p>\n</blockquote>\n<p>第二種是在CSS中的<code>@import</code>中加入條件：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">@import url(color.css) screen and (color);</div><div class=\"line\">// 在彩色顯示下引入color.css</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>雖然我把他列出來，但請不要使用css的<code>@import</code>，他並不是標準的一部分，而且會拖慢網頁的效能。這點在<a href=\"http://www.amazon.com/dp/0596529309?tag=stevsoud-20&amp;camp=14573&amp;creative=327641&amp;linkCode=as1&amp;creativeASIN=0596529309&amp;adid=1S1KP4EV129EN37422C0&amp;\" target=\"_blank\" rel=\"external\">High Performance Web Sites</a>中有提到，可以參考<a href=\"http://www.stevesouders.com/blog/2009/04/09/dont-use-import/\" target=\"_blank\" rel=\"external\">這篇文章</a>。</p>\n</blockquote>\n<p>第三種是在css selector中加入條件：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@media all and (min-width:500px) { … }</div><div class=\"line\">@media (min-width:500px) { … }</div><div class=\"line\">// 這兩者是一樣的</div></pre></td></tr></table></figure>\n\n","_id":"9hmzkacc7pddil45","tags":[],"photos":[],"link":""},{"layout":"post","title":"[筆記] Javascript Image Beacon","date":1391394120000,"comments":true,"categories":[],"content":"<p>在javascript中，要對Server發出GET請求，除了慣用的ajax之外還有另外一個方法，叫做Image Beacon。方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> beacon = <span class=\"keyword\">new</span> Image(),</div><div class=\"line\">    url = <span class=\"string\">'/record.asp?'</span>,</div><div class=\"line\">    params = [</div><div class=\"line\">    \t<span class=\"string\">'name=John'</span>, <span class=\"string\">'age=18'</span></div><div class=\"line\">    ];</div><div class=\"line\">beacon.scr = url + params.join(<span class=\"string\">'&'</span>);</div></pre></td></tr></table></figure>\n\n<p>利用<code>Image</code>物件的<code>src</code>屬性來對伺服器發出GET請求，上面的範例對<code>/record.asp</code>發出了一個GET請求，並帶入參數<code>name</code>跟<code>age</code>。這個Image物件並不需要被Render到頁面中。</p>\n<p>Image Beacon跟ajax的差別在於：</p>\n<ul>\n<li>可跨域</li>\n<li>效能比XHR來的好</li>\n<li>只能使用GET，所以有長度限制</li>\n</ul>\n<p>這種方法常被用於 <strong>只需要向Server發送數據</strong> 的場合，例如蒐集統計數據。在這種情況下，Server可以回傳一個<code>204 No Content</code>的header，代表有收到這份訊息，避免客戶端持續等待。</p>\n","source":"_posts/2014-02-03-experience-image-beacon.md","raw":"---\nlayout: post\ntitle: '[筆記] Javascript Image Beacon'\ndate: 2014-02-03 10:22\ncomments: true\ncategories: \n---\n在javascript中，要對Server發出GET請求，除了慣用的ajax之外還有另外一個方法，叫做Image Beacon。方法如下：\n```javascript\nvar beacon = new Image(),\n    url = '/record.asp?',\n    params = [\n    \t'name=John', 'age=18'\n    ];\nbeacon.scr = url + params.join('&');\n```\n利用`Image`物件的`src`屬性來對伺服器發出GET請求，上面的範例對`/record.asp`發出了一個GET請求，並帶入參數`name`跟`age`。這個Image物件並不需要被Render到頁面中。\n\nImage Beacon跟ajax的差別在於：\n* 可跨域\n* 效能比XHR來的好\n* 只能使用GET，所以有長度限制\n\n這種方法常被用於 **只需要向Server發送數據** 的場合，例如蒐集統計數據。在這種情況下，Server可以回傳一個`204 No Content`的header，代表有收到這份訊息，避免客戶端持續等待。","slug":"experience-image-beacon","updated":1426864888189,"excerpt":"","_id":"sjsdo1y6tfuam499","tags":[],"photos":[],"link":""},{"layout":"post","title":"[筆記] 關於載入Script","date":1389920520000,"comments":true,"categories":[],"content":"<p>最近在看<a href=\"http://www.tenlong.com.tw/items/9862764198?item_id=427729\" target=\"_blank\" rel=\"external\">Javascript Patterns</a>這本書，剛好這陣子有碰到比較大的js data，就把書中一些關於Script讀取策略的部分整理一下。</p>\n<h2 id=\"Script_Tag的屬性\">Script Tag的屬性</h2>\n<hr>\n<p><code>language</code><br>這個屬性有各種不同大小寫的格式，像是：<code>JavaScript</code>, <code>javascript</code>, <code>Javascript</code>，有時候還附帶版本號。但其實根本就不應該用這個屬性，因為預設語言就是JavaScript，版本號也運作得不好。</p>\n<blockquote>\n<p>註：W3C已經不推薦使用這個屬性</p>\n</blockquote>\n<p><code>type</code><br>HTML4跟XHAML1標準會驗證這個屬性為必要，但其實不應該如此，因為預設就是JavaScript。HTML5已經將這個屬性改成非必要。</p>\n<p><code>defer</code><br>這段指定的Script會在頁面Render結束之後才運作，HTML5有更方便的<code>async</code>屬性。</p>\n<blockquote>\n<p>async跟defer的區別在於前者是在ParseDOM時載入Script並在載入完成後執行，後者則是在頁面載入結束後載入Script，並在載入完成後執行。一個小技巧是同時放上<code>async</code>跟<code>defer</code>，支援async的瀏覽器會忽略defer，不支援的則會使用defer。<br>關於<code>defer</code>這個屬性，其實各瀏覽器實作的方式不一樣，許多現代瀏覽器，例如Chrome，預設就是在頁面Render結束後才載入<code>&lt;head&gt;</code>中有<code>src</code>的<code>&lt;scripe&gt;</code>。<a href=\"http://mao.li/javascript/javascript-defer/\" target=\"_blank\" rel=\"external\">這篇文章</a>有作一些測試。</p>\n</blockquote>\n<h2 id=\"放置Script_Tag的位置\">放置Script Tag的位置</h2>\n<hr>\n<p><code>&lt;script&gt;</code>標籤會阻擋在他之後的事件，包括頁面render或下載，所以放置<code>&lt;Script&gt;</code>最好的位置是在<code>&lt;/body&gt;</code>之前，這樣可以防止頁面載入被Scrtpt標籤阻擋而拖延。最差的方式則是在<code>&lt;head&gt;</code>中引入多個獨立的檔案，會佔去server許多不必要的連線數。</p>\n<blockquote>\n<p>個人經驗，有沒有pack成單一檔案對伺服器負載能力真的差蠻多的</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"HTTP分塊\">HTTP分塊</h2>\n<hr>\n<p>HTTP協定支援分塊編碼，意思是你可以分批傳送頁面的片段。如果有一個非常複查的頁面，可以用像下面這種方法來分批傳送：</p>\n<figure class=\"highlight HTML\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"doctype\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"title\">title</span>&gt;</span>My App<span class=\"tag\">&lt;/<span class=\"title\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"header\"</span>&gt;</span></div><div class=\"line\">  \t<span class=\"comment\">&lt;!-- content1, like logo --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">  // block1 end</div><div class=\"line\">  <span class=\"comment\">&lt;!-- content2, main content --&gt;</span></div><div class=\"line\">  // block2 end</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"main.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">html</span>&gt;</span></div><div class=\"line\">// block3 end</div></pre></td></tr></table></figure>\n\n<p>先在第一區塊傳入部分標頭和主體，第二區塊傳入主要內容，第三區塊再傳入js檔為頁面添加特色和互動。這種作法十分符合漸進式增強和unobtrusive javascript的精神。</p>\n<h2 id=\"動態載入\">動態載入</h2>\n<hr>\n<p>要避免頁面render被script tag拖慢的問題，有下面幾種方法：</p>\n<ul>\n<li>用XHR請求來下載script，並用<code>eval()</code>來執行。不要這樣做。</li>\n<li>用<code>defer</code>和<code>async</code>屬性，但是有跨瀏覽器的問題。</li>\n<li>動態載入<code>&lt;script&gt;</code>元素   </li>\n</ul>\n<p>最後一種模式是個不錯的方法，像下面這樣：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.creatElement(<span class=\"string\">'script'</span>);</div><div class=\"line\">script.src = <span class=\"string\">'Main.js'</span>;</div><div class=\"line\"><span class=\"built_in\">document</span>.documentElement.firstChild.appendChild(script);</div></pre></td></tr></table></figure>\n\n<p>上面簡單的產生了一個script元素，並把他append到<code>&lt;head&gt;</code>內。這種方法要注意順序的問題，可以用一個initScriptsArray來解決他：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> initScripts = [],</div><div class=\"line\">\t\tinit = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{</div><div class=\"line\">    \t<span class=\"comment\">// for loop initScripts</span></div><div class=\"line\">    };</div><div class=\"line\">initScripts.push(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{</div><div class=\"line\">\t<span class=\"comment\">// some script</span></div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>動態載入有很多應用方法，例如把它放到<code>&lt;/body&gt;</code>前，確保使用者能先確認頁面的靜態內容，並趁這個時候載入互動相關的script，這種方法稱為lazy load（延遲載入）。或是依每個頁面行為或裝置的不同來分塊載入script，例如在mobile上部分較耗資源的效果可能會被停用，這時就可以不必載入那段script，這種方法稱為require load（隨選載入）。也可以在這一頁就預先載入下一頁需要的script，稱為preload（預先載入），不過使用這種方法必須注意，要讓預載的檔案只載入但不分析執行，因為不存在的DOM（下一頁的DOM）可能會造成錯誤。</p>\n<p>要下載一段script但不進行分析，可以用<code>&lt;object&gt;</code>元素來代替<code>&lt;script&gt;</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">document</span>.creatElement(<span class=\"string\">'object'</span>);</div><div class=\"line\">obj.data = <span class=\"string\">'preload.js'</span>;</div><div class=\"line\"><span class=\"comment\">// 用data屬性代替src</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(<span class=\"string\">'obj'</span>);</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>書上有提到用image beacon的方式來處理IE，不過我找不到IE跟<code>&lt;object&gt;</code>之間發生了什麼事，為什麼要用Image beacon來處理這件事…</p>\n</blockquote>\n<p>預先載入模式可以套用各種類型的元件，例如圖片或影音檔案，主要用在可以預期使用者下一個行為的時候。例如在輸入帳號密碼時，就可以對登入後的頁面進行部分預載。</p>\n","source":"_posts/2014-01-17-notes-on-loading-script.md","raw":"---\nlayout: post\ntitle: '[筆記] 關於載入Script'\ndate: 2014-01-17 09:02\ncomments: true\ncategories: \n---\n最近在看[Javascript Patterns](http://www.tenlong.com.tw/items/9862764198?item_id=427729)這本書，剛好這陣子有碰到比較大的js data，就把書中一些關於Script讀取策略的部分整理一下。\n\n##Script Tag的屬性\n---\n`language`\n這個屬性有各種不同大小寫的格式，像是：`JavaScript`, `javascript`, `Javascript`，有時候還附帶版本號。但其實根本就不應該用這個屬性，因為預設語言就是JavaScript，版本號也運作得不好。\n> 註：W3C已經不推薦使用這個屬性\n\n`type`\nHTML4跟XHAML1標準會驗證這個屬性為必要，但其實不應該如此，因為預設就是JavaScript。HTML5已經將這個屬性改成非必要。\n\n`defer`\n這段指定的Script會在頁面Render結束之後才運作，HTML5有更方便的`async`屬性。\n> async跟defer的區別在於前者是在ParseDOM時載入Script並在載入完成後執行，後者則是在頁面載入結束後載入Script，並在載入完成後執行。一個小技巧是同時放上`async`跟`defer`，支援async的瀏覽器會忽略defer，不支援的則會使用defer。\n> 關於`defer`這個屬性，其實各瀏覽器實作的方式不一樣，許多現代瀏覽器，例如Chrome，預設就是在頁面Render結束後才載入`<head>`中有`src`的`<scripe>`。[這篇文章](http://mao.li/javascript/javascript-defer/)有作一些測試。\n\n##放置Script Tag的位置\n---\n`<script>`標籤會阻擋在他之後的事件，包括頁面render或下載，所以放置`<Script>`最好的位置是在`</body>`之前，這樣可以防止頁面載入被Scrtpt標籤阻擋而拖延。最差的方式則是在`<head>`中引入多個獨立的檔案，會佔去server許多不必要的連線數。\n> 個人經驗，有沒有pack成單一檔案對伺服器負載能力真的差蠻多的\n\n<!--more-->\n\n\n##HTTP分塊\n---\nHTTP協定支援分塊編碼，意思是你可以分批傳送頁面的片段。如果有一個非常複查的頁面，可以用像下面這種方法來分批傳送：\n```HTML\n<!doctype html>\n<html>\n<head>\n\t<title>My App</title>\n</head>\n<body>\n\t<div id=\"header\">\n  \t<!-- content1, like logo -->\n  </div>\n  // block1 end\n  <!-- content2, main content -->\n  // block2 end\n  <script src=\"main.js\"></script>\n</body>\n</html>\n// block3 end\n```\n先在第一區塊傳入部分標頭和主體，第二區塊傳入主要內容，第三區塊再傳入js檔為頁面添加特色和互動。這種作法十分符合漸進式增強和unobtrusive javascript的精神。\n\n##動態載入\n---\n要避免頁面render被script tag拖慢的問題，有下面幾種方法：\n* 用XHR請求來下載script，並用`eval()`來執行。不要這樣做。\n* 用`defer`和`async`屬性，但是有跨瀏覽器的問題。\n* 動態載入`<script>`元素   \n\n最後一種模式是個不錯的方法，像下面這樣：\n```js\nvar script = document.creatElement('script');\nscript.src = 'Main.js';\ndocument.documentElement.firstChild.appendChild(script);\n```\n上面簡單的產生了一個script元素，並把他append到`<head>`內。這種方法要注意順序的問題，可以用一個initScriptsArray來解決他：\n```js\nvar initScripts = [],\n\t\tinit = function(){\n    \t// for loop initScripts\n    };\ninitScripts.push(function(){\n\t// some script\n});\n```\n動態載入有很多應用方法，例如把它放到`</body>`前，確保使用者能先確認頁面的靜態內容，並趁這個時候載入互動相關的script，這種方法稱為lazy load（延遲載入）。或是依每個頁面行為或裝置的不同來分塊載入script，例如在mobile上部分較耗資源的效果可能會被停用，這時就可以不必載入那段script，這種方法稱為require load（隨選載入）。也可以在這一頁就預先載入下一頁需要的script，稱為preload（預先載入），不過使用這種方法必須注意，要讓預載的檔案只載入但不分析執行，因為不存在的DOM（下一頁的DOM）可能會造成錯誤。\n\n要下載一段script但不進行分析，可以用`<object>`元素來代替`<script>`：\n```js\nvar obj = document.creatElement('object');\nobj.data = 'preload.js';\n// 用data屬性代替src\ndocument.body.appendChild('obj');\n```\n> 書上有提到用image beacon的方式來處理IE，不過我找不到IE跟`<object>`之間發生了什麼事，為什麼要用Image beacon來處理這件事...\n\n預先載入模式可以套用各種類型的元件，例如圖片或影音檔案，主要用在可以預期使用者下一個行為的時候。例如在輸入帳號密碼時，就可以對登入後的頁面進行部分預載。\n\n","slug":"notes-on-loading-script","updated":1426864888178,"excerpt":"<p>最近在看<a href=\"http://www.tenlong.com.tw/items/9862764198?item_id=427729\" target=\"_blank\" rel=\"external\">Javascript Patterns</a>這本書，剛好這陣子有碰到比較大的js data，就把書中一些關於Script讀取策略的部分整理一下。</p>\n<h2 id=\"Script_Tag的屬性\">Script Tag的屬性</h2>\n<hr>\n<p><code>language</code><br>這個屬性有各種不同大小寫的格式，像是：<code>JavaScript</code>, <code>javascript</code>, <code>Javascript</code>，有時候還附帶版本號。但其實根本就不應該用這個屬性，因為預設語言就是JavaScript，版本號也運作得不好。</p>\n<blockquote>\n<p>註：W3C已經不推薦使用這個屬性</p>\n</blockquote>\n<p><code>type</code><br>HTML4跟XHAML1標準會驗證這個屬性為必要，但其實不應該如此，因為預設就是JavaScript。HTML5已經將這個屬性改成非必要。</p>\n<p><code>defer</code><br>這段指定的Script會在頁面Render結束之後才運作，HTML5有更方便的<code>async</code>屬性。</p>\n<blockquote>\n<p>async跟defer的區別在於前者是在ParseDOM時載入Script並在載入完成後執行，後者則是在頁面載入結束後載入Script，並在載入完成後執行。一個小技巧是同時放上<code>async</code>跟<code>defer</code>，支援async的瀏覽器會忽略defer，不支援的則會使用defer。<br>關於<code>defer</code>這個屬性，其實各瀏覽器實作的方式不一樣，許多現代瀏覽器，例如Chrome，預設就是在頁面Render結束後才載入<code>&lt;head&gt;</code>中有<code>src</code>的<code>&lt;scripe&gt;</code>。<a href=\"http://mao.li/javascript/javascript-defer/\" target=\"_blank\" rel=\"external\">這篇文章</a>有作一些測試。</p>\n</blockquote>\n<h2 id=\"放置Script_Tag的位置\">放置Script Tag的位置</h2>\n<hr>\n<p><code>&lt;script&gt;</code>標籤會阻擋在他之後的事件，包括頁面render或下載，所以放置<code>&lt;Script&gt;</code>最好的位置是在<code>&lt;/body&gt;</code>之前，這樣可以防止頁面載入被Scrtpt標籤阻擋而拖延。最差的方式則是在<code>&lt;head&gt;</code>中引入多個獨立的檔案，會佔去server許多不必要的連線數。</p>\n<blockquote>\n<p>個人經驗，有沒有pack成單一檔案對伺服器負載能力真的差蠻多的</p>\n</blockquote>\n","_id":"45q5uvvtspe38m3z","tags":[],"photos":[],"link":""},{"layout":"post","title":"[筆記] HTML5 Semantic Elements","date":1391471940000,"comments":true,"categories":[],"content":"<p><img src=\"http://html5doctor.com/downloads/h5d-sectioning-flowchart.png\"></p>\n<p>其實舊的HTML4.01中也有一些元素是具有語意性的，例如<code>&lt;form&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;img&gt;</code>，而在HTML5中，新增了更多的常用語意性元素，用來取代以往由各種<code>&lt;div&gt;</code>切成的區塊，例如<code>&lt;head&gt;</code>、<code>&lt;footer&gt;</code>等等。下面整理一些常用的HTML5語意性元素。</p>\n<h3 id=\"\\\">\\<header></header></h3>\n<p>用來表示區塊標題的區塊元素，這個區塊可以是一整個頁面、一個段落或一篇文章，可以把它當成一個放置介紹內容的容器。一個頁面中可以有多個header。\\<header>是一容器沒錯，但是它裡面裝的東西應該只有區塊的標題或者摘要。不要把\\<header>當成\\<div class=\"header\">來使用。另外，\\<header>也不能放在\\<footer>、\\<address>或另一個\\<header>裡面。</header></address></footer></header></div></header></header></p>\n<h3 id=\"\\-1\">\\<nav></nav></h3>\n<p>導覽列。裡面裝的東西應該只有主要的navigation links，不要把各種link都丟到\\<nav>裡面。舉例來說，footer裡面常常會有一排link，那個就不需要包進\\<nav>。</nav></nav></p>\n<h3 id=\"\\-1\">\\<section></section></h3>\n<p>文件中的一個專題群組或區塊。一般來說，裡面都會包含heading。如果這個區塊的內容可以分成幾個部分的話，那應該使用article。</p>\n<blockquote>\n<p>Examples of sections would be chapters, the various tabbed pages in a tabbed dialog box, or the numbered sections of a thesis. A Web site’s home page could be split into sections for an introduction, news items, and contact information.</p>\n</blockquote>\n<p>使用section的地方像是文章中的章節，一個標籤式對話框中的各個標籤頁面，或論文的編號部分。一個網站的主業通常可以分成幾個section，像是introduction，news items還有contact information。</p>\n<blockquote>\n<p>Do not use the \\<section> element as a generic container; this is what \\<div> is for, especially when the sectioning is only for styling purposes.</div></section></p>\n</blockquote>\n<p>不要把section當成div用，這大概是最常見的錯誤用法。section內裝的應該是有意義且附帶標題的一段內容。例如這樣：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">section</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"title\">h1</span>&gt;</span>Heading<span class=\"tag\">&lt;/<span class=\"title\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>Bunch of awesome content<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">section</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n<h3 id=\"\\-1\">\\<article></article></h3>\n<p>一個獨立的區塊，同樣必須帶有heading。舉例來說，像這篇文章本身就是一個article，下面每個回應也都是一個單獨的article。<br>article跟section的區分是，article有更高的獨立性及完整性。MDN裡面是這樣說明的：</p>\n<blockquote>\n<p>“The HTML \\<article> Element represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable, e.g., in syndication.”</article></p>\n</blockquote>\n<p>article本身就算脫離了整體也是一個可以獨立存在、具有完整內容的區塊，例如這篇文章；而section雖然也具有獨立表達內容的能力，但是對外層有一定的相依性，例如這篇文章中的一個章節。</p>\n<h3 id=\"\\-1\">\\<aside></aside></h3>\n<p>aside元素代表從內容分離的部分。這些部分通常被表示為sidebar或interns。他們通常包含side explanations，像是術語定義；也可以放較為鬆散相關的東西，像廣告、的作者的傳記、個人資料信息或相關連結。像w3school舉的這個例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>My family and I visited The Epcot center this summer.<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">aside</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"title\">h4</span>&gt;</span>Epcot Center<span class=\"tag\">&lt;/<span class=\"title\">h4</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>The Epcot Center is a theme park in Disney World, Florida.<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">aside</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>另外，不要用aside標記括弧內的文字，這通常被認為是主要內容的一部分。</p>\n<h3 id=\"\\-1\">\\<footer></footer></h3>\n<p>footer代表一個區塊的結尾訊息，這個區塊是離他最近的父 \\<article>, \\<aside>, \\<nav>, \\<section>, \\<blockquote>, \\<body>, \\<details>, \\<fieldset>, \\<figure>, \\<td>。footer內通常會包含作者、版權等資訊。footer元素不是父區塊的內容之一，所以並不會出現在outline中。在address元素中的作者資訊也可以放在footer裡面。</td></figure></fieldset></details></body></blockquote></section></nav></aside></article></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">footer</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>Posted by: Hege Refsnes<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>Contact information: <span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"mailto:someone@example.com\"</span>&gt;</span></div><div class=\"line\">  someone@example.com<span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">footer</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"\\-1\">\\<figure></figure></h3>\n<p>這也是一個常被誤用的標籤，頻率大概僅次於section。先看看它的定義：</p>\n<blockquote>\n<p>The figure element represents a unit of content, optionally with a caption, that is self-contained, that is typically referenced as a single unit from the main flow of the document, and that can be moved away from the main flow of the document without affecting the document’s meaning.</p>\n</blockquote>\n<p>簡單來說，figure是一個有完整內容的區塊，他是主要內容的一部分，而且可以任意移動位置而不影響整體內容的表達。常見的問題是把每個img都包上figure，這完全沒有意義。簡單的判斷方式是想想看＂我把這個figure拿掉會不會影響到上下文的閱讀？＂，如果會的話，他就絕對不該是一個figure。<br>figure絕對不是只拿來包圖片的，他可以包含影音檔、圖表（可能是canvas或是svg）或是一段code。他跟aside的差別在於：</p>\n<ul>\n<li>aside和主內容有關，但不是主內容的一部分</li>\n<li>figure是主內容的一部分，但是他可以任意移動或刪除而不影響主內容的表達。</li>\n</ul>\n<p>通常figure會搭配\\<figcaption>服用，他放在第一個或最後一個子元素，像這樣：</figcaption></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">figure</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"title\">img</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"/macaque.jpg\"</span> <span class=\"attribute\">alt</span>=<span class=\"value\">\"Macaque in the trees\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"title\">figcaption</span>&gt;</span>A cheeky macaque, Lower Kintaganban River, Borneo. Original by <span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"http://www.flickr.com/photos/rclark/\"</span>&gt;</span>Richard Clark<span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">figcaption</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">figure</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>範例可以參考<a href=\"http://html5doctor.com/the-figure-figcaption-elements/\" target=\"_blank\" rel=\"external\">HTML5 Doctor</a></p>\n<h2 id=\"其他\">其他</h2>\n<hr>\n<ul>\n<li>IE8以下不支援HTML5，可以用<a href=\"https://code.google.com/p/html5shiv/\" target=\"_blank\" rel=\"external\">HTML5shiv</a>來補足。</li>\n<li>如果沒有十足的把握，可以先用一般的寫法完成頁面，然後再去做語意化的動作。不當的語意化對SEO來說是個悲劇。</li>\n<li>XDite大大在<a href=\"http://wp.xdite.net/?p=3071\" target=\"_blank\" rel=\"external\">如何設計出正確語意的 HTML5</a>有提到＂不要對任何語意TAG下style，否則當需要調整語意結構時，會天下大亂＂，可能是我太菜，不知道為什麼會這樣說，也找不到相關的文章。如果每個semantic tag外面都包個div，這樣的code會比較好嗎？</li>\n</ul>\n<h2 id=\"參考\">參考</h2>\n<hr>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\" target=\"_blank\" rel=\"external\">MDN</a><br><a href=\"http://www.w3schools.com/html/html5_semantic_elements.asp\" target=\"_blank\" rel=\"external\">W3School</a><br><a href=\"http://html5doctor.com/\" target=\"_blank\" rel=\"external\">HTML5Doctor</a><br><a href=\"http://wp.xdite.net/?p=3071\" target=\"_blank\" rel=\"external\">Blog.XDite.net:如何設計出正確語意的 HTML5</a><br><a href=\"http://waterlily-lsl.com/modules/article/view.article.php/c1/258\" target=\"_blank\" rel=\"external\">避免常見的六種 HTML5 錯誤用法</a><br><a href=\"http://www.qianduan.net/html5-differences-in-the-div-section-article.html\" target=\"_blank\" rel=\"external\">HTML5 中 div section article 的区别</a></p>\n","source":"_posts/2014-02-04-note-of-semantic-html.md","raw":"---\nlayout: post\ntitle: '[筆記] HTML5 Semantic Elements'\ndate: 2014-02-04 07:59\ncomments: true\ncategories: \n---\n<img src=\"http://html5doctor.com/downloads/h5d-sectioning-flowchart.png\"/>\n\n其實舊的HTML4.01中也有一些元素是具有語意性的，例如`<form>`、`<table>`、`<img>`，而在HTML5中，新增了更多的常用語意性元素，用來取代以往由各種`<div>`切成的區塊，例如`<head>`、`<footer>`等等。下面整理一些常用的HTML5語意性元素。\n\n###\\<header>\n用來表示區塊標題的區塊元素，這個區塊可以是一整個頁面、一個段落或一篇文章，可以把它當成一個放置介紹內容的容器。一個頁面中可以有多個header。\\<header>是一容器沒錯，但是它裡面裝的東西應該只有區塊的標題或者摘要。不要把\\<header>當成\\<div class=\"header\">來使用。另外，\\<header>也不能放在\\<footer>、\\<address>或另一個\\<header>裡面。\n\n###\\<nav>\n導覽列。裡面裝的東西應該只有主要的navigation links，不要把各種link都丟到\\<nav>裡面。舉例來說，footer裡面常常會有一排link，那個就不需要包進\\<nav>。\n\n###\\<section>\n文件中的一個專題群組或區塊。一般來說，裡面都會包含heading。如果這個區塊的內容可以分成幾個部分的話，那應該使用article。\n> Examples of sections would be chapters, the various tabbed pages in a tabbed dialog box, or the numbered sections of a thesis. A Web site’s home page could be split into sections for an introduction, news items, and contact information.\n\n使用section的地方像是文章中的章節，一個標籤式對話框中的各個標籤頁面，或論文的編號部分。一個網站的主業通常可以分成幾個section，像是introduction，news items還有contact information。\n> Do not use the \\<section> element as a generic container; this is what \\<div> is for, especially when the sectioning is only for styling purposes.\n\n不要把section當成div用，這大概是最常見的錯誤用法。section內裝的應該是有意義且附帶標題的一段內容。例如這樣：\n```html\n<section>\n  <h1>Heading</h1>\n  <p>Bunch of awesome content</p>\n</section>\n```\n\n<!--more-->\n\n\n###\\<article>\n一個獨立的區塊，同樣必須帶有heading。舉例來說，像這篇文章本身就是一個article，下面每個回應也都是一個單獨的article。\narticle跟section的區分是，article有更高的獨立性及完整性。MDN裡面是這樣說明的：\n> \"The HTML \\<article> Element represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable, e.g., in syndication.\"\n\narticle本身就算脫離了整體也是一個可以獨立存在、具有完整內容的區塊，例如這篇文章；而section雖然也具有獨立表達內容的能力，但是對外層有一定的相依性，例如這篇文章中的一個章節。\n\n###\\<aside>\naside元素代表從內容分離的部分。這些部分通常被表示為sidebar或interns。他們通常包含side explanations，像是術語定義；也可以放較為鬆散相關的東西，像廣告、的作者的傳記、個人資料信息或相關連結。像w3school舉的這個例子：\n```html\n<p>My family and I visited The Epcot center this summer.</p>\n\n<aside>\n  <h4>Epcot Center</h4>\n  <p>The Epcot Center is a theme park in Disney World, Florida.</p>\n</aside>\n```\n另外，不要用aside標記括弧內的文字，這通常被認為是主要內容的一部分。\n\n###\\<footer>\nfooter代表一個區塊的結尾訊息，這個區塊是離他最近的父 \\<article>, \\<aside>, \\<nav>, \\<section>, \\<blockquote>, \\<body>, \\<details>, \\<fieldset>, \\<figure>, \\<td>。footer內通常會包含作者、版權等資訊。footer元素不是父區塊的內容之一，所以並不會出現在outline中。在address元素中的作者資訊也可以放在footer裡面。\n```html\n<footer>\n  <p>Posted by: Hege Refsnes</p>\n  <p>Contact information: <a href=\"mailto:someone@example.com\">\n  someone@example.com</a>.</p>\n</footer>\n```\n\n###\\<figure>\n這也是一個常被誤用的標籤，頻率大概僅次於section。先看看它的定義：\n> The figure element represents a unit of content, optionally with a caption, that is self-contained, that is typically referenced as a single unit from the main flow of the document, and that can be moved away from the main flow of the document without affecting the document’s meaning.\n\n簡單來說，figure是一個有完整內容的區塊，他是主要內容的一部分，而且可以任意移動位置而不影響整體內容的表達。常見的問題是把每個img都包上figure，這完全沒有意義。簡單的判斷方式是想想看＂我把這個figure拿掉會不會影響到上下文的閱讀？＂，如果會的話，他就絕對不該是一個figure。\nfigure絕對不是只拿來包圖片的，他可以包含影音檔、圖表（可能是canvas或是svg）或是一段code。他跟aside的差別在於：\n\n* aside和主內容有關，但不是主內容的一部分\n* figure是主內容的一部分，但是他可以任意移動或刪除而不影響主內容的表達。\n\n通常figure會搭配\\<figcaption>服用，他放在第一個或最後一個子元素，像這樣：\n```html\n<figure>\n  <img src=\"/macaque.jpg\" alt=\"Macaque in the trees\">\n  <figcaption>A cheeky macaque, Lower Kintaganban River, Borneo. Original by <a href=\"http://www.flickr.com/photos/rclark/\">Richard Clark</a></figcaption>\n</figure>\n```\n範例可以參考[HTML5 Doctor](http://html5doctor.com/the-figure-figcaption-elements/)\n\n##其他\n---\n* IE8以下不支援HTML5，可以用[HTML5shiv](https://code.google.com/p/html5shiv/)來補足。\n* 如果沒有十足的把握，可以先用一般的寫法完成頁面，然後再去做語意化的動作。不當的語意化對SEO來說是個悲劇。\n* XDite大大在[如何設計出正確語意的 HTML5](http://wp.xdite.net/?p=3071)有提到＂不要對任何語意TAG下style，否則當需要調整語意結構時，會天下大亂＂，可能是我太菜，不知道為什麼會這樣說，也找不到相關的文章。如果每個semantic tag外面都包個div，這樣的code會比較好嗎？\n\n##參考\n---\n[MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element)\n[W3School](http://www.w3schools.com/html/html5_semantic_elements.asp)\n[HTML5Doctor](http://html5doctor.com/)\n[Blog.XDite.net:如何設計出正確語意的 HTML5](http://wp.xdite.net/?p=3071)\n[避免常見的六種 HTML5 錯誤用法](http://waterlily-lsl.com/modules/article/view.article.php/c1/258)\n[HTML5 中 div section article 的区别](http://www.qianduan.net/html5-differences-in-the-div-section-article.html)","slug":"note-of-semantic-html","updated":1426864888197,"excerpt":"<p><img src=\"http://html5doctor.com/downloads/h5d-sectioning-flowchart.png\"></p>\n<p>其實舊的HTML4.01中也有一些元素是具有語意性的，例如<code>&lt;form&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;img&gt;</code>，而在HTML5中，新增了更多的常用語意性元素，用來取代以往由各種<code>&lt;div&gt;</code>切成的區塊，例如<code>&lt;head&gt;</code>、<code>&lt;footer&gt;</code>等等。下面整理一些常用的HTML5語意性元素。</p>\n<h3 id=\"\\\">\\<header></header></h3>\n<p>用來表示區塊標題的區塊元素，這個區塊可以是一整個頁面、一個段落或一篇文章，可以把它當成一個放置介紹內容的容器。一個頁面中可以有多個header。\\<header>是一容器沒錯，但是它裡面裝的東西應該只有區塊的標題或者摘要。不要把\\<header>當成\\<div class=\"header\">來使用。另外，\\<header>也不能放在\\<footer>、\\<address>或另一個\\<header>裡面。</header></address></footer></header></div></header></header></p>\n<h3 id=\"\\-1\">\\<nav></nav></h3>\n<p>導覽列。裡面裝的東西應該只有主要的navigation links，不要把各種link都丟到\\<nav>裡面。舉例來說，footer裡面常常會有一排link，那個就不需要包進\\<nav>。</nav></nav></p>\n<h3 id=\"\\-1\">\\<section></section></h3>\n<p>文件中的一個專題群組或區塊。一般來說，裡面都會包含heading。如果這個區塊的內容可以分成幾個部分的話，那應該使用article。</p>\n<blockquote>\n<p>Examples of sections would be chapters, the various tabbed pages in a tabbed dialog box, or the numbered sections of a thesis. A Web site’s home page could be split into sections for an introduction, news items, and contact information.</p>\n</blockquote>\n<p>使用section的地方像是文章中的章節，一個標籤式對話框中的各個標籤頁面，或論文的編號部分。一個網站的主業通常可以分成幾個section，像是introduction，news items還有contact information。</p>\n<blockquote>\n<p>Do not use the \\<section> element as a generic container; this is what \\<div> is for, especially when the sectioning is only for styling purposes.</div></section></p>\n</blockquote>\n<p>不要把section當成div用，這大概是最常見的錯誤用法。section內裝的應該是有意義且附帶標題的一段內容。例如這樣：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">section</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"title\">h1</span>&gt;</span>Heading<span class=\"tag\">&lt;/<span class=\"title\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>Bunch of awesome content<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">section</span>&gt;</span></div></pre></td></tr></table></figure>\n\n","_id":"uxf50csj304onvzh","tags":[],"photos":[],"link":""},{"layout":"post","title":"[閒聊] WebClient端的關注點分離","date":1391396100000,"comments":true,"categories":[],"content":"<p>內容出自<a href=\"http://shop.oreilly.com/product/9780596806767.do\" target=\"_blank\" rel=\"external\">Javascript:patterns</a>第八章</p>\n<p>web的client端可以分成三個主要的關注點，分別是：</p>\n<ul>\n<li>Content(內容，HTML文件)</li>\n<li>Presentation(表現，CSS樣式)</li>\n<li>Behavior(行為，包含使用者互動及對文件的動態改變，通常使用Javascript)</li>\n</ul>\n<p>在做client端的規畫時，應該盡可能地保持關注點分離，有助於提升程式的品質及可維護性。 <strong>關注點分離</strong> 同樣可以和 <strong>漸進式增強</strong> 的觀念相輔相成：使用者從最基礎的內容（HTML）開始，隨著支援功能的增強而獲得更好的體驗（CSS, Javascript）。在實際應用中如下：</p>\n<ul>\n<li>將CSS關閉，確認網頁內容是否可以使用﹑內文是否可以閱讀</li>\n<li>將Javascript關閉，確保網頁主要功能還是可以正常運作，所有的連結都可以使用（所以不要用<code>href=&quot;#&quot;</code>），所有的表單都可以正常的提交。</li>\n<li>不要使用內嵌的事件處理器（例如<code>onclick</code>），或是內嵌的style屬性，因為這些東西不屬於內容層</li>\n<li>撰寫語意化的HTML</li>\n</ul>\n<p>Javascript的風格應為 <strong>unobtrusive</strong> ，意思是不應該擋到使用者的路，如果遇到不支援的瀏覽器也不應該讓頁面無法使用。另外，在處理瀏覽器差異時，應該用功能檢測取代瀏覽器偵測。</p>\n<h2 id=\"一點小感想\">一點小感想</h2>\n<hr>\n<p>會寫這篇文章，是因為對書中有些地方有些不同的想法。我同意漸進式增強的觀念，同時也贊同關注點分離帶來的程式品質與可維護性，但是在有些狀況下，完美的關注點分離可能會降低使用者的最高體驗。例如SPA Web，在大量使用ajax的狀況下很難達到＂移除javascript仍然保持網站正常運作＂的條件，但是有必要為了這些極少數不支援javascript的使用者（無障礙網頁另當別論），去放棄大部分使用者的體驗嗎？記得之前看過某篇文章（原諒我找不到他），作者的觀點是＂ <strong>給那些使用者一些提示，並引導他們前進</strong> ＂，我想這個做法不論是對於使用者或是生產者而言都是好的。</p>\n<blockquote>\n<p>雖然<a href=\"http://arstechnica.com/information-technology/2013/10/internet-explorer-6-usage-drops-below-5-percent-in-september/\" target=\"_blank\" rel=\"external\">IE6,7使用者比例終於下跌了</a>，但是廣大中國網民的IE6比率依舊讓人絕望阿…</p>\n</blockquote>\n","source":"_posts/2014-02-03-note-webclient-side-separation-of-concerns.md","raw":"---\nlayout: post\ntitle: '[閒聊] WebClient端的關注點分離'\ndate: 2014-02-03 10:55\ncomments: true\ncategories: \n---\n內容出自[Javascript:patterns](http://shop.oreilly.com/product/9780596806767.do)第八章\n\nweb的client端可以分成三個主要的關注點，分別是：\n* Content(內容，HTML文件)\n* Presentation(表現，CSS樣式)\n* Behavior(行為，包含使用者互動及對文件的動態改變，通常使用Javascript)\n\n在做client端的規畫時，應該盡可能地保持關注點分離，有助於提升程式的品質及可維護性。 **關注點分離** 同樣可以和 **漸進式增強** 的觀念相輔相成：使用者從最基礎的內容（HTML）開始，隨著支援功能的增強而獲得更好的體驗（CSS, Javascript）。在實際應用中如下：\n* 將CSS關閉，確認網頁內容是否可以使用﹑內文是否可以閱讀\n* 將Javascript關閉，確保網頁主要功能還是可以正常運作，所有的連結都可以使用（所以不要用`href=\"#\"`），所有的表單都可以正常的提交。\n* 不要使用內嵌的事件處理器（例如`onclick`），或是內嵌的style屬性，因為這些東西不屬於內容層\n* 撰寫語意化的HTML\n\nJavascript的風格應為 **unobtrusive** ，意思是不應該擋到使用者的路，如果遇到不支援的瀏覽器也不應該讓頁面無法使用。另外，在處理瀏覽器差異時，應該用功能檢測取代瀏覽器偵測。\n\n##一點小感想\n---\n會寫這篇文章，是因為對書中有些地方有些不同的想法。我同意漸進式增強的觀念，同時也贊同關注點分離帶來的程式品質與可維護性，但是在有些狀況下，完美的關注點分離可能會降低使用者的最高體驗。例如SPA Web，在大量使用ajax的狀況下很難達到＂移除javascript仍然保持網站正常運作＂的條件，但是有必要為了這些極少數不支援javascript的使用者（無障礙網頁另當別論），去放棄大部分使用者的體驗嗎？記得之前看過某篇文章（原諒我找不到他），作者的觀點是＂ **給那些使用者一些提示，並引導他們前進** ＂，我想這個做法不論是對於使用者或是生產者而言都是好的。\n> 雖然[IE6,7使用者比例終於下跌了](http://arstechnica.com/information-technology/2013/10/internet-explorer-6-usage-drops-below-5-percent-in-september/)，但是廣大中國網民的IE6比率依舊讓人絕望阿...","slug":"note-webclient-side-separation-of-concerns","updated":1426864888193,"excerpt":"","_id":"u8a2tqkyrw4hp2f3","tags":[],"photos":[],"link":""},{"layout":"post","title":"[筆記] Flex with LESS","date":1392018120000,"comments":true,"categories":[],"content":"","source":"_posts/2014-02-10-note-flex-with-less.md","raw":"---\nlayout: post\ntitle: '[筆記] Flex with LESS'\ndate: 2014-02-10 15:42\ncomments: true\ncategories: \n---\n","slug":"note-flex-with-less","updated":1426864888199,"excerpt":"","_id":"okz0lutec8gkowt4","tags":[],"photos":[],"link":""},{"layout":"post","title":"[筆記] 在WebStorm中新增compass的語法提示","date":1394260260000,"comments":true,"categories":[],"content":"<p>在WebStorm中，compass是沒有內建代碼提示的，而且所有的compass mixin都會被標示為undefined mixin（雖然不影響compiler），連<code>@import compass</code>底下都會爬一條紅蚯蚓，跟你說他找不到compass.sass這個檔案。目前看到最好的解法是手動新增符號連結。</p>\n<p>先切到專案中的sass目錄裡</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> projectlocate/sass</div></pre></td></tr></table></figure>\n\n<p>新增一個compass的符號連結</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">mklink</span> /d compass <span class=\"variable\">$COMPASS_LOCATE</span></div></pre></td></tr></table></figure>\n\n<p>$COMPASS_LOCATE`是裝在ruby gem底下的compass stylesheet位置，舉例來說我的長這樣：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">H:<span class=\"command\">\\Units</span><span class=\"command\">\\Ruby</span>193<span class=\"command\">\\lib</span><span class=\"command\">\\ruby</span><span class=\"command\">\\gems</span>\\1.9.1<span class=\"command\">\\gems</span><span class=\"command\">\\compass</span>-0.12.3<span class=\"command\">\\frameworks</span><span class=\"command\">\\compass</span><span class=\"command\">\\stylesheets</span><span class=\"command\">\\compass</span></div></pre></td></tr></table></figure>\n\n<p>然後就可以得到compass的代碼提示了，這作法就類似把新增compass到你的libary裡面，只是沒有實際引入檔案。</p>\n<p>如果要移除這個符號連結， <strong>不要直接刪除</strong>，要用下面這行指令：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">rmdir</span> compass</div></pre></td></tr></table></figure>\n\n<p>至於mac或linux中，Symbolic Link的指令是這樣：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"input\"><span class=\"prompt\">ln -s &lt;dest&gt;</span> &lt;link&gt;</span></div><div class=\"line\">rm &lt;dest&gt;</div></pre></td></tr></table></figure>\n\n<p>例如我的是/Library/Ruby/Gems/2.0.0/gems/compass-0.12.3/frameworks/compass/stylesheets/compass</p>\n<blockquote>\n<p>我說大哥阿，你既然都bundle compass進去了，為什麼不搞得徹底一點呢….</p>\n</blockquote>\n","source":"_posts/2014-03-08-note-in-webstorm-added-compass-syntax-tips.md","raw":"---\nlayout: post\ntitle: '[筆記] 在WebStorm中新增compass的語法提示'\ndate: 2014-03-08 14:31\ncomments: true\ncategories: \n---\n在WebStorm中，compass是沒有內建代碼提示的，而且所有的compass mixin都會被標示為undefined mixin（雖然不影響compiler），連`@import compass`底下都會爬一條紅蚯蚓，跟你說他找不到compass.sass這個檔案。目前看到最好的解法是手動新增符號連結。\n\n先切到專案中的sass目錄裡\n```\ncd projectlocate/sass\n```\n新增一個compass的符號連結\n```\nmklink /d compass $COMPASS_LOCATE\n```\n$COMPASS_LOCATE`是裝在ruby gem底下的compass stylesheet位置，舉例來說我的長這樣：\n```\nH:\\Units\\Ruby193\\lib\\ruby\\gems\\1.9.1\\gems\\compass-0.12.3\\frameworks\\compass\\stylesheets\\compass\n```\n然後就可以得到compass的代碼提示了，這作法就類似把新增compass到你的libary裡面，只是沒有實際引入檔案。\n\n如果要移除這個符號連結， **不要直接刪除**，要用下面這行指令：\n```\nrmdir compass\n```\n至於mac或linux中，Symbolic Link的指令是這樣：\n```\nln -s <dest> <link>\nrm <dest>\n```\n例如我的是/Library/Ruby/Gems/2.0.0/gems/compass-0.12.3/frameworks/compass/stylesheets/compass\n\n\n\n> 我說大哥阿，你既然都bundle compass進去了，為什麼不搞得徹底一點呢....\n","slug":"note-in-webstorm-added-compass-syntax-tips","updated":1426864888207,"excerpt":"","_id":"h0jyzsc7r6584l9v","tags":[],"photos":[],"link":""},{"layout":"post","title":"[筆記] Chrome workspace with Sass and Compass","date":1395798840000,"comments":true,"categories":[],"content":"","source":"_posts/2014-03-26-note-chrome-workspace-with-sass-and-compass.md","raw":"---\nlayout: post\ntitle: '[筆記] Chrome workspace with Sass and Compass'\ndate: 2014-03-26 09:54\ncomments: true\ncategories: \n---\n","slug":"note-chrome-workspace-with-sass-and-compass","updated":1426864888426,"excerpt":"","_id":"23jxuw3zn4b04nlc","tags":[],"photos":[],"link":""},{"layout":"post","title":"[筆記] WebStorm中Sass File Watcher的一顆小地雷","date":1394253420000,"comments":true,"categories":[],"content":"<p>當我們在寫Sass的時候，把它拆成各個區塊方便管理是一件很正常的事，像這樣：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">partial</span>.sass</div><div class=\"line\">main.sass</div></pre></td></tr></table></figure>\n\n<p>然後，因為partial.sass不需要被compiler成partial.css，所以檔名前面會加上加上<code>_</code>，變成_partial.sass。到目前為止一切都很合理。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_partial.sass</div><div class=\"line\">main.sass</div></pre></td></tr></table></figure>\n\n<p>接下來在main.sass中引入這個partial，看起來沒什麼問題，不過接下來就是地雷了</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"at_rule\">@<span class=\"keyword\">import</span> partial</span></div><div class=\"line\"></div><div class=\"line\">// main.sass</div></pre></td></tr></table></figure>\n\n<p>通常，我們會希望在更改_partial中的內容後，重新編譯引入他的檔案，也就是main.sass。爬過stackoverflow之後，可以知道WebStorm提供了一個選項給你，叫做”track only root files”，取消的話她就會連帶編譯跟這個檔有關的所有檔案，很貼心對吧？</p>\n<p>…才怪，當你實際測試之後會發現，更改_partial.sass的內容後，並沒有編譯出新的main.css，要把import的檔名改一下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"at_rule\">@<span class=\"keyword\">import</span> _partial</span></div><div class=\"line\"></div><div class=\"line\">// main.sass</div></pre></td></tr></table></figure>\n\n<p>這樣子，_partial.sass的內容被更改的時候，就會一併編譯main.sass了。不過問題還沒結束，仔細看資料夾，你會發現多了一個_partial.css…沒錯，他連<code>_</code>開頭的檔案也編譯了。</p>\n<p>正確的解法應該是， <strong>要勾選track only root files，然後import的檔名必須加上<code>_</code></strong>，這樣就能正確的編譯且不產生多餘的檔案了。</p>\n<blockquote>\n<p>…馬德，stackoverflow誤我半天…</p>\n</blockquote>\n","source":"_posts/2014-03-08-note-sass-with-webstorm.md","raw":"---\nlayout: post\ntitle: '[筆記] WebStorm中Sass File Watcher的一顆小地雷'\ndate: 2014-03-08 12:37\ncomments: true\ncategories: \n---\n當我們在寫Sass的時候，把它拆成各個區塊方便管理是一件很正常的事，像這樣：\n```\npartial.sass\nmain.sass\n```\n然後，因為partial.sass不需要被compiler成partial.css，所以檔名前面會加上加上`_`，變成\\_partial.sass。到目前為止一切都很合理。\n```\n_partial.sass\nmain.sass\n```\n接下來在main.sass中引入這個partial，看起來沒什麼問題，不過接下來就是地雷了\n```css\n@import partial\n\n// main.sass\n```\n通常，我們會希望在更改\\_partial中的內容後，重新編譯引入他的檔案，也就是main.sass。爬過stackoverflow之後，可以知道WebStorm提供了一個選項給你，叫做\"track only root files\"，取消的話她就會連帶編譯跟這個檔有關的所有檔案，很貼心對吧？\n\n...才怪，當你實際測試之後會發現，更改\\_partial.sass的內容後，並沒有編譯出新的main.css，要把import的檔名改一下：\n```css\n@import _partial\n\n// main.sass\n```\n這樣子，\\_partial.sass的內容被更改的時候，就會一併編譯main.sass了。不過問題還沒結束，仔細看資料夾，你會發現多了一個\\_partial.css...沒錯，他連`_`開頭的檔案也編譯了。\n\n正確的解法應該是， **要勾選track only root files，然後import的檔名必須加上`_`**，這樣就能正確的編譯且不產生多餘的檔案了。\n\n> ...馬德，stackoverflow誤我半天...","slug":"note-sass-with-webstorm","updated":1426864888422,"excerpt":"","_id":"4djff53yfvi6rj97","tags":[],"photos":[],"link":""},{"layout":"post","title":"[筆記] Cordova with jQuery Mobile & Backbone的一些小問題","date":1398809100000,"comments":true,"categories":[],"content":"<p>小弟這幾個月做前端的心得是：有些東西看起來很美好，睡到床上後才知道…（喂<br>下面筆記一下使用jQuery Mobile 1.4.2 + Backbone + Cordova 3.4開發中遇到的一些“小”問題</p>\n<h2 id=\"Cordova\">Cordova</h2>\n<hr>\n<h4 id=\"Q:_為什麼我明明照官方Doc的說明放好icons了，build出來的app圖示還是那隻小機器人？\">Q: 為什麼我明明照<a href=\"http://cordova.apache.org/docs/en/3.4.0/config_ref_images.md.html#Icons%20and%20Splash%20Screens\" target=\"_blank\" rel=\"external\">官方Doc</a>的說明放好icons了，build出來的app圖示還是那隻小機器人？</h4>\n<p>A: 因為愛，愛一直都是沒有理由的…好吧，老實說我不知道這是新版的cordova bug還是有什麼地方出了問題，導致cordova add platform的時候生出來的icon永遠都是那隻小機器人。解法有二：一是自己在不同平台中替換，ios的位置放在<code>platforms\\ios\\{projectName}\\Resoures\\icons</code>裏面，也可以直接用xcode換（其實這樣比較快，省得取一堆檔名），在Basic settings裡面就找的到，應該不用截圖了XD。android的位置則是在<code>platforms\\android\\res\\drawable-{dpi}</code>裡面，Eclipse裡面應該也有地方可以換，不過公司電腦開Eclips超慢所以我沒開過…。第二種方法是用別人寫好的hook幫你做上面那些事，例如<a href=\"https://gist.github.com/apla/6179863\" target=\"_blank\" rel=\"external\">這個</a>。<br>不過，用上面第一種方法做替換的話，cordova重新建平台的時候又會洗回來一次(rm/add platform時，build不會)，所以並不是個很美好的解法，不過當你被死線追著跑的時候就先將就頂著吧…Orz</p>\n<h4 id=\"Q:_為什麼config-xml上的Orientation明明有設定portrait了，可是android上卻沒有用？\">Q: 為什麼config.xml上的Orientation明明有設定portrait了，可是android上卻沒有用？</h4>\n<p>A: 根據stackoverflow上<a href=\"http://stackoverflow.com/questions/21212246/cordova-ignores-screen-orientation-lock\" target=\"_blank\" rel=\"external\">這篇回答</a>的說法，這是個bug，不過他應該已經被fix掉了才對，那為什麼還會有問題呢？去檢查AndroidManifest.xml中的設定後，發現<code>android:screenOrientation</code>是<code>userPortrait</code>，兩者間的差別在於：</p>\n<blockquote>\n<p>If the user has locked sensor-based rotation, this behaves the same as portrait, otherwise it behaves the same as sensorPortrait.</p>\n</blockquote>\n<p>可是不對啊，我明明是下portrait，為什麼會變成userPortait？打開cordova裡面一隻叫做<code>android_parser.js</code>的檔案，會發現下面這段：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Set the orientation in the AndroidManifest</span></div><div class=\"line\"><span class=\"keyword\">var</span> orientationPref = <span class=\"keyword\">this</span>.findOrientationPreference(config);</div><div class=\"line\"><span class=\"keyword\">if</span> (orientationPref) {</div><div class=\"line\">\t<span class=\"keyword\">var</span> act = manifest.getroot().find(<span class=\"string\">'./application/activity'</span>);</div><div class=\"line\">\t<span class=\"keyword\">switch</span> (orientationPref) {</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'default'</span>:</div><div class=\"line\">\t\t\t<span class=\"keyword\">delete</span> act.attrib[<span class=\"string\">\"android:screenOrientation\"</span>];</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'portrait'</span>:</div><div class=\"line\">\t\t\tact.attrib[<span class=\"string\">\"android:screenOrientation\"</span>] = <span class=\"string\">'userPortrait'</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'landscape'</span>:</div><div class=\"line\">\t\t\tact.attrib[<span class=\"string\">\"android:screenOrientation\"</span>] = <span class=\"string\">'userLandscape'</span>;</div><div class=\"line\">\t\t}</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>簡單來說，就是cordova在build android時會把”portrait”轉成”userPortait”，”landspace”轉成”userLandspace”，不知道該說她貼心還是雞婆…<br>解法就是把上面的code稍微改一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Set the orientation in the AndroidManifest</span></div><div class=\"line\"><span class=\"keyword\">var</span> orientationPref = <span class=\"keyword\">this</span>.findOrientationPreference(config);</div><div class=\"line\"><span class=\"keyword\">if</span> (orientationPref) {</div><div class=\"line\">\t<span class=\"keyword\">var</span> act = manifest.getroot().find(<span class=\"string\">'./application/activity'</span>);</div><div class=\"line\">\t<span class=\"keyword\">switch</span> (orientationPref) {</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'default'</span>:</div><div class=\"line\">\t\t\t<span class=\"keyword\">delete</span> act.attrib[<span class=\"string\">\"android:screenOrientation\"</span>];</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'portrait'</span>:</div><div class=\"line\">\t\t\t<span class=\"comment\">// act.attrib[\"android:screenOrientation\"] = 'userPortrait';</span></div><div class=\"line\">\t\t\tact.attrib[<span class=\"string\">\"android:screenOrientation\"</span>] = <span class=\"string\">'portrait'</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'landscape'</span>:</div><div class=\"line\">\t\t\t<span class=\"comment\">// act.attrib[\"android:screenOrientation\"] = 'userLandscape';</span></div><div class=\"line\">\t\t\tact.attrib[<span class=\"string\">\"android:screenOrientation\"</span>] = <span class=\"string\">'landscape'</span>;</div><div class=\"line\">\t\t}</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h4 id=\"Q:_在config-xml中設置中文的name會不會有問題？\">Q: 在config.xml中設置中文的name會不會有問題？</h4>\n<p>A: 老實說，這問題很微妙，因為我在config.xml中設定app name為中文時，build android會發生問題，可是華文圈好像沒有相關災情傳出…如果跟我一樣碰到的話，就在發佈前去<code>platforms/android/res/values/string.xml</code>裡面改吧。</p>\n<h2 id=\"jQuery_Mobile\">jQuery Mobile</h2>\n<hr>\n<h4 id=\"Q:_changepage的時候會抖一下，為什麼？\">Q: changepage的時候會抖一下，為什麼？</h4>\n<p>A: 就跟你上廁所的時候會抖一下是一樣的道理（誤<br>這是很多人都會碰到的問題，不知道為什麼在transform的時候page的高會多出1px，結束後套上正常的min-height就產生了那一點點的抖動。解法有很多種，<a href=\"http://outof.me/fixing-flickers-jumps-of-jquery-mobile-transitions-in-phonegap-apps/\" target=\"_blank\" rel=\"external\">這個</a>試過可以，不過會產生另一個問題就是ios會不能捲動page content，需要<a href=\"https://github.com/cubiq/iscroll\" target=\"_blank\" rel=\"external\">iscroll.js</a>；後來發現johnbender<a href=\"https://github.com/jquery/jquery-mobile/issues/2846\" target=\"_blank\" rel=\"external\">有解釋這個問題</a>，原因是jQuery mobile會預先向下scroll 1px來隱藏nav bar，解決方法就是在jQuery mobile引入後，還沒初始化頁面前設定$.mobile.defaultHomeScroll=0。</p>\n<blockquote>\n<p>寶傑，你知道嗎，這1px搞了我兩天…</p>\n</blockquote>\n<h4 id=\"Q:_changepage的時候會閃一下，為什麼？\">Q: changepage的時候會閃一下，為什麼？</h4>\n<p>A: 首先，先確認不是你的眼睛在閃（無誤），畢竟幹這行可說是靠眼睛吃飯的，要好好保養啊…<br>如果眼睛沒問題的話，那就在page style上加個<code>backface-visibility: hidden</code>就可以了。</p>\n<h2 id=\"Backbone\">Backbone</h2>\n<hr>\n<h4 id=\"Q:_touch_event會被觸發兩次，或是某些頁面的even時好時壞？\">Q: touch event會被觸發兩次，或是某些頁面的even時好時壞？</h4>\n<p>A: 檢查有沒有發生”ghost view”的狀況，也就是某個（或某些）dom被綁了一個以上的view，這種事情常發生在動態新增view的時候。</p>\n","source":"_posts/2014-04-30-note-cordova-with-jquery-mobile.md","raw":"---\nlayout: post\ntitle: '[筆記] Cordova with jQuery Mobile & Backbone的一些小問題'\ndate: 2014-04-30 06:05\ncomments: true\ncategories: \n---\n小弟這幾個月做前端的心得是：有些東西看起來很美好，睡到床上後才知道...（喂\n下面筆記一下使用jQuery Mobile 1.4.2 + Backbone + Cordova 3.4開發中遇到的一些“小”問題\n\n##Cordova\n---\n####Q: 為什麼我明明照[官方Doc](http://cordova.apache.org/docs/en/3.4.0/config_ref_images.md.html#Icons%20and%20Splash%20Screens)的說明放好icons了，build出來的app圖示還是那隻小機器人？\nA: 因為愛，愛一直都是沒有理由的...好吧，老實說我不知道這是新版的cordova bug還是有什麼地方出了問題，導致cordova add platform的時候生出來的icon永遠都是那隻小機器人。解法有二：一是自己在不同平台中替換，ios的位置放在`platforms\\ios\\{projectName}\\Resoures\\icons`裏面，也可以直接用xcode換（其實這樣比較快，省得取一堆檔名），在Basic settings裡面就找的到，應該不用截圖了XD。android的位置則是在`platforms\\android\\res\\drawable-{dpi}`裡面，Eclipse裡面應該也有地方可以換，不過公司電腦開Eclips超慢所以我沒開過...。第二種方法是用別人寫好的hook幫你做上面那些事，例如[這個](https://gist.github.com/apla/6179863)。\n不過，用上面第一種方法做替換的話，cordova重新建平台的時候又會洗回來一次(rm/add platform時，build不會)，所以並不是個很美好的解法，不過當你被死線追著跑的時候就先將就頂著吧...Orz\n\n####Q: 為什麼config.xml上的Orientation明明有設定portrait了，可是android上卻沒有用？\nA: 根據stackoverflow上[這篇回答](http://stackoverflow.com/questions/21212246/cordova-ignores-screen-orientation-lock)的說法，這是個bug，不過他應該已經被fix掉了才對，那為什麼還會有問題呢？去檢查AndroidManifest.xml中的設定後，發現`android:screenOrientation`是`userPortrait`，兩者間的差別在於：\n>If the user has locked sensor-based rotation, this behaves the same as portrait, otherwise it behaves the same as sensorPortrait.\n\n可是不對啊，我明明是下portrait，為什麼會變成userPortait？打開cordova裡面一隻叫做`android_parser.js`的檔案，會發現下面這段：\n```js\n// Set the orientation in the AndroidManifest\nvar orientationPref = this.findOrientationPreference(config);\nif (orientationPref) {\n\tvar act = manifest.getroot().find('./application/activity');\n\tswitch (orientationPref) {\n\t\tcase 'default':\n\t\t\tdelete act.attrib[\"android:screenOrientation\"];\n\t\t\tbreak;\n\t\tcase 'portrait':\n\t\t\tact.attrib[\"android:screenOrientation\"] = 'userPortrait';\n\t\t\tbreak;\n\t\tcase 'landscape':\n\t\t\tact.attrib[\"android:screenOrientation\"] = 'userLandscape';\n\t\t}\n}\n```\n簡單來說，就是cordova在build android時會把\"portrait\"轉成\"userPortait\"，\"landspace\"轉成\"userLandspace\"，不知道該說她貼心還是雞婆...\n解法就是把上面的code稍微改一下：\n```js\n// Set the orientation in the AndroidManifest\nvar orientationPref = this.findOrientationPreference(config);\nif (orientationPref) {\n\tvar act = manifest.getroot().find('./application/activity');\n\tswitch (orientationPref) {\n\t\tcase 'default':\n\t\t\tdelete act.attrib[\"android:screenOrientation\"];\n\t\t\tbreak;\n\t\tcase 'portrait':\n\t\t\t// act.attrib[\"android:screenOrientation\"] = 'userPortrait';\n\t\t\tact.attrib[\"android:screenOrientation\"] = 'portrait';\n\t\t\tbreak;\n\t\tcase 'landscape':\n\t\t\t// act.attrib[\"android:screenOrientation\"] = 'userLandscape';\n\t\t\tact.attrib[\"android:screenOrientation\"] = 'landscape';\n\t\t}\n}\n```\n####Q: 在config.xml中設置中文的name會不會有問題？\nA: 老實說，這問題很微妙，因為我在config.xml中設定app name為中文時，build android會發生問題，可是華文圈好像沒有相關災情傳出...如果跟我一樣碰到的話，就在發佈前去`platforms/android/res/values/string.xml`裡面改吧。\n\n\n##jQuery Mobile\n---\n####Q: changepage的時候會抖一下，為什麼？\nA: 就跟你上廁所的時候會抖一下是一樣的道理（誤\n這是很多人都會碰到的問題，不知道為什麼在transform的時候page的高會多出1px，結束後套上正常的min-height就產生了那一點點的抖動。解法有很多種，[這個](http://outof.me/fixing-flickers-jumps-of-jquery-mobile-transitions-in-phonegap-apps/)試過可以，不過會產生另一個問題就是ios會不能捲動page content，需要[iscroll.js](https://github.com/cubiq/iscroll)；後來發現johnbender[有解釋這個問題](https://github.com/jquery/jquery-mobile/issues/2846)，原因是jQuery mobile會預先向下scroll 1px來隱藏nav bar，解決方法就是在jQuery mobile引入後，還沒初始化頁面前設定$.mobile.defaultHomeScroll=0。\n> 寶傑，你知道嗎，這1px搞了我兩天...\n\n####Q: changepage的時候會閃一下，為什麼？\nA: 首先，先確認不是你的眼睛在閃（無誤），畢竟幹這行可說是靠眼睛吃飯的，要好好保養啊...\n如果眼睛沒問題的話，那就在page style上加個`backface-visibility: hidden`就可以了。\n\n##Backbone\n---\n####Q: touch event會被觸發兩次，或是某些頁面的even時好時壞？\nA: 檢查有沒有發生\"ghost view\"的狀況，也就是某個（或某些）dom被綁了一個以上的view，這種事情常發生在動態新增view的時候。\n","slug":"note-cordova-with-jquery-mobile","updated":1426864888430,"excerpt":"","_id":"0q6hbl1dngg9stwr","tags":[],"photos":[],"link":""},{"layout":"post","title":"[教學] YQL十分鐘簡單上手","date":1399848780000,"comments":true,"categories":[],"content":"","source":"_posts/2014-05-12-teaching-yql-for-ten-minutes-easy.md","raw":"---\nlayout: post\ntitle: '[教學] YQL十分鐘簡單上手'\ndate: 2014-05-12 06:53\ncomments: true\ncategories: \n---\n","slug":"teaching-yql-for-ten-minutes-easy","updated":1426864888433,"excerpt":"","_id":"fs4csdpz27gxa8rs","tags":[],"photos":[],"link":""},{"layout":"post","title":"[筆記] Cordova 3.4 with WP8 踩地雷紀錄","date":1400277120000,"comments":true,"categories":[],"content":"<p>這整個過程讓我想到WOW裡的一個成就： <strong>［這真是段漫長又奇妙的旅程］</strong><br>不過漫長奇妙之外還多了很多的痛苦就是了…ORZ</p>\n<h3 id=\"1-_cordova_platform_add_wp8時出現亂碼錯誤\">1. <code>cordova platform add wp8</code>時出現亂碼錯誤</h3>\n<p>…亂碼是要我怎麼debug阿大哥…<br>不過還好下面有stack，可以看到問題出在<code>wp8_parser.js</code>這隻裡面的這段：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">child_process.exec(command, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(err, output, stderr)</span> </span>{</div><div class=\"line\">  events.emit(<span class=\"string\">'verbose'</span>, output);</div><div class=\"line\">  <span class=\"keyword\">if</span> (err) {</div><div class=\"line\">  \td.reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Requirements check failed: '</span> + output + stderr));</div><div class=\"line\">  } <span class=\"keyword\">else</span> {</div><div class=\"line\">  \td.resolve();</div><div class=\"line\">\t}</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>恩，還是沒有頭緒，試著把err catch註解掉，會得到另一個error<code>副檔名 .js 沒有對應的 script 引擎</code><br>於是按照google大神的指示，裝了Windows Scrip，然後再把原本的err catch加回去…就可以了。</p>\n<blockquote>\n<p>老實說小弟才疏學淺完全不知道發生了什麼事…懇請前輩們指點</p>\n</blockquote>\n<h3 id=\"2-_cordova_platform_add_wp8成功，但是在CREAT_SUCCESS之後，要加入plugin時發生錯誤Non-white_space_before_first_tag\">2. <code>cordova platform add wp8</code>成功，但是在CREAT SUCCESS之後，要加入plugin時發生錯誤<code>Non-white space before first tag</code></h3>\n<p>原因出在<code>\\platforms\\wp8\\CordovaWP8AppProj.csproj</code>跟<code>\\platforms\\wp8\\Properties\\WMAppManifest.xml</code>這兩隻檔案一開始的宣告出現亂碼。<br>這是個尚未被解決的Bug，可以參考<a href=\"https://issues.apache.org/jira/browse/CB-6301\" target=\"_blank\" rel=\"external\">這篇</a><br>雖然提出者的環境是簡體中文，但是最底下的解法在繁中的環境下依然有效：</p>\n<blockquote>\n<p>wei jiang added a comment - 09/Apr/14 14:26<br>I have found a solution for this issue:<br>1、open C:\\Users.cordova\\lib\\wp\\cordova\\3.4.0\\wp8\\bin\\create.js<br>line 68:<br>change<br>‘var f=fso.OpenTextFile(filename,1,2);’<br>to<br>‘var f=fso.OpenTextFile(filename,ForReading,false,TristateFalse);’<br>line 75:<br>change<br>‘var f=fso.OpenTextFile(filename, ForWriting, TristateFalse);’<br>to<br>‘var f=fso.OpenTextFile(filename, ForWriting,true, TristateFalse);’<br>2、Change the encoding of these files to ‘UTF-8 without BOM’<br>in C:\\Users.cordova\\lib\\wp\\cordova\\3.4.0\\wp8\\template<br>App.xaml<br>App.xaml.cs<br>CordovaWP8AppProj.csproj<br>CordovaWP8Solution.sln<br>MainPage.xaml.cs<br>Properties\\WMAppManifest.xml<br>ps:I did this using Notepad++</p>\n</blockquote>\n<p>另外，<a href=\"http://my.oschina.net/arrowing/blog/181476#OSC_h2_14\" target=\"_blank\" rel=\"external\">這篇</a>也有另一種做法，不過可能是系統語言不同的關係，我用這種作法會沒辦法正確的parse xml。</p>\n","source":"_posts/2014-05-17-note-cordova-34-with-wp8-minesweeper-records.md","raw":"---\nlayout: post\ntitle: '[筆記] Cordova 3.4 with WP8 踩地雷紀錄'\ndate: 2014-05-17 05:52\ncomments: true\ncategories: \n---\n這整個過程讓我想到WOW裡的一個成就： **［這真是段漫長又奇妙的旅程］**\n不過漫長奇妙之外還多了很多的痛苦就是了...ORZ\n###1. `cordova platform add wp8`時出現亂碼錯誤\n...亂碼是要我怎麼debug阿大哥...\n不過還好下面有stack，可以看到問題出在`wp8_parser.js`這隻裡面的這段：\n```js\nchild_process.exec(command, function(err, output, stderr) {\n  events.emit('verbose', output);\n  if (err) {\n  \td.reject(new Error('Requirements check failed: ' + output + stderr));\n  } else {\n  \td.resolve();\n\t}\n});\n```\n\n恩，還是沒有頭緒，試著把err catch註解掉，會得到另一個error`副檔名 .js 沒有對應的 script 引擎`\n於是按照google大神的指示，裝了Windows Scrip，然後再把原本的err catch加回去...就可以了。\n> 老實說小弟才疏學淺完全不知道發生了什麼事...懇請前輩們指點\n\n###2. `cordova platform add wp8`成功，但是在CREAT SUCCESS之後，要加入plugin時發生錯誤`Non-white space before first tag`\n原因出在`\\platforms\\wp8\\CordovaWP8AppProj.csproj`跟`\\platforms\\wp8\\Properties\\WMAppManifest.xml`這兩隻檔案一開始的宣告出現亂碼。\n這是個尚未被解決的Bug，可以參考[這篇](https://issues.apache.org/jira/browse/CB-6301)\n雖然提出者的環境是簡體中文，但是最底下的解法在繁中的環境下依然有效：\n> wei jiang added a comment - 09/Apr/14 14:26\nI have found a solution for this issue:\n1、open C:\\Users\\.cordova\\lib\\wp\\cordova\\3.4.0\\wp8\\bin\\create.js\nline 68:\nchange \n'var f=fso.OpenTextFile(filename,1,2);'\nto \n'var f=fso.OpenTextFile(filename,ForReading,false,TristateFalse);'\nline 75:\nchange \n'var f=fso.OpenTextFile(filename, ForWriting, TristateFalse);'\nto \n'var f=fso.OpenTextFile(filename, ForWriting,true, TristateFalse);'\n2、Change the encoding of these files to 'UTF-8 without BOM' \nin C:\\Users\\.cordova\\lib\\wp\\cordova\\3.4.0\\wp8\\template\nApp.xaml\nApp.xaml.cs\nCordovaWP8AppProj.csproj\nCordovaWP8Solution.sln\nMainPage.xaml.cs\nProperties\\WMAppManifest.xml\nps:I did this using Notepad++\n\n另外，[這篇](http://my.oschina.net/arrowing/blog/181476#OSC_h2_14)也有另一種做法，不過可能是系統語言不同的關係，我用這種作法會沒辦法正確的parse xml。","slug":"note-cordova-34-with-wp8-minesweeper-records","updated":1426864888437,"excerpt":"","_id":"7fxjm2iu6c0sm4oh","tags":[],"photos":[],"link":""},{"layout":"post","title":"[筆記] Cordova trouble shooting","date":1401038940000,"comments":true,"categories":[],"content":"<h2 id=\"開發環境：\">開發環境：</h2>\n<p>Editor: WebStorm 7 with Cordova CLI<br>SDK: Cordova 3.4.0 / 3.5.0, Xcode 5.1.1, ADT 22.3.0<br>OS: Mac OSX 10.9.2<br>Device: iPhone 4S(iOS 7), Butterfly(Android 4.4), Samsung S3(Android 4.3), Samsung Note 2(Android 4.3)</p>\n<p>雖然寫這篇文的時間點，官網上的stable版本依然是3.4.1，不過npm上已經有3.5.0了。個人建議可以直接昇到3.5.0，因為有些bug已經在這版解決了，省得你自己去做solution。</p>\n<hr>\n<h2 id=\"1-_Camera在android一直出現Class_not_defind，可是在iOS卻好好的，而且我確定該死的config-xml沒有寫錯，這哪招？\">1. Camera在android一直出現<code>Class not defind</code>，可是在iOS卻好好的，而且我確定該死的config.xml沒有寫錯，這哪招？</h2>\n<p>A: 先用<code>cordova plugin ls</code>檢查一下你的camera plugun叫什麼名字。如果是<code>com.apache.cordova.camera</code>的話，接著檢查你的config.xml…我是說<code>android/res/xml</code>裡面那隻，看看camera那段，應該是要長這樣：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">feature</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"Camera\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"title\">param</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"android-package\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"org.apache.cordova.camera.CameraLauncher\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">feature</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>注意，是<code>org.apache.cordova.camera.CameraLauncher</code>，不是<code>org.apache.cordova.CameraLauncher</code>。如果你出現的是後者，回到通用的那隻config.xml，把<code>&lt;feature name=&quot;Camera&quot;&gt;</code>整個區塊刪掉，重新rm/add plarform一次。</p>\n<h2 id=\"2-_在android_4-4，使用camera-getPicture()方法抓取檔案中的圖片，發生一些奇怪的事：同一張圖片從不同路徑進去點選，有些路徑抓的到（例：相簿），有些路徑卻抓不到（例：最近使用的檔案），why?\">2. 在android 4.4，使用<code>camera.getPicture()</code>方法抓取檔案中的圖片，發生一些奇怪的事：同一張圖片從不同路徑進去點選，有些路徑抓的到（例：相簿），有些路徑卻抓不到（例：最近使用的檔案），why?</h2>\n<p>A: 這是android 4.4的新改變造成的，詳情可以看這篇issue：<a href=\"https://issues.apache.org/jira/browse/CB-5398\" target=\"_blank\" rel=\"external\">Pick image from Library or Photo album on android 4.4</a>，簡單來說就是uri的形式改變了。解決方法有兩種，一種是去改CameraLauncher.java，自己加入kitkat的hack；另外一種是把cordova昇到3.5.0版。對懶人小弟我來說，選哪種很明顯了…XD</p>\n<h2 id=\"3-_為什麼我build_android的時候，platforms/android/assets/www底下的檔案常常沒有被更新？\">3. 為什麼我build android的時候，<code>platforms/android/assets/www</code>底下的檔案常常沒有被更新？</h2>\n<p>A: 之前曾經被這個問題搞到很頭大，連<code>cordova platform rm/add</code>之後都一樣，後來發現似乎是WebStorm的問題…。WebStorm的自動儲存機制好像是先寫到cache中，等累計一部份或是超過一定時間後再寫入disk的實體檔案裡，因此如果改完之後馬上進行build，會讀到尚未被寫入的資料。解決方法是變更後加個ctrl + s(save all)就可以了，不過上面那段原因純屬個人猜測，有錯的話煩請指正。</p>\n<h2 id=\"4-_為什麼用camera拿到的圖片沒有EXIF?\">4. 為什麼用camera拿到的圖片沒有EXIF?</h2>\n<p>A: <code>targetWidth</code>跟<code>targetHeight</code>屬性會把EXIF資訊消掉。</p>\n<h2 id=\"5-_他媽的為什麼Samsung拍出來的圖片總是不會自動轉正，我明明有下correctOrientation:_true了啊！？\">5. 他媽的為什麼Samsung拍出來的圖片總是不會自動轉正，我明明有下<code>correctOrientation: true</code>了啊！？</h2>\n<p>A: 就叫你愛用國貨（誤。這是另一個讓我很頭大的問題，如果你用<code>saveToPhotoAlbum</code>儲存的話，會發生一些很奇妙的事：在相簿中瀏覽的縮圖是轉過的，可是點進去之後的圖片又是沒轉正的；目前是到的解法是自己把暫存copy一份出來存在另外的資料夾裡，這樣在手機相簿裡縮圖和內容點進去就都會是正的（不過app裡面的img還是要自己下css rotate轉）。當你拉到電腦上用一些可以截取EXIF的軟體看，會發現它其實還是沒轉過的，只是大多數的圖片顯示程式都會去讀EXIF裡面的Orientiation然後自動把它轉正，不過也有另外一種做法，例如HTC跟iphone都是直接給你轉正後的檔案。</p>\n<h2 id=\"6-_iOS傳檔案的時候拿到transferFileError_Code:3?\">6. iOS傳檔案的時候拿到transferFileError Code:3?</h2>\n<p>A: 原因很多，通常code3會伴隨500 Error出現，這時候就要問server端到底發生什麼事了。我遇到的狀況是使用預設的fileTransferOption會傳出不帶副檔名的檔案，如果server端是從檔案名稱截取副檔名來判斷類型的話就會出錯，只要不要偷懶自己設定fileTransferOption就OK了。</p>\n<h2 id=\"7-_在Android_4-4，從”最近使用過的檔案”之類4-4新增的資料夾選取的檔案，上傳時fileTransfer會拿到null?\">7. 在Android 4.4，從”最近使用過的檔案”之類4.4新增的資料夾選取的檔案，上傳時fileTransfer會拿到null?</h2>\n<p>A: 原因同Q2，plugin不認識這些4.4新增的路徑，靜待fileTransfer plugin更新，或是跟Q2那篇一樣自己在java檔加入kitkat的hack。</p>\n","source":"_posts/2014-05-26-note-cordova-trouble-shooting.md","raw":"---\nlayout: post\ntitle: '[筆記] Cordova trouble shooting'\ndate: 2014-05-26 01:29\ncomments: true\ncategories: \n---\n##開發環境：\nEditor: WebStorm 7 with Cordova CLI\nSDK: Cordova 3.4.0 / 3.5.0, Xcode 5.1.1, ADT 22.3.0\nOS: Mac OSX 10.9.2\nDevice: iPhone 4S(iOS 7), Butterfly(Android 4.4), Samsung S3(Android 4.3), Samsung Note 2(Android 4.3)\n\n雖然寫這篇文的時間點，官網上的stable版本依然是3.4.1，不過npm上已經有3.5.0了。個人建議可以直接昇到3.5.0，因為有些bug已經在這版解決了，省得你自己去做solution。\n\n---\n##1. Camera在android一直出現`Class not defind`，可是在iOS卻好好的，而且我確定該死的config.xml沒有寫錯，這哪招？\nA: 先用`cordova plugin ls`檢查一下你的camera plugun叫什麼名字。如果是`com.apache.cordova.camera`的話，接著檢查你的config.xml...我是說`android/res/xml`裡面那隻，看看camera那段，應該是要長這樣：\n```xml\n<feature name=\"Camera\">\n\t<param name=\"android-package\" value=\"org.apache.cordova.camera.CameraLauncher\" />\n</feature>\n```\n注意，是`org.apache.cordova.camera.CameraLauncher`，不是`org.apache.cordova.CameraLauncher`。如果你出現的是後者，回到通用的那隻config.xml，把`<feature name=\"Camera\">`整個區塊刪掉，重新rm/add plarform一次。\n\n##2. 在android 4.4，使用`camera.getPicture()`方法抓取檔案中的圖片，發生一些奇怪的事：同一張圖片從不同路徑進去點選，有些路徑抓的到（例：相簿），有些路徑卻抓不到（例：最近使用的檔案），why?\nA: 這是android 4.4的新改變造成的，詳情可以看這篇issue：[Pick image from Library or Photo album on android 4.4](https://issues.apache.org/jira/browse/CB-5398)，簡單來說就是uri的形式改變了。解決方法有兩種，一種是去改CameraLauncher.java，自己加入kitkat的hack；另外一種是把cordova昇到3.5.0版。對懶人小弟我來說，選哪種很明顯了...XD\n\n##3. 為什麼我build android的時候，`platforms/android/assets/www`底下的檔案常常沒有被更新？  \nA: 之前曾經被這個問題搞到很頭大，連`cordova platform rm/add`之後都一樣，後來發現似乎是WebStorm的問題...。WebStorm的自動儲存機制好像是先寫到cache中，等累計一部份或是超過一定時間後再寫入disk的實體檔案裡，因此如果改完之後馬上進行build，會讀到尚未被寫入的資料。解決方法是變更後加個ctrl + s(save all)就可以了，不過上面那段原因純屬個人猜測，有錯的話煩請指正。\n\n##4. 為什麼用camera拿到的圖片沒有EXIF?\nA: `targetWidth`跟`targetHeight`屬性會把EXIF資訊消掉。\n\n##5. 他媽的為什麼Samsung拍出來的圖片總是不會自動轉正，我明明有下`correctOrientation: true`了啊！？\nA: 就叫你愛用國貨（誤。這是另一個讓我很頭大的問題，如果你用`saveToPhotoAlbum`儲存的話，會發生一些很奇妙的事：在相簿中瀏覽的縮圖是轉過的，可是點進去之後的圖片又是沒轉正的；目前是到的解法是自己把暫存copy一份出來存在另外的資料夾裡，這樣在手機相簿裡縮圖和內容點進去就都會是正的（不過app裡面的img還是要自己下css rotate轉）。當你拉到電腦上用一些可以截取EXIF的軟體看，會發現它其實還是沒轉過的，只是大多數的圖片顯示程式都會去讀EXIF裡面的Orientiation然後自動把它轉正，不過也有另外一種做法，例如HTC跟iphone都是直接給你轉正後的檔案。\n\n##6. iOS傳檔案的時候拿到transferFileError Code:3?\nA: 原因很多，通常code3會伴隨500 Error出現，這時候就要問server端到底發生什麼事了。我遇到的狀況是使用預設的fileTransferOption會傳出不帶副檔名的檔案，如果server端是從檔案名稱截取副檔名來判斷類型的話就會出錯，只要不要偷懶自己設定fileTransferOption就OK了。\n\n##7. 在Android 4.4，從\"最近使用過的檔案\"之類4.4新增的資料夾選取的檔案，上傳時fileTransfer會拿到null?\nA: 原因同Q2，plugin不認識這些4.4新增的路徑，靜待fileTransfer plugin更新，或是跟Q2那篇一樣自己在java檔加入kitkat的hack。","slug":"note-cordova-trouble-shooting","updated":1426864888441,"excerpt":"","_id":"t862batead67rhg7","tags":[],"photos":[],"link":""},{"layout":"post","title":"[心得] Debug Cordova app with Android 4.4 and Chrome","date":1401306180000,"comments":true,"categories":[],"content":"<p>在Android 4.4，有新的方式可以用Chrome debug Android 上面的 WebView<br>方法超簡單（以下以cordova app當範例）：</p>\n<ol>\n<li>確定你有Chrome 30+, Android 4.4, 還有一個嗷嗷待哺的cordova app</li>\n<li>用USB把他們連起來，選項該的開該打勾的打勾，就跟平常一樣</li>\n<li>在你的cordova app的<code>onDeviceReady</code>事件加上這段<pre><code> <span class=\"keyword\">if</span>(Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) {\n     <span class=\"keyword\">if</span> ( <span class=\"number\">0</span> != ( getApplcationInfo().flags &amp;= ApplicationInfo.FLAG_DEBUGGABLE ) ) {\n         WebView.setWebContentsDebuggingEnabled(<span class=\"literal\">true</span>);\n     }\n }\n</code></pre></li>\n<li>切到chrome的<code>chrome://inspect/#devices</code>頁面</li>\n<li>勾選Discover USB Devices，應該會看到你的安拙在上面，接著開啟你的cordova app</li>\n<li>現在應該會列出你的app開啟的WebView(通常只有一個)，點下inspect，熟悉的ChromeDevTool就出現了！</li>\n</ol>\n<p>感覺就跟Safari的web inspecter一樣</p>\n","source":"_posts/2014-05-29-experience-debug-cordova-app-with-android-44-and-chrome.md","raw":"---\nlayout: post\ntitle: '[心得] Debug Cordova app with Android 4.4 and Chrome'\ndate: 2014-05-29 03:43\ncomments: true\ncategories: \n---\n在Android 4.4，有新的方式可以用Chrome debug Android 上面的 WebView\n方法超簡單（以下以cordova app當範例）：\n1. 確定你有Chrome 30+, Android 4.4, 還有一個嗷嗷待哺的cordova app\n2. 用USB把他們連起來，選項該的開該打勾的打勾，就跟平常一樣\n3. 在你的cordova app的`onDeviceReady`事件加上這段\n        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n            if ( 0 != ( getApplcationInfo().flags &= ApplicationInfo.FLAG_DEBUGGABLE ) ) {\n                WebView.setWebContentsDebuggingEnabled(true);\n            }\n        }\n4. 切到chrome的`chrome://inspect/#devices`頁面\n5. 勾選Discover USB Devices，應該會看到你的安拙在上面，接著開啟你的cordova app\n6. 現在應該會列出你的app開啟的WebView(通常只有一個)，點下inspect，熟悉的ChromeDevTool就出現了！\n    \n感覺就跟Safari的web inspecter一樣\n \n","slug":"experience-debug-cordova-app-with-android-44-and-chrome","updated":1426864888445,"excerpt":"","_id":"1895wpbcldqsilj7","tags":[],"photos":[],"link":""},{"title":"從logdown到hexo","date":1424964743000,"tags":[],"content":"<p>因為很多很多的因素，這半年有點低潮<br>logdown沒寫半篇文章，社群聚會完全沒參加，github也是一片荒涼…<br>不過新年假期多少恢復了一點元氣；換個新家，換個心情，重新出發!</p>\n<p>話說…我好像換了很多次新家了<br>blogger =&gt; octopress =&gt; jeklly =&gt; logdown =&gt; hexo<br>每次裝潢完沒多久又看到新玩具，然後就…(汗<br>希望這次hexo能撐得久一點:P</p>\n<p>最近這幾天應該會上點style，然後把舊文章修一修<br>順便複習一下markdown語法…還有中文的語法XD</p>\n","source":"_posts/2015-02-26-move-from-logdown-to-hexo.md","raw":"title: 從logdown到hexo\ndate: 2015-02-26 23:32:23\ntags: \n---\n因為很多很多的因素，這半年有點低潮\nlogdown沒寫半篇文章，社群聚會完全沒參加，github也是一片荒涼...\n不過新年假期多少恢復了一點元氣；換個新家，換個心情，重新出發!\n\n話說...我好像換了很多次新家了\nblogger => octopress => jeklly => logdown => hexo\n每次裝潢完沒多久又看到新玩具，然後就...(汗\n希望這次hexo能撐得久一點:P\n\n最近這幾天應該會上點style，然後把舊文章修一修\n順便複習一下markdown語法...還有中文的語法XD","slug":"move-from-logdown-to-hexo","updated":1426864888447,"excerpt":"","_id":"6nu4y0bc589tfvwy","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Learn es6 with babel - Arrows","date":1426428121000,"tags":["1wxlw98aw60tod2s"],"content":"<p>在ES6中，可以使用<code>=&gt;</code>來定義function。這是一個很類似coffeescript的語法糖（事實上es6有很大一部分是語法糖，個人很喜歡這種做法，與其去改變語言的本質，不如讓語言順著原本的脈絡慢慢茁壯）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//es6</span></div><div class=\"line\"><span class=\"keyword\">var</span> f = (foo) =&gt; bar;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//babel</span></div><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(foo)</span> </span>{</div><div class=\"line\">  <span class=\"keyword\">return</span> bar;</div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<p>當有參數，小括號可以省略</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//es6</span></div><div class=\"line\"><span class=\"keyword\">var</span> f = foo =&gt; bar;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//babel</span></div><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(foo)</span> </span>{</div><div class=\"line\">  <span class=\"keyword\">return</span> bar;</div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<p>當<code>return</code>不是單一Expression時，需要用大括號把它包起來，就像一般在寫<code>function</code>一樣</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//es6</span></div><div class=\"line\"><span class=\"keyword\">var</span> foo = (v) =&gt; {</div><div class=\"line\">  <span class=\"keyword\">if</span> (v === bar)</div><div class=\"line\">    play(v);</div><div class=\"line\">};</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(v)</span> </span>{</div><div class=\"line\">  <span class=\"keyword\">if</span> (v === bar) play(v);</div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<p>它可以讓code更加的簡短且語意化，例如用在callback上</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//js</span></div><div class=\"line\">foo(res =&gt; res + <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//babel</span></div><div class=\"line\">foo(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(res)</span> </span>{</div><div class=\"line\">  <span class=\"keyword\">return</span> res + <span class=\"number\">1</span>;</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>有種lambda的感覺，對吧？<br>要注意的是，如同在coffeescript中一樣，fat arrow(<code>=&gt;</code>)除了是function的縮寫之外，還具有<strong>在定義時綁定<code>this</code></strong>的特性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//js</span></div><div class=\"line\"><span class=\"keyword\">var</span> john = {</div><div class=\"line\">  _name: <span class=\"string\">\"John\"</span>,</div><div class=\"line\">  _friends: [<span class=\"string\">'Mary'</span>],</div><div class=\"line\">  printFriends: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">this</span>._friends.forEach(friendName =&gt;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>._name + <span class=\"string\">\" knows \"</span> + friendName));</div><div class=\"line\">      <span class=\"comment\">//因為上面使用fat arrow的關係, this才會被綁定為\"定義時的this\"</span></div><div class=\"line\">  }</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//babel</span></div><div class=\"line\"><span class=\"keyword\">var</span> john = {</div><div class=\"line\">  _name: <span class=\"string\">\"John\"</span>,</div><div class=\"line\">  _friends: [<span class=\"string\">\"Mary\"</span>],</div><div class=\"line\">  printFriends: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printFriends</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"comment\">//實現方式其實就是我們常在寫的that = this</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>._friends.forEach(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(friendName)</span> </span>{</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(_this._name + <span class=\"string\">\" knows \"</span> + friendName);</div><div class=\"line\">    });</div><div class=\"line\">  }</div><div class=\"line\">};</div><div class=\"line\"></div><div class=\"line\">john.printFriends()</div><div class=\"line\"><span class=\"comment\">// &lt;= John knows Mary</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//-- 使用function的版本</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//js</span></div><div class=\"line\"><span class=\"keyword\">var</span> john = {</div><div class=\"line\">  _name: <span class=\"string\">\"John\"</span>,</div><div class=\"line\">  _friends: [<span class=\"string\">'Mary'</span>],</div><div class=\"line\">  printFriends: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">this</span>._friends.forEach(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(friendName)</span></span>{</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>._name + <span class=\"string\">\" knows \"</span> + friendName)</div><div class=\"line\">      <span class=\"comment\">//這裡使用的是function，this會在呼叫時才決定要指向誰</span></div><div class=\"line\">    });</div><div class=\"line\">  }</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">john.printFriends()</div><div class=\"line\"><span class=\"comment\">// if es5 &lt;= undefined knows Mary</span></div><div class=\"line\"><span class=\"comment\">// if es6 &lt;= Cannot read property '_name' of undefined</span></div><div class=\"line\"><span class=\"comment\">// 在es5中，當this指向全域時會得到window，但在es6會得到undefined</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-03-15-learn-es6-with-babel.md","raw":"title: Learn es6 with babel - Arrows\ndate: 2015-03-15 22:02:01\ntags: learning, es6\n---\n在ES6中，可以使用`=>`來定義function。這是一個很類似coffeescript的語法糖（事實上es6有很大一部分是語法糖，個人很喜歡這種做法，與其去改變語言的本質，不如讓語言順著原本的脈絡慢慢茁壯）\n```js\n//es6\nvar f = (foo) => bar;\n\n//babel\nvar f = function (foo) {\n  return bar;\n};\n```\n當有參數，小括號可以省略\n```js\n//es6\nvar f = foo => bar;\n\n//babel\nvar f = function (foo) {\n  return bar;\n};\n```\n當`return`不是單一Expression時，需要用大括號把它包起來，就像一般在寫`function`一樣\n```js\n//es6\nvar foo = (v) => {\n  if (v === bar)\n    play(v);\n};\n\nvar foo = function (v) {\n  if (v === bar) play(v);\n};\n```\n它可以讓code更加的簡短且語意化，例如用在callback上\n```js\n//js\nfoo(res => res + 1);\n\n//babel\nfoo(function (res) {\n  return res + 1;\n});\n```\n有種lambda的感覺，對吧？\n要注意的是，如同在coffeescript中一樣，fat arrow(`=>`)除了是function的縮寫之外，還具有**在定義時綁定`this`**的特性\n```js\n//js\nvar john = {\n  _name: \"John\",\n  _friends: ['Mary'],\n  printFriends: function() {\n    this._friends.forEach(friendName =>\n      console.log(this._name + \" knows \" + friendName));\n      //因為上面使用fat arrow的關係, this才會被綁定為\"定義時的this\"\n  }\n}\n\n//babel\nvar john = {\n  _name: \"John\",\n  _friends: [\"Mary\"],\n  printFriends: function printFriends() {\n    var _this = this;\n    //實現方式其實就是我們常在寫的that = this\n\n    this._friends.forEach(function (friendName) {\n      return console.log(_this._name + \" knows \" + friendName);\n    });\n  }\n};\n\njohn.printFriends()\n// <= John knows Mary\n\n//-- 使用function的版本\n\n//js\nvar john = {\n  _name: \"John\",\n  _friends: ['Mary'],\n  printFriends: function() {\n    this._friends.forEach(function(friendName){\n      console.log(this._name + \" knows \" + friendName)\n      //這裡使用的是function，this會在呼叫時才決定要指向誰\n    });\n  }\n}\n\njohn.printFriends()\n// if es5 <= undefined knows Mary\n// if es6 <= Cannot read property '_name' of undefined\n// 在es5中，當this指向全域時會得到window，但在es6會得到undefined\n```\n","slug":"learn-es6-with-babel","updated":1426864888455,"excerpt":"","_id":"9oil527wz5vyvsz6","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"learning es6 with babel - const","date":1426865352000,"tags":[],"content":"<p><code>const</code>用來聲明常量，也就是該變數的值在聲明後不會再改變，跟<code>let</code>一樣有block scope，沒有<br>hoisting</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//es6</span></div><div class=\"line\"><span class=\"keyword\">const</span> PI = <span class=\"number\">3.14159</span>;</div><div class=\"line\"><span class=\"comment\">// 按照js的naming rule, 常量應該全部大寫</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(PI); <span class=\"comment\">// &lt;= 3.14159</span></div><div class=\"line\"></div><div class=\"line\">PI = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(PI); <span class=\"comment\">// &lt;= 3.14159</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> PI = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(PI); <span class=\"comment\">// &lt;= 3.14159</span></div></pre></td></tr></table></figure>\n\n<p>babel會在compile階段就檢查<code>PI</code>是不是在宣告後有試圖去改變他，所以上面這段會出現Error</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">repl: Line <span class=\"number\">6</span>: <span class=\"string\">\"PI\"</span> is read-only</div><div class=\"line\">  <span class=\"number\">4</span> <span class=\"string\">| console.log(PI); // &lt;= 3.14159</span></div><div class=\"line\">  <span class=\"number\">5</span> <span class=\"string\">|</span></div><div class=\"line\">&gt; <span class=\"number\">6</span> <span class=\"string\">| PI = 3;</span></div><div class=\"line\">    <span class=\"string\">| ^</span></div><div class=\"line\">  <span class=\"number\">7</span> <span class=\"string\">| console.log(PI); // &lt;= 3.14159</span></div><div class=\"line\">  <span class=\"number\">8</span> <span class=\"string\">|</span></div><div class=\"line\">  <span class=\"number\">9</span> <span class=\"string\">|</span></div></pre></td></tr></table></figure>\n\n<p>由於常量的特性是在compile階段檢查的，所以babel對於<code>const</code>其餘特性(block scope,<br>  no hoising)的實現方式就跟<code>let</code>一樣</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//es6</span></div><div class=\"line\">{</div><div class=\"line\">  <span class=\"keyword\">const</span> PI = <span class=\"number\">3.14159</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//babel</span></div><div class=\"line\"><span class=\"pi\">\"use strict\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _temporalAssertDefined = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(val, name, undef)</span> </span>{</div><div class=\"line\">  <span class=\"keyword\">if</span> (val === undef) {</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">ReferenceError</span>(name + <span class=\"string\">\" is not defined - temporal dead zone\"</span>);</div><div class=\"line\">  }</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">};</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _temporalUndefined = {};</div><div class=\"line\">{</div><div class=\"line\">  <span class=\"keyword\">var</span> PI = _temporalUndefined;</div><div class=\"line\">  PI = <span class=\"number\">3.14159</span>;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>要注意的是<code>const</code>不等於<code>Object.freeze()</code>：<code>const</code>是固定變數的參考，<code>Object.freeze()</code><br>則是固定變數參考對象的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> foo = {};</div><div class=\"line\"></div><div class=\"line\">foo.prop = <span class=\"number\">123</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo.prop); <span class=\"comment\">// &lt;= 123</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> bar = {};</div><div class=\"line\"><span class=\"built_in\">Object</span>.freeze(bar);</div><div class=\"line\"></div><div class=\"line\">bar.prop = <span class=\"number\">123</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(bar.prop); <span class=\"comment\">// &lt;= undefined</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-03-20-learning-es6-with-babel-const.md","raw":"title: learning es6 with babel - const\ndate: 2015-03-20 23:29:12\ntags:\n---\n\n`const`用來聲明常量，也就是該變數的值在聲明後不會再改變，跟`let`一樣有block scope，沒有\nhoisting\n```js\n//es6\nconst PI = 3.14159;\n// 按照js的naming rule, 常量應該全部大寫\nconsole.log(PI); // <= 3.14159\n\nPI = 3;\nconsole.log(PI); // <= 3.14159\n\nconst PI = 3;\nconsole.log(PI); // <= 3.14159\n```\nbabel會在compile階段就檢查`PI`是不是在宣告後有試圖去改變他，所以上面這段會出現Error\n```\nrepl: Line 6: \"PI\" is read-only\n  4 | console.log(PI); // <= 3.14159\n  5 |\n> 6 | PI = 3;\n    | ^\n  7 | console.log(PI); // <= 3.14159\n  8 |\n  9 |\n```\n由於常量的特性是在compile階段檢查的，所以babel對於`const`其餘特性(block scope,\n  no hoising)的實現方式就跟`let`一樣\n```js\n//es6\n{\n  const PI = 3.14159;\n}\n\n//babel\n\"use strict\";\n\nvar _temporalAssertDefined = function (val, name, undef) {\n  if (val === undef) {\n    throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n  }\n  return true;\n};\n\nvar _temporalUndefined = {};\n{\n  var PI = _temporalUndefined;\n  PI = 3.14159;\n}\n```\n要注意的是`const`不等於`Object.freeze()`：`const`是固定變數的參考，`Object.freeze()`\n則是固定變數參考對象的值\n```js\nconst foo = {};\n\nfoo.prop = 123;\nconsole.log(foo.prop); // <= 123\n\nvar bar = {};\nObject.freeze(bar);\n\nbar.prop = 123;\nconsole.log(bar.prop); // <= undefined\n```\n","slug":"learning-es6-with-babel-const","updated":1426865352589,"excerpt":"","_id":"5bfmsxuuqjhh19gt","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"learning es6 with babel - let","date":1426865340000,"tags":[],"content":"<p><code>let</code>是另一種宣告變數的方式，他有幾個特點：有block scope，沒有hoisting，不能重複宣告</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//es6</span></div><div class=\"line\">{</div><div class=\"line\">  <span class=\"keyword\">let</span> foo = <span class=\"string\">\"foo\"</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> bar = <span class=\"string\">\"bar\"</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">//&lt;= Error: foo is not defined</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(bar); <span class=\"comment\">//&lt;= bar</span></div></pre></td></tr></table></figure>\n\n<p>babel對他的實現方式是在前面加個prefix<code>_</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//babel</span></div><div class=\"line\"><span class=\"keyword\">var</span> _temporalUndefined = {};</div><div class=\"line\">{</div><div class=\"line\">  <span class=\"keyword\">var</span> _foo = _temporalUndefined;</div><div class=\"line\">  _foo = <span class=\"string\">\"foo\"</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> bar = <span class=\"string\">\"bar\"</span>;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><code>let</code>不像<code>var</code>一樣具有hoisting的特性，這造成一些現象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//es6</span></div><div class=\"line\">{</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// &lt;=x is not defined - temporal dead zone</span></div><div class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>在一個block scope中，只要有進行<code>let</code>宣告的變數，那麼該變數在被宣告前都不能被使用。<br>這個區塊就被稱為temporal dead zone</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//es6</span></div><div class=\"line\">{</div><div class=\"line\">  <span class=\"comment\">//-- dead zone for x start --</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// &lt;=ReferenceError: x is not defined - temporal dead zone</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//-- dead zone for x end --</span></div><div class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"comment\">// u can use x now.</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// &lt;= 1</span></div><div class=\"line\"></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>babel的實現方式如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"pi\">\"use strict\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _temporalAssertDefined = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(val, name, undef)</span> </span>{</div><div class=\"line\">  <span class=\"keyword\">if</span> (val === undef) {</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">ReferenceError</span>(name + <span class=\"string\">\" is not defined - temporal dead zone\"</span>);</div><div class=\"line\">  }</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">};</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _temporalUndefined = {};</div><div class=\"line\">{</div><div class=\"line\">  <span class=\"keyword\">var</span> x = _temporalUndefined;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(_temporalAssertDefined(x, <span class=\"string\">\"x\"</span>, _temporalUndefined) && x);</div><div class=\"line\"></div><div class=\"line\">  x = {};</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(_temporalAssertDefined(x, <span class=\"string\">\"x\"</span>, _temporalUndefined) && x);</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>他一開始先在全域宣告一個<code>_temporalUndefined</code>物件作為not defined flag，當我們在block scope中做<code>let</code>宣告時，<br>他會先在scope的開始部分就先用<code>var</code>宣告物件，然後指向全域的<code>_temporalUndefined</code>物件。接下來<br>在每次調用<code>x</code>時，都會先檢查他的參考對象是不是<code>_temporalUndefined</code>，如果是的話就拋出<br><code>ReferenceError</code></p>\n<p>可以注意的點是，<code>val === undef</code>比較的是參照，而不是值，所以就算你用<code>let x={}</code>也不會怎樣，<br>因為這兩個<code>{}</code>是不同的匿名物件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//es6</span></div><div class=\"line\">{</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// &lt;=ReferenceError: x is not defined - temporal dead zone</span></div><div class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//babel</span></div><div class=\"line\"><span class=\"pi\">\"use strict\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _temporalAssertDefined = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(val, name, undef)</span> </span>{</div><div class=\"line\">  <span class=\"keyword\">if</span> (val === undef) {</div><div class=\"line\">    <span class=\"comment\">// 這裡是檢查參照，而不是值</span></div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">ReferenceError</span>(name + <span class=\"string\">\" is not defined - temporal dead zone\"</span>);</div><div class=\"line\">  }</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">};</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//宣告一個匿名物件，指定物件_temporalUndefined參照他</span></div><div class=\"line\"><span class=\"keyword\">var</span> _temporalUndefined = {};</div><div class=\"line\"></div><div class=\"line\">{</div><div class=\"line\">  <span class=\"keyword\">var</span> x = _temporalUndefined;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(_temporalAssertDefined(x, <span class=\"string\">\"x\"</span>, _temporalUndefined) && x);</div><div class=\"line\">  <span class=\"comment\">//宣告一個匿名物件，指定物件x參照他。酸然值相同，但這跟上面那個匿名物件完全無關</span></div><div class=\"line\">  x = {};</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(_temporalAssertDefined(x, <span class=\"string\">\"x\"</span>, _temporalUndefined) && x);</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>當撞名時babel會自動改名，不必擔心</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//es6</span></div><div class=\"line\"><span class=\"keyword\">var</span> _temporalUndefined;</div><div class=\"line\">{</div><div class=\"line\">  <span class=\"keyword\">let</span> x = {};</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//babel</span></div><div class=\"line\"><span class=\"pi\">\"use strict\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _temporalAssertDefined = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(val, name, undef)</span> </span>{ <span class=\"keyword\">if</span> (val === undef) { <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">ReferenceError</span>(name + <span class=\"string\">\" is not defined - temporal dead zone\"</span>); } <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; };</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _temporalUndefined2 = {}; <span class=\"comment\">//變成_temporalUndefined2了</span></div><div class=\"line\"><span class=\"keyword\">var</span> _temporalUndefined;</div><div class=\"line\">{</div><div class=\"line\">  <span class=\"keyword\">var</span> x = _temporalUndefined2;</div><div class=\"line\">  x = {};</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>“不能重複宣告”這項特性則是在babel compile階段做檢查的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//es6</span></div><div class=\"line\">{</div><div class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"number\">2</span>;</div><div class=\"line\">}</div><div class=\"line\"><span class=\"comment\">/* babel compile err</span></div><div class=\"line\">repl: Line 3: Duplicate declaration \"x\"</div><div class=\"line\">  1 | {</div><div class=\"line\">  2 |   let x = 1;</div><div class=\"line\">&gt; 3 |   let x = 2;</div><div class=\"line\">    |       ^</div><div class=\"line\">  4 | }</div><div class=\"line\">*/</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-03-20-learning-es6-with-babel-let.md","raw":"title: learning es6 with babel - let\ndate: 2015-03-20 23:29:00\ntags:\n---\n\n`let`是另一種宣告變數的方式，他有幾個特點：有block scope，沒有hoisting，不能重複宣告\n```js\n//es6\n{\n  let foo = \"foo\";\n  var bar = \"bar\";\n}\n\nconsole.log(foo); //<= Error: foo is not defined\nconsole.log(bar); //<= bar\n```\n\nbabel對他的實現方式是在前面加個prefix`_`\n```js\n//babel\nvar _temporalUndefined = {};\n{\n  var _foo = _temporalUndefined;\n  _foo = \"foo\";\n  var bar = \"bar\";\n}\n```\n`let`不像`var`一樣具有hoisting的特性，這造成一些現象\n```js\n//es6\n{\n  console.log(x); // <=x is not defined - temporal dead zone\n  let x = 1;\n}\n```\n在一個block scope中，只要有進行`let`宣告的變數，那麼該變數在被宣告前都不能被使用。\n這個區塊就被稱為temporal dead zone\n```js\n//es6\n{\n  //-- dead zone for x start --\n\n  console.log(x); // <=ReferenceError: x is not defined - temporal dead zone\n\n  //-- dead zone for x end --\n  let x = 1;\n  // u can use x now.\n  console.log(x); // <= 1\n\n}\n```\nbabel的實現方式如下\n```js\n\"use strict\";\n\nvar _temporalAssertDefined = function (val, name, undef) {\n  if (val === undef) {\n    throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n  }\n  return true;\n};\n\nvar _temporalUndefined = {};\n{\n  var x = _temporalUndefined;\n\n  console.log(_temporalAssertDefined(x, \"x\", _temporalUndefined) && x);\n\n  x = {};\n\n  console.log(_temporalAssertDefined(x, \"x\", _temporalUndefined) && x);\n}\n```\n他一開始先在全域宣告一個`_temporalUndefined`物件作為not defined flag，當我們在block scope中做`let`宣告時，\n他會先在scope的開始部分就先用`var`宣告物件，然後指向全域的`_temporalUndefined`物件。接下來\n在每次調用`x`時，都會先檢查他的參考對象是不是`_temporalUndefined`，如果是的話就拋出\n`ReferenceError`\n\n可以注意的點是，`val === undef`比較的是參照，而不是值，所以就算你用`let x={}`也不會怎樣，\n因為這兩個`{}`是不同的匿名物件\n```js\n//es6\n{\n  console.log(x); // <=ReferenceError: x is not defined - temporal dead zone\n  let x = 1;\n  console.log(x);\n}\n\n//babel\n\"use strict\";\n\nvar _temporalAssertDefined = function (val, name, undef) {\n  if (val === undef) {\n    // 這裡是檢查參照，而不是值\n    throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n  }\n  return true;\n};\n\n//宣告一個匿名物件，指定物件_temporalUndefined參照他\nvar _temporalUndefined = {};\n\n{\n  var x = _temporalUndefined;\n\n  console.log(_temporalAssertDefined(x, \"x\", _temporalUndefined) && x);\n  //宣告一個匿名物件，指定物件x參照他。酸然值相同，但這跟上面那個匿名物件完全無關\n  x = {};\n  console.log(_temporalAssertDefined(x, \"x\", _temporalUndefined) && x);\n}\n```\n當撞名時babel會自動改名，不必擔心\n```js\n//es6\nvar _temporalUndefined;\n{\n  let x = {};\n}\n\n//babel\n\"use strict\";\n\nvar _temporalAssertDefined = function (val, name, undef) { if (val === undef) { throw new ReferenceError(name + \" is not defined - temporal dead zone\"); } return true; };\n\nvar _temporalUndefined2 = {}; //變成_temporalUndefined2了\nvar _temporalUndefined;\n{\n  var x = _temporalUndefined2;\n  x = {};\n}\n```\n\"不能重複宣告\"這項特性則是在babel compile階段做檢查的\n```js\n//es6\n{\n  let x = 1;\n  let x = 2;\n}\n/* babel compile err\nrepl: Line 3: Duplicate declaration \"x\"\n  1 | {\n  2 |   let x = 1;\n> 3 |   let x = 2;\n    |       ^\n  4 | }\n*/\n```\n","slug":"learning-es6-with-babel-let","updated":1426865340290,"excerpt":"","_id":"0q6p965qo3xx5gju","categories":[],"comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"learning, es6","_id":"1wxlw98aw60tod2s","posts":["9oil527wz5vyvsz6"]}]}