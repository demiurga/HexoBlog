{"meta":{"version":1,"warehouse":"1.0.1"},"models":{"Asset":[{"_id":"themes/light/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":1},{"_id":"themes/light/source/js/gallery.js","path":"js/gallery.js","modified":1},{"_id":"themes/light/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1},{"_id":"themes/light/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1},{"_id":"themes/light/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1},{"_id":"themes/light/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1},{"_id":"themes/light/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1},{"_id":"themes/light/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1},{"_id":"themes/light/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1},{"_id":"themes/light/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1},{"_id":"themes/light/source/css/style.styl","path":"css/style.styl","modified":1},{"_id":"themes/light/source/css/font/fontawesome-webfont.woff","path":"css/font/fontawesome-webfont.woff","modified":1},{"_id":"themes/light/source/css/font/fontawesome-webfont.ttf","path":"css/font/fontawesome-webfont.ttf","modified":1},{"_id":"themes/light/source/css/font/fontawesome-webfont.svg","path":"css/font/fontawesome-webfont.svg","modified":1},{"_id":"themes/light/source/css/font/fontawesome-webfont.eot","path":"css/font/fontawesome-webfont.eot","modified":1}],"Cache":[{"_id":"source/_drafts/draft1.md","shasum":"d35612a9299742dcc1041f5e482e822fe83a8c5c","modified":1426864888084},{"_id":"source/_drafts/learning-es6-with-babel-Class.md","shasum":"0a5e551a785fe54b7d5b56338c7cbcc82abca843","modified":1426864888087},{"_id":"source/_posts/2013-12-02-javascript-good-parts-ch2.md","shasum":"df31366d700854216257d64bcc6280e283c22c2d","modified":1426864888102},{"_id":"source/_posts/2013-12-03-javascript-good-parts-ch3.md","shasum":"4f5455c5b3b45c6cf1d77cfbc28bd19e114cf1b7","modified":1426864888105},{"_id":"source/_posts/2013-12-04-javascript-good-parts-ch4.md","shasum":"e04e73e16d74d393eb68995ac44fa8f8e801b0cc","modified":1426864888108},{"_id":"source/_posts/2013-12-07-168754.md","shasum":"7ae5103c6a991c6e112d506962f4162e43dafd0e","modified":1426864888111},{"_id":"source/_posts/2013-12-09-javascript-good-parts-ch4-9.md","shasum":"b579b2e38d9ca488ba99b38047f59cf22b0383e0","modified":1426864888114},{"_id":"source/_posts/2013-12-11-javascript-good-parts-ch4-11.md","shasum":"ca7257f6781c65107226540077a28a989b7adc6a","modified":1426864888117},{"_id":"source/_posts/2013-12-14-javascript-good-parts-ch5.md","shasum":"becae0b47e2815fd4ef432bbcc6093d439424074","modified":1426864888120},{"_id":"source/_posts/2013-12-18-github-pages-octopress-on-windows.md","shasum":"2523ae1ce2aa7ffc86f33d44266f3d470d2e38c3","modified":1426864888123},{"_id":"source/_posts/2013-12-18-javascript-good-parts-ch5-19.md","shasum":"a70ef9f6fbd819a58788ff2e22b27512c762b2e9","modified":1426864888126},{"_id":"source/_posts/2013-12-19-javascript-good-parts-ch6.md","shasum":"78488e5e732a0f0b82a4f0afe77a9e58380cc2e5","modified":1426864888129},{"_id":"source/_posts/2013-12-24-168788.md","shasum":"a356942ecd8fc92f534b39113df7b504f91e5b30","modified":1426864888131},{"_id":"source/_posts/2013-12-24-hello-world.md","shasum":"2aaf60c16e446f318bc15acad7df6f7941841e35","modified":1426864888135},{"_id":"source/_posts/2013-12-24-moved-from-blogger-to-logdown.md","shasum":"4a020f60e6f23ade01ebb20e46b7d24588ade46d","modified":1426864888138},{"_id":"source/_posts/2013-12-24-note-javascriptthe-good-parts-bad-part-1.md","shasum":"0fe8b92a078700556ced86d5db27dd06969e3fa6","modified":1426864888143},{"_id":"source/_posts/2013-12-31-note-javascriptthe-good-parts-bad-part-2.md","shasum":"c3870cf54dbe8aff4122be6474e5213197a2c074","modified":1426864888149},{"_id":"source/_posts/2014-01-01-notenet-npoi.md","shasum":"3493a358a0e04c2e038c2ca7a8f011a04179f7d8","modified":1426864888152},{"_id":"source/_posts/2014-01-02-notesprototype-with-proto.md","shasum":"9bc9936f9f8edd39f7d25c7362f8f9b24c5e43f1","modified":1426864888154},{"_id":"source/_posts/2014-01-04-jquerydatepicker-republic-of-china.md","shasum":"7231064c286d1053cced73f76f10b4140178dbc3","modified":1426864888158},{"_id":"source/_posts/2014-01-11-experiencejquery-widget-factory.md","shasum":"ef7af0da7902199055f0ef348066b02c3bda339a","modified":1426864888162},{"_id":"source/_posts/2014-01-11-output-on-top-of-the-picture-message-jquery-plugin-commentonphoto.md","shasum":"b8a50829429b99ba1293e57405772b0fe64c03de","modified":1426864888165},{"_id":"source/_posts/2014-01-15--number-of-kaohsiung-mrt-station.md","shasum":"52b90add517aaa9df3f5e1ef757d947209ff1aab","modified":1426864888168},{"_id":"source/_posts/2014-01-17-notes-on-loading-script.md","shasum":"93f4f673b2e0084194a1ee937ab5e21aaa6079df","modified":1426864888178},{"_id":"source/_posts/2014-01-23-experience-media-query-with-less.md","shasum":"fff1f32fd72a31efd89b1fe27972f90c195a4b0f","modified":1426864888182},{"_id":"source/_posts/2014-01-23-note-css-media-query.md","shasum":"a0eec914399a2c8a51b53f2a2f268ffe14afb286","modified":1426864888186},{"_id":"source/_posts/2014-02-03-experience-image-beacon.md","shasum":"f037352592f2ea863144fd1c155372aa85e7305e","modified":1426864888189},{"_id":"source/_posts/2014-02-03-note-webclient-side-separation-of-concerns.md","shasum":"9b5264a0b4d6491c2f63cb4bd0dadee9de2c88a2","modified":1426864888193},{"_id":"source/_posts/2014-02-04-note-of-semantic-html.md","shasum":"4326a28476f895e8371c2e5933abf16491588d29","modified":1426864888197},{"_id":"source/_posts/2014-02-10-note-flex-with-less.md","shasum":"9ef197c77880c5bd7086d192b9d9f26bd691c3c2","modified":1426864888199},{"_id":"source/_posts/2014-03-08-note-in-webstorm-added-compass-syntax-tips.md","shasum":"8ed9cd270fbe3268104851a6bc3489349cbaef15","modified":1426864888207},{"_id":"source/_posts/2014-03-08-note-sass-with-webstorm.md","shasum":"dd882a38d5b36634e4c6fe3d9f39b508021ac86e","modified":1426864888422},{"_id":"source/_posts/2014-03-26-note-chrome-workspace-with-sass-and-compass.md","shasum":"7bac54495ebbff73cb20547a42825284aa4d733a","modified":1426864888426},{"_id":"source/_posts/2014-04-30-note-cordova-with-jquery-mobile.md","shasum":"676e7bc2013f40dd0364d51a44555b7b66beb54c","modified":1426864888430},{"_id":"source/_posts/2014-05-12-teaching-yql-for-ten-minutes-easy.md","shasum":"56066481ac1e497c17e338f934ff2bb4a7a997fc","modified":1426864888433},{"_id":"source/_posts/2014-05-17-note-cordova-34-with-wp8-minesweeper-records.md","shasum":"a9acdf4067fd924a982eeff8b1d2ff4823ca29d7","modified":1426864888437},{"_id":"source/_posts/2014-05-26-note-cordova-trouble-shooting.md","shasum":"9c88c7182218314965fc4bde23fa4d7e67037550","modified":1426864888441},{"_id":"source/_posts/2014-05-29-experience-debug-cordova-app-with-android-44-and-chrome.md","shasum":"c355360dd3f89b378bf7d0cb36afcb3d7dfe7480","modified":1426864888445},{"_id":"source/_posts/2015-02-26-move-from-logdown-to-hexo.md","shasum":"0deb2d472fdd02d50a8e717922a186e8270baeff","modified":1426864888447},{"_id":"source/_posts/2015-03-15-learn-es6-with-babel.md","shasum":"4ab8d6b18ef382750d738eefe2356ebe27a7d864","modified":1426864888455},{"_id":"source/_posts/2015-03-20-learning-es6-with-babel-const.md","shasum":"28268e54f1951ed947373a510ef5717b43a7fd4c","modified":1426865352589},{"_id":"source/_posts/2015-03-20-learning-es6-with-babel-let.md","shasum":"746b63429e6db73d754ab6f639159594cf43229b","modified":1426865340290},{"_id":"source/_posts/hello-world.md","shasum":"774b507901d9b17991ace2a70263b6dd6d11999a","modified":1427809887115},{"_id":"themes/light/source/css/_base/utils.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1427117398712},{"_id":"themes/light/_config.yml","shasum":"c9893508c68c9077d3035e0599b4c27a3901ec2c","modified":1427117398497},{"_id":"themes/light/languages/de.yml","shasum":"1ebe2d4f1b48c84e004c933bec65731fb54c9998","modified":1427117398500},{"_id":"themes/light/languages/es.yml","shasum":"727707b95580bbe9773edef4c84a9735fd537742","modified":1427117398506},{"_id":"themes/light/languages/default.yml","shasum":"feb1dd022dc8897d65baa5b927de2a3d4178d798","modified":1427117398503},{"_id":"themes/light/languages/zh-TW.yml","shasum":"b2474b775a8fa0fa3e9e3c58ddb11b20cf65dbc5","modified":1427117398514},{"_id":"themes/light/languages/ru.yml","shasum":"37161bb9b6cc2dae1f53837185be32e7a0b8abfa","modified":1427117398508},{"_id":"themes/light/languages/zh-CN.yml","shasum":"751f1a2bbfb6736c71e846493ae0fb7ef7dc778d","modified":1427117398511},{"_id":"themes/light/layout/_partial/after_footer.ejs","shasum":"ef5e7c5e3a05c80f25a7173ea742646bb521cfed","modified":1427117398524},{"_id":"themes/light/LICENSE","shasum":"17d3ed51d6d6962155f7dacd4f101f4969ad0bbe","modified":1427117398490},{"_id":"themes/light/layout/_partial/comment.ejs","shasum":"56786339f66a1fb56d29070633b27bd34ae3f9c3","modified":1427117398551},{"_id":"themes/light/layout/_partial/archive.ejs","shasum":"eaab5ad657f16dfc6cff6f462e1234c3cb8f23a0","modified":1427117398534},{"_id":"themes/light/layout/_partial/article.ejs","shasum":"57bf574e0c7955b532903a3f3ba7218235b16d8f","modified":1427117398543},{"_id":"themes/light/layout/_partial/footer.ejs","shasum":"092bea0a0cdb4ab976723bbce3771bc35a96fdc6","modified":1427117398560},{"_id":"themes/light/layout/_partial/facebook_comment.ejs","shasum":"49ee54e84fe2b70bd9540e2eeba5a85f744941b0","modified":1427117398557},{"_id":"themes/light/layout/_partial/header.ejs","shasum":"73c45d7426009feb495710b054868a7f10616178","modified":1427117398581},{"_id":"themes/light/layout/_partial/pagination.ejs","shasum":"5a3c65842354b04c7839c915c045d39be9342cdf","modified":1427117398584},{"_id":"themes/light/layout/_partial/google_analytics.ejs","shasum":"06816997ff115a07fce5402fe53826a3a85f6147","modified":1427117398570},{"_id":"themes/light/layout/_partial/post/gallery.ejs","shasum":"fc23ef9b5a412e05436f68ff47146b860d2d4225","modified":1427117398592},{"_id":"themes/light/layout/_partial/post/category.ejs","shasum":"8bb3f6ee6296df5a0d527b30d5a46a2387b97cb7","modified":1427117398591},{"_id":"themes/light/layout/_partial/post/share.ejs","shasum":"991cf130c37f08c7e948772fb45587592b165b55","modified":1427117398597},{"_id":"themes/light/layout/_partial/post/title.ejs","shasum":"7f93b310927d6238effdde15234d8cb242940893","modified":1427117398606},{"_id":"themes/light/layout/_partial/post/tag.ejs","shasum":"b21bbfb5479bd5968a610ba8bdb2bdf10d7a40e9","modified":1427117398603},{"_id":"themes/light/layout/_widget/category.ejs","shasum":"c163a146b0f963f257ddcc244f413bef281fe0a0","modified":1427117398617},{"_id":"themes/light/layout/_partial/sidebar.ejs","shasum":"016441ca9534769d8e151cffe4027686e9c86f18","modified":1427117398612},{"_id":"themes/light/layout/_widget/search.ejs","shasum":"93d4a690494dfa405024f23511846ea00d647be7","modified":1427117398624},{"_id":"themes/light/README.md","shasum":"f9adc61563e8824ec507911dc7df70655a534378","modified":1427117398494},{"_id":"themes/light/layout/_widget/recent_posts.ejs","shasum":"59f6f8362fa23a6215e3381151a59c2e2a5fd0d3","modified":1427117398621},{"_id":"themes/light/layout/_partial/head.ejs","shasum":"2e76dc3c550fcbce0d5dcf5a4b7a11ef1203c3e7","modified":1427117398578},{"_id":"themes/light/layout/_widget/tagcloud.ejs","shasum":"139e91b1e6abcc1e3883bcc03a9a1a7f1d891d7a","modified":1427117398632},{"_id":"themes/light/layout/archive.ejs","shasum":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1427117398633},{"_id":"themes/light/layout/_widget/tag.ejs","shasum":"6bf8214fedb8d6306e017e07ad67aab956496500","modified":1427117398629},{"_id":"themes/light/layout/category.ejs","shasum":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1427117398633},{"_id":"themes/light/layout/post.ejs","shasum":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1427117398707},{"_id":"themes/light/layout/page.ejs","shasum":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1427117398706},{"_id":"themes/light/layout/index.ejs","shasum":"c7cf84c84c26f1adfc249bc9a7605206fa245f73","modified":1427117398634},{"_id":"themes/light/layout/layout.ejs","shasum":"6999916072898aedfe13f4a07211dd1578ad4799","modified":1427117398638},{"_id":"themes/light/layout/tag.ejs","shasum":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1427117398708},{"_id":"themes/light/source/css/_base/layout.styl","shasum":"b26cd4768466f637b620029b314dd50a06c98b8c","modified":1427117398712},{"_id":"themes/light/source/css/_partial/archive.styl","shasum":"b6fa84ea80bfbdb3a93f64c06a8c652e4242128e","modified":1427117398719},{"_id":"themes/light/source/css/_base/variable.styl","shasum":"832fecbb623c8fba9419d6a93586126d44b43cc6","modified":1427117398716},{"_id":"themes/light/source/css/_partial/article.styl","shasum":"9efddb26851b45a536898a84f6fa1ccf71920fca","modified":1427117398724},{"_id":"themes/light/source/css/_partial/comment.styl","shasum":"6fa67d96903ac3b1674e6c8d4c801e16115808e0","modified":1427117398727},{"_id":"themes/light/source/css/_partial/footer.styl","shasum":"821d50a9d45afec0274e1e64c2b37a71f3611c01","modified":1427117398730},{"_id":"themes/light/source/css/_partial/header.styl","shasum":"ad67bf40a0cafb1e5514b058c853c517e602fe44","modified":1427117398733},{"_id":"themes/light/source/css/_partial/index.styl","shasum":"eb0f1536a57cca57d9a280191fbb63185c266ee8","modified":1427117398736},{"_id":"themes/light/source/css/_partial/sidebar.styl","shasum":"213a16c3206d045ca01b0abf8891e96421d61fb9","modified":1427117398740},{"_id":"themes/light/source/css/_partial/syntax.styl","shasum":"bb6d6441aad58af730140bac83c880ac3050bd77","modified":1427117398743},{"_id":"themes/light/source/css/font/fontawesome-webfont.woff","shasum":"0612cddf2f835cceffccc88fd194f97367d0b024","modified":1427117398816},{"_id":"themes/light/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1427117398820},{"_id":"themes/light/source/css/style.styl","shasum":"8e8458e78717c49c4ff278b741258d77301f6be4","modified":1427117398819},{"_id":"themes/light/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1427117398821},{"_id":"themes/light/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1427117398822},{"_id":"themes/light/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1427117398823},{"_id":"themes/light/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1427117398825},{"_id":"themes/light/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1427117398824},{"_id":"themes/light/source/css/font/fontawesome-webfont.eot","shasum":"d775f599ff3f23be082e6a9604b4898718923a37","modified":1427117398760},{"_id":"themes/light/source/fancybox/jquery.fancybox.css","shasum":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1427117398829},{"_id":"themes/light/source/js/gallery.js","shasum":"735a714e54f0ac229f292a90df3a1f882904f6c7","modified":1427117398846},{"_id":"themes/light/source/js/jquery.imagesloaded.min.js","shasum":"28ef4346743a60c896a9ae492a544c0854904350","modified":1427117398847},{"_id":"themes/light/source/css/font/fontawesome-webfont.svg","shasum":"ff51bbb11dfe58345f41cead2c425d6e8be28176","modified":1427117398804},{"_id":"themes/light/source/css/font/fontawesome-webfont.ttf","shasum":"a9468f6a1fe965fbcaf5a1bd6c11705e2fc5f84c","modified":1427117398812},{"_id":"themes/light/source/fancybox/jquery.fancybox.pack.js","shasum":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1427117398841},{"_id":"public/js/jquery.imagesloaded.min.js","modified":1427810382008,"shasum":"4109837b1f6477bacc6b095a863b1b95b1b3693f"},{"_id":"public/js/gallery.js","modified":1427810382012,"shasum":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1427810382015,"shasum":"53360764b429c212f424399384417ccc233bb3be"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1427810382018,"shasum":"5f163444617b6cf267342f06ac166a237bb62df9"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1427810382023,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1427810382027,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1427810382028,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1427810382030,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1427810382032,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1427810382034,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1427810382421,"shasum":"c1f50770fa10e71f85c4b7f26bb821924de38f53"},{"_id":"public/css/font/fontawesome-webfont.woff","modified":1427810382523,"shasum":"0612cddf2f835cceffccc88fd194f97367d0b024"},{"_id":"public/css/font/fontawesome-webfont.ttf","modified":1427810382527,"shasum":"a9468f6a1fe965fbcaf5a1bd6c11705e2fc5f84c"},{"_id":"public/css/font/fontawesome-webfont.svg","modified":1427810382531,"shasum":"ff51bbb11dfe58345f41cead2c425d6e8be28176"},{"_id":"public/css/font/fontawesome-webfont.eot","modified":1427810382533,"shasum":"d775f599ff3f23be082e6a9604b4898718923a37"},{"_id":"public/2015/03/31/hello-world/index.html","modified":1427810382561,"shasum":"eccea8e1958178431efe49c4b2ba2876c6558c3e"},{"_id":"public/2015/03/20/2015-03-20-learning-es6-with-babel-const/index.html","modified":1427810382584,"shasum":"aa69d9c8e76c603f1370937b423fd95ff852c7cc"},{"_id":"public/2015/03/20/2015-03-20-learning-es6-with-babel-let/index.html","modified":1427810382598,"shasum":"68c63b00d3485a3649ab919a3b08f74561f1e32b"},{"_id":"public/2015/03/15/2015-03-15-learn-es6-with-babel/index.html","modified":1427810382609,"shasum":"f12a83eb8abf7e27c23bbf330b75e365f0ac4efc"},{"_id":"public/2015/02/26/2015-02-26-move-from-logdown-to-hexo/index.html","modified":1427810382618,"shasum":"edea8c40cec925c7e89d1bc682ec51cab676d75c"},{"_id":"public/2014/05/29/2014-05-29-experience-debug-cordova-app-with-android-44-and-chrome/index.html","modified":1427810382625,"shasum":"d1915231da688eb571cd0db73b3b3cb4b78d3747"},{"_id":"public/2014/05/26/2014-05-26-note-cordova-trouble-shooting/index.html","modified":1427810382633,"shasum":"92e8198684395e8911e438fd7aa48a40970a39a1"},{"_id":"public/2014/05/17/2014-05-17-note-cordova-34-with-wp8-minesweeper-records/index.html","modified":1427810382641,"shasum":"ebefa9881471300c7db96b7fcf94f28b7079cdeb"},{"_id":"public/2014/05/12/2014-05-12-teaching-yql-for-ten-minutes-easy/index.html","modified":1427810382651,"shasum":"4062c61f876550ad0b77a74f4e400a5e82620314"},{"_id":"public/2014/04/30/2014-04-30-note-cordova-with-jquery-mobile/index.html","modified":1427810382660,"shasum":"ff8eabb105e403d2eb6efc947f52d54f359e9496"},{"_id":"public/2014/03/26/2014-03-26-note-chrome-workspace-with-sass-and-compass/index.html","modified":1427810382668,"shasum":"b08d7df9af136f5c9a127d5417242e9fc50d5a5d"},{"_id":"public/2014/03/08/2014-03-08-note-in-webstorm-added-compass-syntax-tips/index.html","modified":1427810382684,"shasum":"d11154e58bb1842d300be5818ccd8a5a706fabe9"},{"_id":"public/2014/03/08/2014-03-08-note-sass-with-webstorm/index.html","modified":1427810382691,"shasum":"10a153437c74e0fd5faa48a91d71c7aabe42842a"},{"_id":"public/2014/02/10/2014-02-10-note-flex-with-less/index.html","modified":1427810382698,"shasum":"79a76ff7069c458aa5bb6b3006239d35f5cae0b0"},{"_id":"public/2014/02/04/2014-02-04-note-of-semantic-html/index.html","modified":1427810382705,"shasum":"655107addffdaf7b3ad53ba1f46af71f6b95d541"},{"_id":"public/2014/02/03/2014-02-03-note-webclient-side-separation-of-concerns/index.html","modified":1427810382711,"shasum":"a213ea4948118ede6eef1f548fe91dc95de8d6a3"},{"_id":"public/2014/02/03/2014-02-03-experience-image-beacon/index.html","modified":1427810382719,"shasum":"cc9bfa707865b84e9ad5c33f37afc77f3cb92b36"},{"_id":"public/2014/01/23/2014-01-23-experience-media-query-with-less/index.html","modified":1427810382727,"shasum":"9283656902c3e038099044db5ddcf8b8360db216"},{"_id":"public/2014/01/23/2014-01-23-note-css-media-query/index.html","modified":1427810382735,"shasum":"a4c55e1e1024324b23b8053b2365b2054f8b42a6"},{"_id":"public/2014/01/17/2014-01-17-notes-on-loading-script/index.html","modified":1427810382742,"shasum":"a46cb027d26fa0a0e77a1a01ba538fd5e61d51cc"},{"_id":"public/2014/01/15/2014-01-15--number-of-kaohsiung-mrt-station/index.html","modified":1427810382749,"shasum":"f11d33925162d21defcc20bc14cd9946dc82e4f3"},{"_id":"public/2014/01/11/2014-01-11-experiencejquery-widget-factory/index.html","modified":1427810382756,"shasum":"e845f75447723ec8e224ec70bba7f7d9308436a9"},{"_id":"public/2014/01/11/2014-01-11-output-on-top-of-the-picture-message-jquery-plugin-commentonphoto/index.html","modified":1427810382763,"shasum":"4b62c3015976945d0f083b8060802a50958f9946"},{"_id":"public/2014/01/04/2014-01-04-jquerydatepicker-republic-of-china/index.html","modified":1427810382774,"shasum":"98ef75f1383babcfd6d60ab280991d3aa8bc1d90"},{"_id":"public/2014/01/02/2014-01-02-notesprototype-with-proto/index.html","modified":1427810382786,"shasum":"17e895d53afe52db19789ce4055832975e0fcd0b"},{"_id":"public/2014/01/01/2014-01-01-notenet-npoi/index.html","modified":1427810382793,"shasum":"043ddad222d9ed211bed9a526d28d561c1b2e02e"},{"_id":"public/2013/12/31/2013-12-31-note-javascriptthe-good-parts-bad-part-2/index.html","modified":1427810382800,"shasum":"7449d35085c88f2385d7605f816468efb8e851e2"},{"_id":"public/2013/12/24/2013-12-24-note-javascriptthe-good-parts-bad-part-1/index.html","modified":1427810382806,"shasum":"e8274001be6e0fa8ab2e921d89e76a9b433098c2"},{"_id":"public/2013/12/24/2013-12-24-168788/index.html","modified":1427810382812,"shasum":"75b53e28a27b49c7c8910d38d666d9279c0fb399"},{"_id":"public/2013/12/24/2013-12-24-moved-from-blogger-to-logdown/index.html","modified":1427810382818,"shasum":"0806fdbd10057dba55f3170b03844e661f2b5e83"},{"_id":"public/2013/12/24/2013-12-24-hello-world/index.html","modified":1427810382825,"shasum":"fb0079c58961aed6a81713d5f4334ef3424dd6af"},{"_id":"public/2013/12/19/2013-12-19-javascript-good-parts-ch6/index.html","modified":1427810382832,"shasum":"a00b209917a2d285e049228c8628d5869107a726"},{"_id":"public/2013/12/18/2013-12-18-javascript-good-parts-ch5-19/index.html","modified":1427810382839,"shasum":"910660069a2e5566c1a8afe28525ed2aede48555"},{"_id":"public/2013/12/18/2013-12-18-github-pages-octopress-on-windows/index.html","modified":1427810382846,"shasum":"935291a12f94a63eb10444347e71dd2f5ddbb081"},{"_id":"public/2013/12/14/2013-12-14-javascript-good-parts-ch5/index.html","modified":1427810382853,"shasum":"f1044a11fd0d688a4b4a5b3588a4dd6cc142f0b2"},{"_id":"public/2013/12/11/2013-12-11-javascript-good-parts-ch4-11/index.html","modified":1427810382862,"shasum":"bcd63200082f7ff65ad9a42a2fe0d82ab6d54863"},{"_id":"public/2013/12/09/2013-12-09-javascript-good-parts-ch4-9/index.html","modified":1427810382873,"shasum":"62375aa7676a51ec85398f7b8dd7183b769d3880"},{"_id":"public/2013/12/07/2013-12-07-168754/index.html","modified":1427810382878,"shasum":"aa17a83a0ad8f8f7b8547ec11c8b2f3d4faad89e"},{"_id":"public/2013/12/04/2013-12-04-javascript-good-parts-ch4/index.html","modified":1427810382884,"shasum":"eeeb0c1c05873d104c40dc3fc7db176afc66d33d"},{"_id":"public/2013/12/03/2013-12-03-javascript-good-parts-ch3/index.html","modified":1427810382890,"shasum":"722ca19fd7108aafea4283c171c55e24e50eaf90"},{"_id":"public/2013/12/02/2013-12-02-javascript-good-parts-ch2/index.html","modified":1427810382896,"shasum":"48d4c929937f1efab1c3ee3ce226987c0861c2a5"},{"_id":"public/archives/index.html","modified":1427810382904,"shasum":"4e0a72ea2cc43b6c623dac0de8a802730c5633be"},{"_id":"public/archives/page/2/index.html","modified":1427810382910,"shasum":"1aea698df85f2723c9456cb1eee9f24783b34564"},{"_id":"public/archives/page/3/index.html","modified":1427810382915,"shasum":"699f57d40ce61d7444651f9d0ac29cc1b060f3e2"},{"_id":"public/archives/page/4/index.html","modified":1427810382921,"shasum":"f11855b7ec5aef8154ebadb7eaf32594b134599b"},{"_id":"public/archives/page/5/index.html","modified":1427810382926,"shasum":"c52694e332a7fd1612f08db33d4246b59d27c489"},{"_id":"public/archives/2013/index.html","modified":1427810382932,"shasum":"85785c310c8873d7a82477cc781b6c014ccf56f5"},{"_id":"public/archives/2013/page/2/index.html","modified":1427810382938,"shasum":"0cdb31de05322c5fc0c508568893dbb5ec87dc0e"},{"_id":"public/archives/2013/12/index.html","modified":1427810382943,"shasum":"640bfd0f194cb615b50fc77523ba6504247c827a"},{"_id":"public/archives/2013/12/page/2/index.html","modified":1427810382948,"shasum":"09d2558c078678a9db84f207cad275b858bb5d0f"},{"_id":"public/archives/2014/index.html","modified":1427810382954,"shasum":"1864cfac72bab5903de2da1cc6cc95e85bc3030a"},{"_id":"public/archives/2014/page/2/index.html","modified":1427810382965,"shasum":"2158d1905c6850cd9d7a9e814406f82b1ee7d5f0"},{"_id":"public/archives/2014/page/3/index.html","modified":1427810382970,"shasum":"10dd131964178fc5459958dc431cd91c972bb211"},{"_id":"public/archives/2014/01/index.html","modified":1427810382976,"shasum":"84992a7086b3a991b33d7a7117abb041f73181e1"},{"_id":"public/archives/2014/02/index.html","modified":1427810382982,"shasum":"54b851cb3741be437b21e275e8a80df1339eb49f"},{"_id":"public/archives/2014/03/index.html","modified":1427810382987,"shasum":"3ce62de212f6780852bacc67b253f5c93d5c8c59"},{"_id":"public/archives/2014/04/index.html","modified":1427810382992,"shasum":"2e69104565a8d5d6c19a4d28588ba7718b75727a"},{"_id":"public/archives/2014/05/index.html","modified":1427810382997,"shasum":"057c9e386330220075291c4c3fde3d6396f359d6"},{"_id":"public/archives/2015/index.html","modified":1427810383002,"shasum":"40e2079280fff9886ba8d740e1ea0f91a35e6b54"},{"_id":"public/archives/2015/02/index.html","modified":1427810383007,"shasum":"03930483fc561f5ed5ff6591b29a36be380ae24d"},{"_id":"public/archives/2015/03/index.html","modified":1427810383013,"shasum":"17e545c61dc89f25c76ef7e6a364266f0f6e89fe"},{"_id":"public/tags/learning-es6/index.html","modified":1427810383018,"shasum":"7aa2ddbfa946a734208da5ed764edf16b74efbc1"},{"_id":"public/index.html","modified":1427810383029,"shasum":"83f867b8335f048e8ee1f5498b1be3416fb6ca2b"},{"_id":"public/page/2/index.html","modified":1427810383038,"shasum":"55ad15f2bfbd8f2f469e9bce1fe6a87f2b27ce58"},{"_id":"public/page/3/index.html","modified":1427810383052,"shasum":"2416eebe0a2d5e54548061fce69d21f758c1bb7c"},{"_id":"public/page/4/index.html","modified":1427810383062,"shasum":"d4d7e250259de31ca2f155dfe6ac839091efbf5f"},{"_id":"public/page/5/index.html","modified":1427810383068,"shasum":"6535dbbbbda39e3a45b9c1f241f353444b434679"},{"_id":"public/categories/Net/index.html","modified":1427810383074,"shasum":"22d7d861fb10f847459e8fab1e16f05d2a00e473"},{"_id":"public/categories/Net/筆記/index.html","modified":1427810383080,"shasum":"0c70cc676862b9ad347987b4f9b993f95bfbf1d7"},{"_id":"public/categories/javascript/index.html","modified":1427810383086,"shasum":"fceda4b46c4f69acdcb46e5103eb9a725ee7e4b7"},{"_id":"public/categories/javascript/page/2/index.html","modified":1427810383091,"shasum":"a46abbc7e3092f9bc25b1385245fb16a9771c381"},{"_id":"public/categories/javascript/筆記/index.html","modified":1427810383097,"shasum":"6f75e3dbc3be7b3fe76c7914eadc7a3f3ebb9bd6"},{"_id":"public/categories/logdown/index.html","modified":1427810383103,"shasum":"74f6ef9db807dff15a4e9cc61c75840e3ef56a70"},{"_id":"public/categories/logdown/閒聊/index.html","modified":1427810383108,"shasum":"633cafc19abc92bbe81362fbce81cead692fca61"},{"_id":"public/categories/github/index.html","modified":1427810383114,"shasum":"fe02412a11ae8f96f6cf647e29ec4607e00fd9d8"},{"_id":"public/categories/github/Octopress/index.html","modified":1427810383119,"shasum":"34916347e9e6718f04b45379ef417d71f982c369"},{"_id":"public/categories/閒聊/index.html","modified":1427810383124,"shasum":"039f5bd22ff3584dee3b035d1df045265bdbb5c7"},{"_id":"public/categories/閒聊/微軟/index.html","modified":1427810383133,"shasum":"cad31e5e21933180436f8b15603ea89e6b4ea28f"},{"_id":"public/categories/閒聊/微軟/RWD/index.html","modified":1427810383138,"shasum":"964f6ba82b3897d6d37ce7dd57d7f23eb3d00d00"}],"Category":[{"name":".Net","_id":"ci7xdfox9000tkcpgj69jxl00"},{"name":"筆記","parent":"ci7xdfox9000tkcpgj69jxl00","_id":"ci7xdfoxa000ukcpgmwln1iq7"},{"name":"javascript","_id":"ci7xdfoxd000ykcpgsecs4whd"},{"name":"筆記","parent":"ci7xdfoxd000ykcpgsecs4whd","_id":"ci7xdfoxe000zkcpgco3a1bz2"},{"name":"筆記","parent":"ci7xdfoxd000ykcpgsecs4whd","_id":"ci7xdfoxg0013kcpg2orp5fsy"},{"name":"logdown","_id":"ci7xdfoxj0017kcpgt5snpge9"},{"name":"閒聊","parent":"ci7xdfoxj0017kcpgt5snpge9","_id":"ci7xdfoxj0018kcpg3hdwfgzr"},{"name":"筆記","parent":"ci7xdfoxd000ykcpgsecs4whd","_id":"ci7xdfoxo001dkcpgzy1fmuoy"},{"name":"筆記","parent":"ci7xdfoxd000ykcpgsecs4whd","_id":"ci7xdfoxr001hkcpggghqz307"},{"name":"筆記","parent":"ci7xdfoxd000ykcpgsecs4whd","_id":"ci7xdfoxu001lkcpggz1jtyva"},{"name":"github","_id":"ci7xdfoxw001pkcpg6ihi56zd"},{"name":"Octopress","parent":"ci7xdfoxw001pkcpg6ihi56zd","_id":"ci7xdfoxw001qkcpg9rjli1gf"},{"name":"筆記","parent":"ci7xdfoxd000ykcpgsecs4whd","_id":"ci7xdfoxz001ukcpgi9dyl7tg"},{"name":"筆記","parent":"ci7xdfoxd000ykcpgsecs4whd","_id":"ci7xdfoy1001ykcpggll8pry3"},{"name":"筆記","parent":"ci7xdfoxd000ykcpgsecs4whd","_id":"ci7xdfoy20022kcpgf6g34o45"},{"name":"閒聊","_id":"ci7xdfoy60026kcpgd5luuun9"},{"name":"微軟","parent":"ci7xdfoy60026kcpgd5luuun9","_id":"ci7xdfoy60027kcpgfse3ma2v"},{"name":"RWD","parent":"ci7xdfoy60027kcpgfse3ma2v","_id":"ci7xdfoy60028kcpgjrpcbh5c"},{"name":"筆記","parent":"ci7xdfoxd000ykcpgsecs4whd","_id":"ci7xdfoy8002dkcpgiokbr6g9"},{"name":"筆記","parent":"ci7xdfoxd000ykcpgsecs4whd","_id":"ci7xdfoya002hkcpgy3f74fxg"},{"name":"筆記","parent":"ci7xdfoxd000ykcpgsecs4whd","_id":"ci7xdfoyc002lkcpg9cdtvb06"}],"Data":[],"Page":[],"Post":[{"title":"New Draft","_content":"半年沒寫blog了，抒發一下最近的感觸，順便複習Markdown的語法\n內文完全沒有邏輯，只有感情，請多包涵\n\n---\n##0\n我喜歡寫程式。\n我也喜歡高雄。\n所以我想留在高雄寫程式\n可是最近才發現，這好像有點難\n##1\n寫程式是一件很快樂的事\n獲得新知，讓自己的技術提升，是一件愉悅的事\n應該是這樣的\n可是\n我到現在還沒有碰過這樣的同事\n一個都沒有\n胡萬跟武舉人倒是遇過不少\n呵呵\n##2\n不是唬爛，我在高雄碰過的面試官大概可以坐滿一輛遊覽車\n只有一個人知道前端在幹嘛\n只有一個人真的有問出東西來\n他是個大陸人，來台灣出差的\n呵呵\n##3\n老人們都很喜歡不懂裝懂\n應該說，二流的PG都是這樣\n可能是覺得人家都看不出來吧？\n有次面試的時候，我把投影片裏的技術名詞換成WOW的腳色ID\n結果面試官照樣頻頻點頭\n我還有唸出來喔\n呵呵\n##4\n又轉回前端的話題\n曾經，我面試某間號稱鮭魚洄游的北美第二大電子商務公司\n被問到的問題是：\n＂jQuery熟嗎？＂\n＂可以加班到多晚？＂\n＂會寫西夏？＂\n呵呵\n\n---\n有點懶了，周末再繼續吧\n\n","source":"_drafts/draft1.md","raw":"title: New Draft\ntags:\n---\n半年沒寫blog了，抒發一下最近的感觸，順便複習Markdown的語法\n內文完全沒有邏輯，只有感情，請多包涵\n\n---\n##0\n我喜歡寫程式。\n我也喜歡高雄。\n所以我想留在高雄寫程式\n可是最近才發現，這好像有點難\n##1\n寫程式是一件很快樂的事\n獲得新知，讓自己的技術提升，是一件愉悅的事\n應該是這樣的\n可是\n我到現在還沒有碰過這樣的同事\n一個都沒有\n胡萬跟武舉人倒是遇過不少\n呵呵\n##2\n不是唬爛，我在高雄碰過的面試官大概可以坐滿一輛遊覽車\n只有一個人知道前端在幹嘛\n只有一個人真的有問出東西來\n他是個大陸人，來台灣出差的\n呵呵\n##3\n老人們都很喜歡不懂裝懂\n應該說，二流的PG都是這樣\n可能是覺得人家都看不出來吧？\n有次面試的時候，我把投影片裏的技術名詞換成WOW的腳色ID\n結果面試官照樣頻頻點頭\n我還有唸出來喔\n呵呵\n##4\n又轉回前端的話題\n曾經，我面試某間號稱鮭魚洄游的北美第二大電子商務公司\n被問到的問題是：\n＂jQuery熟嗎？＂\n＂可以加班到多晚？＂\n＂會寫西夏？＂\n呵呵\n\n---\n有點懶了，周末再繼續吧\n\n","slug":"draft1","published":0,"date":"2015-03-20T15:21:28.084Z","updated":"2015-03-20T15:21:28.084Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci7xdfouw0000kcpgy0vmoh74"},{"title":"Hello World","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"title: Hello World\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2015-03-31T13:51:27.115Z","updated":"2015-03-31T13:51:27.115Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci7xdfovj0001kcpgfe1ju3g5"},{"title":"learning es6 with babel - let","date":"2015-03-20T15:29:00.000Z","_content":"\n`let`是另一種宣告變數的方式，他有幾個特點：有block scope，沒有hoisting，不能重複宣告\n```js\n//es6\n{\n  let foo = \"foo\";\n  var bar = \"bar\";\n}\n\nconsole.log(foo); //<= Error: foo is not defined\nconsole.log(bar); //<= bar\n```\n\nbabel對他的實現方式是在前面加個prefix`_`\n```js\n//babel\nvar _temporalUndefined = {};\n{\n  var _foo = _temporalUndefined;\n  _foo = \"foo\";\n  var bar = \"bar\";\n}\n```\n`let`不像`var`一樣具有hoisting的特性，這造成一些現象\n```js\n//es6\n{\n  console.log(x); // <=x is not defined - temporal dead zone\n  let x = 1;\n}\n```\n在一個block scope中，只要有進行`let`宣告的變數，那麼該變數在被宣告前都不能被使用。\n這個區塊就被稱為temporal dead zone\n```js\n//es6\n{\n  //-- dead zone for x start --\n\n  console.log(x); // <=ReferenceError: x is not defined - temporal dead zone\n\n  //-- dead zone for x end --\n  let x = 1;\n  // u can use x now.\n  console.log(x); // <= 1\n\n}\n```\nbabel的實現方式如下\n```js\n\"use strict\";\n\nvar _temporalAssertDefined = function (val, name, undef) {\n  if (val === undef) {\n    throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n  }\n  return true;\n};\n\nvar _temporalUndefined = {};\n{\n  var x = _temporalUndefined;\n\n  console.log(_temporalAssertDefined(x, \"x\", _temporalUndefined) && x);\n\n  x = {};\n\n  console.log(_temporalAssertDefined(x, \"x\", _temporalUndefined) && x);\n}\n```\n他一開始先在全域宣告一個`_temporalUndefined`物件作為not defined flag，當我們在block scope中做`let`宣告時，\n他會先在scope的開始部分就先用`var`宣告物件，然後指向全域的`_temporalUndefined`物件。接下來\n在每次調用`x`時，都會先檢查他的參考對象是不是`_temporalUndefined`，如果是的話就拋出\n`ReferenceError`\n\n可以注意的點是，`val === undef`比較的是參照，而不是值，所以就算你用`let x={}`也不會怎樣，\n因為這兩個`{}`是不同的匿名物件\n```js\n//es6\n{\n  console.log(x); // <=ReferenceError: x is not defined - temporal dead zone\n  let x = 1;\n  console.log(x);\n}\n\n//babel\n\"use strict\";\n\nvar _temporalAssertDefined = function (val, name, undef) {\n  if (val === undef) {\n    // 這裡是檢查參照，而不是值\n    throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n  }\n  return true;\n};\n\n//宣告一個匿名物件，指定物件_temporalUndefined參照他\nvar _temporalUndefined = {};\n\n{\n  var x = _temporalUndefined;\n\n  console.log(_temporalAssertDefined(x, \"x\", _temporalUndefined) && x);\n  //宣告一個匿名物件，指定物件x參照他。酸然值相同，但這跟上面那個匿名物件完全無關\n  x = {};\n  console.log(_temporalAssertDefined(x, \"x\", _temporalUndefined) && x);\n}\n```\n當撞名時babel會自動改名，不必擔心\n```js\n//es6\nvar _temporalUndefined;\n{\n  let x = {};\n}\n\n//babel\n\"use strict\";\n\nvar _temporalAssertDefined = function (val, name, undef) { if (val === undef) { throw new ReferenceError(name + \" is not defined - temporal dead zone\"); } return true; };\n\nvar _temporalUndefined2 = {}; //變成_temporalUndefined2了\nvar _temporalUndefined;\n{\n  var x = _temporalUndefined2;\n  x = {};\n}\n```\n\"不能重複宣告\"這項特性則是在babel compile階段做檢查的\n```js\n//es6\n{\n  let x = 1;\n  let x = 2;\n}\n/* babel compile err\nrepl: Line 3: Duplicate declaration \"x\"\n  1 | {\n  2 |   let x = 1;\n> 3 |   let x = 2;\n    |       ^\n  4 | }\n*/\n```\n","source":"_posts/2015-03-20-learning-es6-with-babel-let.md","raw":"title: learning es6 with babel - let\ndate: 2015-03-20 23:29:00\ntags:\n---\n\n`let`是另一種宣告變數的方式，他有幾個特點：有block scope，沒有hoisting，不能重複宣告\n```js\n//es6\n{\n  let foo = \"foo\";\n  var bar = \"bar\";\n}\n\nconsole.log(foo); //<= Error: foo is not defined\nconsole.log(bar); //<= bar\n```\n\nbabel對他的實現方式是在前面加個prefix`_`\n```js\n//babel\nvar _temporalUndefined = {};\n{\n  var _foo = _temporalUndefined;\n  _foo = \"foo\";\n  var bar = \"bar\";\n}\n```\n`let`不像`var`一樣具有hoisting的特性，這造成一些現象\n```js\n//es6\n{\n  console.log(x); // <=x is not defined - temporal dead zone\n  let x = 1;\n}\n```\n在一個block scope中，只要有進行`let`宣告的變數，那麼該變數在被宣告前都不能被使用。\n這個區塊就被稱為temporal dead zone\n```js\n//es6\n{\n  //-- dead zone for x start --\n\n  console.log(x); // <=ReferenceError: x is not defined - temporal dead zone\n\n  //-- dead zone for x end --\n  let x = 1;\n  // u can use x now.\n  console.log(x); // <= 1\n\n}\n```\nbabel的實現方式如下\n```js\n\"use strict\";\n\nvar _temporalAssertDefined = function (val, name, undef) {\n  if (val === undef) {\n    throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n  }\n  return true;\n};\n\nvar _temporalUndefined = {};\n{\n  var x = _temporalUndefined;\n\n  console.log(_temporalAssertDefined(x, \"x\", _temporalUndefined) && x);\n\n  x = {};\n\n  console.log(_temporalAssertDefined(x, \"x\", _temporalUndefined) && x);\n}\n```\n他一開始先在全域宣告一個`_temporalUndefined`物件作為not defined flag，當我們在block scope中做`let`宣告時，\n他會先在scope的開始部分就先用`var`宣告物件，然後指向全域的`_temporalUndefined`物件。接下來\n在每次調用`x`時，都會先檢查他的參考對象是不是`_temporalUndefined`，如果是的話就拋出\n`ReferenceError`\n\n可以注意的點是，`val === undef`比較的是參照，而不是值，所以就算你用`let x={}`也不會怎樣，\n因為這兩個`{}`是不同的匿名物件\n```js\n//es6\n{\n  console.log(x); // <=ReferenceError: x is not defined - temporal dead zone\n  let x = 1;\n  console.log(x);\n}\n\n//babel\n\"use strict\";\n\nvar _temporalAssertDefined = function (val, name, undef) {\n  if (val === undef) {\n    // 這裡是檢查參照，而不是值\n    throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n  }\n  return true;\n};\n\n//宣告一個匿名物件，指定物件_temporalUndefined參照他\nvar _temporalUndefined = {};\n\n{\n  var x = _temporalUndefined;\n\n  console.log(_temporalAssertDefined(x, \"x\", _temporalUndefined) && x);\n  //宣告一個匿名物件，指定物件x參照他。酸然值相同，但這跟上面那個匿名物件完全無關\n  x = {};\n  console.log(_temporalAssertDefined(x, \"x\", _temporalUndefined) && x);\n}\n```\n當撞名時babel會自動改名，不必擔心\n```js\n//es6\nvar _temporalUndefined;\n{\n  let x = {};\n}\n\n//babel\n\"use strict\";\n\nvar _temporalAssertDefined = function (val, name, undef) { if (val === undef) { throw new ReferenceError(name + \" is not defined - temporal dead zone\"); } return true; };\n\nvar _temporalUndefined2 = {}; //變成_temporalUndefined2了\nvar _temporalUndefined;\n{\n  var x = _temporalUndefined2;\n  x = {};\n}\n```\n\"不能重複宣告\"這項特性則是在babel compile階段做檢查的\n```js\n//es6\n{\n  let x = 1;\n  let x = 2;\n}\n/* babel compile err\nrepl: Line 3: Duplicate declaration \"x\"\n  1 | {\n  2 |   let x = 1;\n> 3 |   let x = 2;\n    |       ^\n  4 | }\n*/\n```\n","slug":"2015-03-20-learning-es6-with-babel-let","published":1,"updated":"2015-03-20T15:29:00.290Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci7xdfovm0002kcpgw9bfey0e"},{"title":"learning es6 with babel - const","date":"2015-03-20T15:29:12.000Z","_content":"\n`const`用來聲明常量，也就是該變數的值在聲明後不會再改變，跟`let`一樣有block scope，沒有\nhoisting\n```js\n//es6\nconst PI = 3.14159;\n// 按照js的naming rule, 常量應該全部大寫\nconsole.log(PI); // <= 3.14159\n\nPI = 3;\nconsole.log(PI); // <= 3.14159\n\nconst PI = 3;\nconsole.log(PI); // <= 3.14159\n```\nbabel會在compile階段就檢查`PI`是不是在宣告後有試圖去改變他，所以上面這段會出現Error\n```\nrepl: Line 6: \"PI\" is read-only\n  4 | console.log(PI); // <= 3.14159\n  5 |\n> 6 | PI = 3;\n    | ^\n  7 | console.log(PI); // <= 3.14159\n  8 |\n  9 |\n```\n由於常量的特性是在compile階段檢查的，所以babel對於`const`其餘特性(block scope,\n  no hoising)的實現方式就跟`let`一樣\n```js\n//es6\n{\n  const PI = 3.14159;\n}\n\n//babel\n\"use strict\";\n\nvar _temporalAssertDefined = function (val, name, undef) {\n  if (val === undef) {\n    throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n  }\n  return true;\n};\n\nvar _temporalUndefined = {};\n{\n  var PI = _temporalUndefined;\n  PI = 3.14159;\n}\n```\n要注意的是`const`不等於`Object.freeze()`：`const`是固定變數的參考，`Object.freeze()`\n則是固定變數參考對象的值\n```js\nconst foo = {};\n\nfoo.prop = 123;\nconsole.log(foo.prop); // <= 123\n\nvar bar = {};\nObject.freeze(bar);\n\nbar.prop = 123;\nconsole.log(bar.prop); // <= undefined\n```\n","source":"_posts/2015-03-20-learning-es6-with-babel-const.md","raw":"title: learning es6 with babel - const\ndate: 2015-03-20 23:29:12\ntags:\n---\n\n`const`用來聲明常量，也就是該變數的值在聲明後不會再改變，跟`let`一樣有block scope，沒有\nhoisting\n```js\n//es6\nconst PI = 3.14159;\n// 按照js的naming rule, 常量應該全部大寫\nconsole.log(PI); // <= 3.14159\n\nPI = 3;\nconsole.log(PI); // <= 3.14159\n\nconst PI = 3;\nconsole.log(PI); // <= 3.14159\n```\nbabel會在compile階段就檢查`PI`是不是在宣告後有試圖去改變他，所以上面這段會出現Error\n```\nrepl: Line 6: \"PI\" is read-only\n  4 | console.log(PI); // <= 3.14159\n  5 |\n> 6 | PI = 3;\n    | ^\n  7 | console.log(PI); // <= 3.14159\n  8 |\n  9 |\n```\n由於常量的特性是在compile階段檢查的，所以babel對於`const`其餘特性(block scope,\n  no hoising)的實現方式就跟`let`一樣\n```js\n//es6\n{\n  const PI = 3.14159;\n}\n\n//babel\n\"use strict\";\n\nvar _temporalAssertDefined = function (val, name, undef) {\n  if (val === undef) {\n    throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n  }\n  return true;\n};\n\nvar _temporalUndefined = {};\n{\n  var PI = _temporalUndefined;\n  PI = 3.14159;\n}\n```\n要注意的是`const`不等於`Object.freeze()`：`const`是固定變數的參考，`Object.freeze()`\n則是固定變數參考對象的值\n```js\nconst foo = {};\n\nfoo.prop = 123;\nconsole.log(foo.prop); // <= 123\n\nvar bar = {};\nObject.freeze(bar);\n\nbar.prop = 123;\nconsole.log(bar.prop); // <= undefined\n```\n","slug":"2015-03-20-learning-es6-with-babel-const","published":1,"updated":"2015-03-20T15:29:12.589Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci7xdfovo0003kcpg1urhwltl"},{"title":"Learn es6 with babel - Arrows","date":"2015-03-15T14:02:01.000Z","_content":"在ES6中，可以使用`=>`來定義function。這是一個很類似coffeescript的語法糖（事實上es6有很大一部分是語法糖，個人很喜歡這種做法，與其去改變語言的本質，不如讓語言順著原本的脈絡慢慢茁壯）\n```js\n//es6\nvar f = (foo) => bar;\n\n//babel\nvar f = function (foo) {\n  return bar;\n};\n```\n當有參數，小括號可以省略\n```js\n//es6\nvar f = foo => bar;\n\n//babel\nvar f = function (foo) {\n  return bar;\n};\n```\n當`return`不是單一Expression時，需要用大括號把它包起來，就像一般在寫`function`一樣\n```js\n//es6\nvar foo = (v) => {\n  if (v === bar)\n    play(v);\n};\n\nvar foo = function (v) {\n  if (v === bar) play(v);\n};\n```\n它可以讓code更加的簡短且語意化，例如用在callback上\n```js\n//js\nfoo(res => res + 1);\n\n//babel\nfoo(function (res) {\n  return res + 1;\n});\n```\n有種lambda的感覺，對吧？\n要注意的是，如同在coffeescript中一樣，fat arrow(`=>`)除了是function的縮寫之外，還具有**在定義時綁定`this`**的特性\n```js\n//js\nvar john = {\n  _name: \"John\",\n  _friends: ['Mary'],\n  printFriends: function() {\n    this._friends.forEach(friendName =>\n      console.log(this._name + \" knows \" + friendName));\n      //因為上面使用fat arrow的關係, this才會被綁定為\"定義時的this\"\n  }\n}\n\n//babel\nvar john = {\n  _name: \"John\",\n  _friends: [\"Mary\"],\n  printFriends: function printFriends() {\n    var _this = this;\n    //實現方式其實就是我們常在寫的that = this\n\n    this._friends.forEach(function (friendName) {\n      return console.log(_this._name + \" knows \" + friendName);\n    });\n  }\n};\n\njohn.printFriends()\n// <= John knows Mary\n\n//-- 使用function的版本\n\n//js\nvar john = {\n  _name: \"John\",\n  _friends: ['Mary'],\n  printFriends: function() {\n    this._friends.forEach(function(friendName){\n      console.log(this._name + \" knows \" + friendName)\n      //這裡使用的是function，this會在呼叫時才決定要指向誰\n    });\n  }\n}\n\njohn.printFriends()\n// if es5 <= undefined knows Mary\n// if es6 <= Cannot read property '_name' of undefined\n// 在es5中，當this指向全域時會得到window，但在es6會得到undefined\n```\n","source":"_posts/2015-03-15-learn-es6-with-babel.md","raw":"title: Learn es6 with babel - Arrows\ndate: 2015-03-15 22:02:01\ntags: learning, es6\n---\n在ES6中，可以使用`=>`來定義function。這是一個很類似coffeescript的語法糖（事實上es6有很大一部分是語法糖，個人很喜歡這種做法，與其去改變語言的本質，不如讓語言順著原本的脈絡慢慢茁壯）\n```js\n//es6\nvar f = (foo) => bar;\n\n//babel\nvar f = function (foo) {\n  return bar;\n};\n```\n當有參數，小括號可以省略\n```js\n//es6\nvar f = foo => bar;\n\n//babel\nvar f = function (foo) {\n  return bar;\n};\n```\n當`return`不是單一Expression時，需要用大括號把它包起來，就像一般在寫`function`一樣\n```js\n//es6\nvar foo = (v) => {\n  if (v === bar)\n    play(v);\n};\n\nvar foo = function (v) {\n  if (v === bar) play(v);\n};\n```\n它可以讓code更加的簡短且語意化，例如用在callback上\n```js\n//js\nfoo(res => res + 1);\n\n//babel\nfoo(function (res) {\n  return res + 1;\n});\n```\n有種lambda的感覺，對吧？\n要注意的是，如同在coffeescript中一樣，fat arrow(`=>`)除了是function的縮寫之外，還具有**在定義時綁定`this`**的特性\n```js\n//js\nvar john = {\n  _name: \"John\",\n  _friends: ['Mary'],\n  printFriends: function() {\n    this._friends.forEach(friendName =>\n      console.log(this._name + \" knows \" + friendName));\n      //因為上面使用fat arrow的關係, this才會被綁定為\"定義時的this\"\n  }\n}\n\n//babel\nvar john = {\n  _name: \"John\",\n  _friends: [\"Mary\"],\n  printFriends: function printFriends() {\n    var _this = this;\n    //實現方式其實就是我們常在寫的that = this\n\n    this._friends.forEach(function (friendName) {\n      return console.log(_this._name + \" knows \" + friendName);\n    });\n  }\n};\n\njohn.printFriends()\n// <= John knows Mary\n\n//-- 使用function的版本\n\n//js\nvar john = {\n  _name: \"John\",\n  _friends: ['Mary'],\n  printFriends: function() {\n    this._friends.forEach(function(friendName){\n      console.log(this._name + \" knows \" + friendName)\n      //這裡使用的是function，this會在呼叫時才決定要指向誰\n    });\n  }\n}\n\njohn.printFriends()\n// if es5 <= undefined knows Mary\n// if es6 <= Cannot read property '_name' of undefined\n// 在es5中，當this指向全域時會得到window，但在es6會得到undefined\n```\n","slug":"2015-03-15-learn-es6-with-babel","published":1,"updated":"2015-03-20T15:21:28.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci7xdfovp0004kcpg2m3x918c"},{"title":"從logdown到hexo","date":"2015-02-26T15:32:23.000Z","_content":"因為很多很多的因素，這半年有點低潮\nlogdown沒寫半篇文章，社群聚會完全沒參加，github也是一片荒涼...\n不過新年假期多少恢復了一點元氣；換個新家，換個心情，重新出發!\n\n話說...我好像換了很多次新家了\nblogger => octopress => jeklly => logdown => hexo\n每次裝潢完沒多久又看到新玩具，然後就...(汗\n希望這次hexo能撐得久一點:P\n\n最近這幾天應該會上點style，然後把舊文章修一修\n順便複習一下markdown語法...還有中文的語法XD","source":"_posts/2015-02-26-move-from-logdown-to-hexo.md","raw":"title: 從logdown到hexo\ndate: 2015-02-26 23:32:23\ntags: \n---\n因為很多很多的因素，這半年有點低潮\nlogdown沒寫半篇文章，社群聚會完全沒參加，github也是一片荒涼...\n不過新年假期多少恢復了一點元氣；換個新家，換個心情，重新出發!\n\n話說...我好像換了很多次新家了\nblogger => octopress => jeklly => logdown => hexo\n每次裝潢完沒多久又看到新玩具，然後就...(汗\n希望這次hexo能撐得久一點:P\n\n最近這幾天應該會上點style，然後把舊文章修一修\n順便複習一下markdown語法...還有中文的語法XD","slug":"2015-02-26-move-from-logdown-to-hexo","published":1,"updated":"2015-03-20T15:21:28.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci7xdfovu0007kcpgv5m4ykgz"},{"layout":"post","title":"[心得] Debug Cordova app with Android 4.4 and Chrome","date":"2014-05-28T19:43:00.000Z","comments":1,"_content":"在Android 4.4，有新的方式可以用Chrome debug Android 上面的 WebView\n方法超簡單（以下以cordova app當範例）：\n1. 確定你有Chrome 30+, Android 4.4, 還有一個嗷嗷待哺的cordova app\n2. 用USB把他們連起來，選項該的開該打勾的打勾，就跟平常一樣\n3. 在你的cordova app的`onDeviceReady`事件加上這段\n        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n            if ( 0 != ( getApplcationInfo().flags &= ApplicationInfo.FLAG_DEBUGGABLE ) ) {\n                WebView.setWebContentsDebuggingEnabled(true);\n            }\n        }\n4. 切到chrome的`chrome://inspect/#devices`頁面\n5. 勾選Discover USB Devices，應該會看到你的安拙在上面，接著開啟你的cordova app\n6. 現在應該會列出你的app開啟的WebView(通常只有一個)，點下inspect，熟悉的ChromeDevTool就出現了！\n    \n感覺就跟Safari的web inspecter一樣\n \n","source":"_posts/2014-05-29-experience-debug-cordova-app-with-android-44-and-chrome.md","raw":"---\nlayout: post\ntitle: '[心得] Debug Cordova app with Android 4.4 and Chrome'\ndate: 2014-05-29 03:43\ncomments: true\ncategories: \n---\n在Android 4.4，有新的方式可以用Chrome debug Android 上面的 WebView\n方法超簡單（以下以cordova app當範例）：\n1. 確定你有Chrome 30+, Android 4.4, 還有一個嗷嗷待哺的cordova app\n2. 用USB把他們連起來，選項該的開該打勾的打勾，就跟平常一樣\n3. 在你的cordova app的`onDeviceReady`事件加上這段\n        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n            if ( 0 != ( getApplcationInfo().flags &= ApplicationInfo.FLAG_DEBUGGABLE ) ) {\n                WebView.setWebContentsDebuggingEnabled(true);\n            }\n        }\n4. 切到chrome的`chrome://inspect/#devices`頁面\n5. 勾選Discover USB Devices，應該會看到你的安拙在上面，接著開啟你的cordova app\n6. 現在應該會列出你的app開啟的WebView(通常只有一個)，點下inspect，熟悉的ChromeDevTool就出現了！\n    \n感覺就跟Safari的web inspecter一樣\n \n","slug":"2014-05-29-experience-debug-cordova-app-with-android-44-and-chrome","published":1,"updated":"2015-03-20T15:21:28.445Z","photos":[],"link":"","_id":"ci7xdfovw0008kcpgaahuk843"},{"layout":"post","title":"[筆記] Cordova trouble shooting","date":"2014-05-25T17:29:00.000Z","comments":1,"_content":"##開發環境：\nEditor: WebStorm 7 with Cordova CLI\nSDK: Cordova 3.4.0 / 3.5.0, Xcode 5.1.1, ADT 22.3.0\nOS: Mac OSX 10.9.2\nDevice: iPhone 4S(iOS 7), Butterfly(Android 4.4), Samsung S3(Android 4.3), Samsung Note 2(Android 4.3)\n\n雖然寫這篇文的時間點，官網上的stable版本依然是3.4.1，不過npm上已經有3.5.0了。個人建議可以直接昇到3.5.0，因為有些bug已經在這版解決了，省得你自己去做solution。\n\n---\n##1. Camera在android一直出現`Class not defind`，可是在iOS卻好好的，而且我確定該死的config.xml沒有寫錯，這哪招？\nA: 先用`cordova plugin ls`檢查一下你的camera plugun叫什麼名字。如果是`com.apache.cordova.camera`的話，接著檢查你的config.xml...我是說`android/res/xml`裡面那隻，看看camera那段，應該是要長這樣：\n```xml\n<feature name=\"Camera\">\n\t<param name=\"android-package\" value=\"org.apache.cordova.camera.CameraLauncher\" />\n</feature>\n```\n注意，是`org.apache.cordova.camera.CameraLauncher`，不是`org.apache.cordova.CameraLauncher`。如果你出現的是後者，回到通用的那隻config.xml，把`<feature name=\"Camera\">`整個區塊刪掉，重新rm/add plarform一次。\n\n##2. 在android 4.4，使用`camera.getPicture()`方法抓取檔案中的圖片，發生一些奇怪的事：同一張圖片從不同路徑進去點選，有些路徑抓的到（例：相簿），有些路徑卻抓不到（例：最近使用的檔案），why?\nA: 這是android 4.4的新改變造成的，詳情可以看這篇issue：[Pick image from Library or Photo album on android 4.4](https://issues.apache.org/jira/browse/CB-5398)，簡單來說就是uri的形式改變了。解決方法有兩種，一種是去改CameraLauncher.java，自己加入kitkat的hack；另外一種是把cordova昇到3.5.0版。對懶人小弟我來說，選哪種很明顯了...XD\n\n##3. 為什麼我build android的時候，`platforms/android/assets/www`底下的檔案常常沒有被更新？  \nA: 之前曾經被這個問題搞到很頭大，連`cordova platform rm/add`之後都一樣，後來發現似乎是WebStorm的問題...。WebStorm的自動儲存機制好像是先寫到cache中，等累計一部份或是超過一定時間後再寫入disk的實體檔案裡，因此如果改完之後馬上進行build，會讀到尚未被寫入的資料。解決方法是變更後加個ctrl + s(save all)就可以了，不過上面那段原因純屬個人猜測，有錯的話煩請指正。\n\n##4. 為什麼用camera拿到的圖片沒有EXIF?\nA: `targetWidth`跟`targetHeight`屬性會把EXIF資訊消掉。\n\n##5. 他媽的為什麼Samsung拍出來的圖片總是不會自動轉正，我明明有下`correctOrientation: true`了啊！？\nA: 就叫你愛用國貨（誤。這是另一個讓我很頭大的問題，如果你用`saveToPhotoAlbum`儲存的話，會發生一些很奇妙的事：在相簿中瀏覽的縮圖是轉過的，可是點進去之後的圖片又是沒轉正的；目前是到的解法是自己把暫存copy一份出來存在另外的資料夾裡，這樣在手機相簿裡縮圖和內容點進去就都會是正的（不過app裡面的img還是要自己下css rotate轉）。當你拉到電腦上用一些可以截取EXIF的軟體看，會發現它其實還是沒轉過的，只是大多數的圖片顯示程式都會去讀EXIF裡面的Orientiation然後自動把它轉正，不過也有另外一種做法，例如HTC跟iphone都是直接給你轉正後的檔案。\n\n##6. iOS傳檔案的時候拿到transferFileError Code:3?\nA: 原因很多，通常code3會伴隨500 Error出現，這時候就要問server端到底發生什麼事了。我遇到的狀況是使用預設的fileTransferOption會傳出不帶副檔名的檔案，如果server端是從檔案名稱截取副檔名來判斷類型的話就會出錯，只要不要偷懶自己設定fileTransferOption就OK了。\n\n##7. 在Android 4.4，從\"最近使用過的檔案\"之類4.4新增的資料夾選取的檔案，上傳時fileTransfer會拿到null?\nA: 原因同Q2，plugin不認識這些4.4新增的路徑，靜待fileTransfer plugin更新，或是跟Q2那篇一樣自己在java檔加入kitkat的hack。","source":"_posts/2014-05-26-note-cordova-trouble-shooting.md","raw":"---\nlayout: post\ntitle: '[筆記] Cordova trouble shooting'\ndate: 2014-05-26 01:29\ncomments: true\ncategories: \n---\n##開發環境：\nEditor: WebStorm 7 with Cordova CLI\nSDK: Cordova 3.4.0 / 3.5.0, Xcode 5.1.1, ADT 22.3.0\nOS: Mac OSX 10.9.2\nDevice: iPhone 4S(iOS 7), Butterfly(Android 4.4), Samsung S3(Android 4.3), Samsung Note 2(Android 4.3)\n\n雖然寫這篇文的時間點，官網上的stable版本依然是3.4.1，不過npm上已經有3.5.0了。個人建議可以直接昇到3.5.0，因為有些bug已經在這版解決了，省得你自己去做solution。\n\n---\n##1. Camera在android一直出現`Class not defind`，可是在iOS卻好好的，而且我確定該死的config.xml沒有寫錯，這哪招？\nA: 先用`cordova plugin ls`檢查一下你的camera plugun叫什麼名字。如果是`com.apache.cordova.camera`的話，接著檢查你的config.xml...我是說`android/res/xml`裡面那隻，看看camera那段，應該是要長這樣：\n```xml\n<feature name=\"Camera\">\n\t<param name=\"android-package\" value=\"org.apache.cordova.camera.CameraLauncher\" />\n</feature>\n```\n注意，是`org.apache.cordova.camera.CameraLauncher`，不是`org.apache.cordova.CameraLauncher`。如果你出現的是後者，回到通用的那隻config.xml，把`<feature name=\"Camera\">`整個區塊刪掉，重新rm/add plarform一次。\n\n##2. 在android 4.4，使用`camera.getPicture()`方法抓取檔案中的圖片，發生一些奇怪的事：同一張圖片從不同路徑進去點選，有些路徑抓的到（例：相簿），有些路徑卻抓不到（例：最近使用的檔案），why?\nA: 這是android 4.4的新改變造成的，詳情可以看這篇issue：[Pick image from Library or Photo album on android 4.4](https://issues.apache.org/jira/browse/CB-5398)，簡單來說就是uri的形式改變了。解決方法有兩種，一種是去改CameraLauncher.java，自己加入kitkat的hack；另外一種是把cordova昇到3.5.0版。對懶人小弟我來說，選哪種很明顯了...XD\n\n##3. 為什麼我build android的時候，`platforms/android/assets/www`底下的檔案常常沒有被更新？  \nA: 之前曾經被這個問題搞到很頭大，連`cordova platform rm/add`之後都一樣，後來發現似乎是WebStorm的問題...。WebStorm的自動儲存機制好像是先寫到cache中，等累計一部份或是超過一定時間後再寫入disk的實體檔案裡，因此如果改完之後馬上進行build，會讀到尚未被寫入的資料。解決方法是變更後加個ctrl + s(save all)就可以了，不過上面那段原因純屬個人猜測，有錯的話煩請指正。\n\n##4. 為什麼用camera拿到的圖片沒有EXIF?\nA: `targetWidth`跟`targetHeight`屬性會把EXIF資訊消掉。\n\n##5. 他媽的為什麼Samsung拍出來的圖片總是不會自動轉正，我明明有下`correctOrientation: true`了啊！？\nA: 就叫你愛用國貨（誤。這是另一個讓我很頭大的問題，如果你用`saveToPhotoAlbum`儲存的話，會發生一些很奇妙的事：在相簿中瀏覽的縮圖是轉過的，可是點進去之後的圖片又是沒轉正的；目前是到的解法是自己把暫存copy一份出來存在另外的資料夾裡，這樣在手機相簿裡縮圖和內容點進去就都會是正的（不過app裡面的img還是要自己下css rotate轉）。當你拉到電腦上用一些可以截取EXIF的軟體看，會發現它其實還是沒轉過的，只是大多數的圖片顯示程式都會去讀EXIF裡面的Orientiation然後自動把它轉正，不過也有另外一種做法，例如HTC跟iphone都是直接給你轉正後的檔案。\n\n##6. iOS傳檔案的時候拿到transferFileError Code:3?\nA: 原因很多，通常code3會伴隨500 Error出現，這時候就要問server端到底發生什麼事了。我遇到的狀況是使用預設的fileTransferOption會傳出不帶副檔名的檔案，如果server端是從檔案名稱截取副檔名來判斷類型的話就會出錯，只要不要偷懶自己設定fileTransferOption就OK了。\n\n##7. 在Android 4.4，從\"最近使用過的檔案\"之類4.4新增的資料夾選取的檔案，上傳時fileTransfer會拿到null?\nA: 原因同Q2，plugin不認識這些4.4新增的路徑，靜待fileTransfer plugin更新，或是跟Q2那篇一樣自己在java檔加入kitkat的hack。","slug":"2014-05-26-note-cordova-trouble-shooting","published":1,"updated":"2015-03-20T15:21:28.441Z","photos":[],"link":"","_id":"ci7xdfow00009kcpgkn600gc0"},{"layout":"post","title":"[筆記] Cordova 3.4 with WP8 踩地雷紀錄","date":"2014-05-16T21:52:00.000Z","comments":1,"_content":"這整個過程讓我想到WOW裡的一個成就： **［這真是段漫長又奇妙的旅程］**\n不過漫長奇妙之外還多了很多的痛苦就是了...ORZ\n###1. `cordova platform add wp8`時出現亂碼錯誤\n...亂碼是要我怎麼debug阿大哥...\n不過還好下面有stack，可以看到問題出在`wp8_parser.js`這隻裡面的這段：\n```js\nchild_process.exec(command, function(err, output, stderr) {\n  events.emit('verbose', output);\n  if (err) {\n  \td.reject(new Error('Requirements check failed: ' + output + stderr));\n  } else {\n  \td.resolve();\n\t}\n});\n```\n\n恩，還是沒有頭緒，試著把err catch註解掉，會得到另一個error`副檔名 .js 沒有對應的 script 引擎`\n於是按照google大神的指示，裝了Windows Scrip，然後再把原本的err catch加回去...就可以了。\n> 老實說小弟才疏學淺完全不知道發生了什麼事...懇請前輩們指點\n\n###2. `cordova platform add wp8`成功，但是在CREAT SUCCESS之後，要加入plugin時發生錯誤`Non-white space before first tag`\n原因出在`\\platforms\\wp8\\CordovaWP8AppProj.csproj`跟`\\platforms\\wp8\\Properties\\WMAppManifest.xml`這兩隻檔案一開始的宣告出現亂碼。\n這是個尚未被解決的Bug，可以參考[這篇](https://issues.apache.org/jira/browse/CB-6301)\n雖然提出者的環境是簡體中文，但是最底下的解法在繁中的環境下依然有效：\n> wei jiang added a comment - 09/Apr/14 14:26\nI have found a solution for this issue:\n1、open C:\\Users\\.cordova\\lib\\wp\\cordova\\3.4.0\\wp8\\bin\\create.js\nline 68:\nchange \n'var f=fso.OpenTextFile(filename,1,2);'\nto \n'var f=fso.OpenTextFile(filename,ForReading,false,TristateFalse);'\nline 75:\nchange \n'var f=fso.OpenTextFile(filename, ForWriting, TristateFalse);'\nto \n'var f=fso.OpenTextFile(filename, ForWriting,true, TristateFalse);'\n2、Change the encoding of these files to 'UTF-8 without BOM' \nin C:\\Users\\.cordova\\lib\\wp\\cordova\\3.4.0\\wp8\\template\nApp.xaml\nApp.xaml.cs\nCordovaWP8AppProj.csproj\nCordovaWP8Solution.sln\nMainPage.xaml.cs\nProperties\\WMAppManifest.xml\nps:I did this using Notepad++\n\n另外，[這篇](http://my.oschina.net/arrowing/blog/181476#OSC_h2_14)也有另一種做法，不過可能是系統語言不同的關係，我用這種作法會沒辦法正確的parse xml。","source":"_posts/2014-05-17-note-cordova-34-with-wp8-minesweeper-records.md","raw":"---\nlayout: post\ntitle: '[筆記] Cordova 3.4 with WP8 踩地雷紀錄'\ndate: 2014-05-17 05:52\ncomments: true\ncategories: \n---\n這整個過程讓我想到WOW裡的一個成就： **［這真是段漫長又奇妙的旅程］**\n不過漫長奇妙之外還多了很多的痛苦就是了...ORZ\n###1. `cordova platform add wp8`時出現亂碼錯誤\n...亂碼是要我怎麼debug阿大哥...\n不過還好下面有stack，可以看到問題出在`wp8_parser.js`這隻裡面的這段：\n```js\nchild_process.exec(command, function(err, output, stderr) {\n  events.emit('verbose', output);\n  if (err) {\n  \td.reject(new Error('Requirements check failed: ' + output + stderr));\n  } else {\n  \td.resolve();\n\t}\n});\n```\n\n恩，還是沒有頭緒，試著把err catch註解掉，會得到另一個error`副檔名 .js 沒有對應的 script 引擎`\n於是按照google大神的指示，裝了Windows Scrip，然後再把原本的err catch加回去...就可以了。\n> 老實說小弟才疏學淺完全不知道發生了什麼事...懇請前輩們指點\n\n###2. `cordova platform add wp8`成功，但是在CREAT SUCCESS之後，要加入plugin時發生錯誤`Non-white space before first tag`\n原因出在`\\platforms\\wp8\\CordovaWP8AppProj.csproj`跟`\\platforms\\wp8\\Properties\\WMAppManifest.xml`這兩隻檔案一開始的宣告出現亂碼。\n這是個尚未被解決的Bug，可以參考[這篇](https://issues.apache.org/jira/browse/CB-6301)\n雖然提出者的環境是簡體中文，但是最底下的解法在繁中的環境下依然有效：\n> wei jiang added a comment - 09/Apr/14 14:26\nI have found a solution for this issue:\n1、open C:\\Users\\.cordova\\lib\\wp\\cordova\\3.4.0\\wp8\\bin\\create.js\nline 68:\nchange \n'var f=fso.OpenTextFile(filename,1,2);'\nto \n'var f=fso.OpenTextFile(filename,ForReading,false,TristateFalse);'\nline 75:\nchange \n'var f=fso.OpenTextFile(filename, ForWriting, TristateFalse);'\nto \n'var f=fso.OpenTextFile(filename, ForWriting,true, TristateFalse);'\n2、Change the encoding of these files to 'UTF-8 without BOM' \nin C:\\Users\\.cordova\\lib\\wp\\cordova\\3.4.0\\wp8\\template\nApp.xaml\nApp.xaml.cs\nCordovaWP8AppProj.csproj\nCordovaWP8Solution.sln\nMainPage.xaml.cs\nProperties\\WMAppManifest.xml\nps:I did this using Notepad++\n\n另外，[這篇](http://my.oschina.net/arrowing/blog/181476#OSC_h2_14)也有另一種做法，不過可能是系統語言不同的關係，我用這種作法會沒辦法正確的parse xml。","slug":"2014-05-17-note-cordova-34-with-wp8-minesweeper-records","published":1,"updated":"2015-03-20T15:21:28.437Z","photos":[],"link":"","_id":"ci7xdfow2000akcpg4mgpnkbl"},{"layout":"post","title":"[教學] YQL十分鐘簡單上手","date":"2014-05-11T22:53:00.000Z","comments":1,"_content":"","source":"_posts/2014-05-12-teaching-yql-for-ten-minutes-easy.md","raw":"---\nlayout: post\ntitle: '[教學] YQL十分鐘簡單上手'\ndate: 2014-05-12 06:53\ncomments: true\ncategories: \n---\n","slug":"2014-05-12-teaching-yql-for-ten-minutes-easy","published":1,"updated":"2015-03-20T15:21:28.433Z","photos":[],"link":"","_id":"ci7xdfow4000bkcpgonppuzhf"},{"layout":"post","title":"[筆記] Cordova with jQuery Mobile & Backbone的一些小問題","date":"2014-04-29T22:05:00.000Z","comments":1,"_content":"小弟這幾個月做前端的心得是：有些東西看起來很美好，睡到床上後才知道...（喂\n下面筆記一下使用jQuery Mobile 1.4.2 + Backbone + Cordova 3.4開發中遇到的一些“小”問題\n\n##Cordova\n---\n####Q: 為什麼我明明照[官方Doc](http://cordova.apache.org/docs/en/3.4.0/config_ref_images.md.html#Icons%20and%20Splash%20Screens)的說明放好icons了，build出來的app圖示還是那隻小機器人？\nA: 因為愛，愛一直都是沒有理由的...好吧，老實說我不知道這是新版的cordova bug還是有什麼地方出了問題，導致cordova add platform的時候生出來的icon永遠都是那隻小機器人。解法有二：一是自己在不同平台中替換，ios的位置放在`platforms\\ios\\{projectName}\\Resoures\\icons`裏面，也可以直接用xcode換（其實這樣比較快，省得取一堆檔名），在Basic settings裡面就找的到，應該不用截圖了XD。android的位置則是在`platforms\\android\\res\\drawable-{dpi}`裡面，Eclipse裡面應該也有地方可以換，不過公司電腦開Eclips超慢所以我沒開過...。第二種方法是用別人寫好的hook幫你做上面那些事，例如[這個](https://gist.github.com/apla/6179863)。\n不過，用上面第一種方法做替換的話，cordova重新建平台的時候又會洗回來一次(rm/add platform時，build不會)，所以並不是個很美好的解法，不過當你被死線追著跑的時候就先將就頂著吧...Orz\n\n####Q: 為什麼config.xml上的Orientation明明有設定portrait了，可是android上卻沒有用？\nA: 根據stackoverflow上[這篇回答](http://stackoverflow.com/questions/21212246/cordova-ignores-screen-orientation-lock)的說法，這是個bug，不過他應該已經被fix掉了才對，那為什麼還會有問題呢？去檢查AndroidManifest.xml中的設定後，發現`android:screenOrientation`是`userPortrait`，兩者間的差別在於：\n>If the user has locked sensor-based rotation, this behaves the same as portrait, otherwise it behaves the same as sensorPortrait.\n\n可是不對啊，我明明是下portrait，為什麼會變成userPortait？打開cordova裡面一隻叫做`android_parser.js`的檔案，會發現下面這段：\n```js\n// Set the orientation in the AndroidManifest\nvar orientationPref = this.findOrientationPreference(config);\nif (orientationPref) {\n\tvar act = manifest.getroot().find('./application/activity');\n\tswitch (orientationPref) {\n\t\tcase 'default':\n\t\t\tdelete act.attrib[\"android:screenOrientation\"];\n\t\t\tbreak;\n\t\tcase 'portrait':\n\t\t\tact.attrib[\"android:screenOrientation\"] = 'userPortrait';\n\t\t\tbreak;\n\t\tcase 'landscape':\n\t\t\tact.attrib[\"android:screenOrientation\"] = 'userLandscape';\n\t\t}\n}\n```\n簡單來說，就是cordova在build android時會把\"portrait\"轉成\"userPortait\"，\"landspace\"轉成\"userLandspace\"，不知道該說她貼心還是雞婆...\n解法就是把上面的code稍微改一下：\n```js\n// Set the orientation in the AndroidManifest\nvar orientationPref = this.findOrientationPreference(config);\nif (orientationPref) {\n\tvar act = manifest.getroot().find('./application/activity');\n\tswitch (orientationPref) {\n\t\tcase 'default':\n\t\t\tdelete act.attrib[\"android:screenOrientation\"];\n\t\t\tbreak;\n\t\tcase 'portrait':\n\t\t\t// act.attrib[\"android:screenOrientation\"] = 'userPortrait';\n\t\t\tact.attrib[\"android:screenOrientation\"] = 'portrait';\n\t\t\tbreak;\n\t\tcase 'landscape':\n\t\t\t// act.attrib[\"android:screenOrientation\"] = 'userLandscape';\n\t\t\tact.attrib[\"android:screenOrientation\"] = 'landscape';\n\t\t}\n}\n```\n####Q: 在config.xml中設置中文的name會不會有問題？\nA: 老實說，這問題很微妙，因為我在config.xml中設定app name為中文時，build android會發生問題，可是華文圈好像沒有相關災情傳出...如果跟我一樣碰到的話，就在發佈前去`platforms/android/res/values/string.xml`裡面改吧。\n\n\n##jQuery Mobile\n---\n####Q: changepage的時候會抖一下，為什麼？\nA: 就跟你上廁所的時候會抖一下是一樣的道理（誤\n這是很多人都會碰到的問題，不知道為什麼在transform的時候page的高會多出1px，結束後套上正常的min-height就產生了那一點點的抖動。解法有很多種，[這個](http://outof.me/fixing-flickers-jumps-of-jquery-mobile-transitions-in-phonegap-apps/)試過可以，不過會產生另一個問題就是ios會不能捲動page content，需要[iscroll.js](https://github.com/cubiq/iscroll)；後來發現johnbender[有解釋這個問題](https://github.com/jquery/jquery-mobile/issues/2846)，原因是jQuery mobile會預先向下scroll 1px來隱藏nav bar，解決方法就是在jQuery mobile引入後，還沒初始化頁面前設定$.mobile.defaultHomeScroll=0。\n> 寶傑，你知道嗎，這1px搞了我兩天...\n\n####Q: changepage的時候會閃一下，為什麼？\nA: 首先，先確認不是你的眼睛在閃（無誤），畢竟幹這行可說是靠眼睛吃飯的，要好好保養啊...\n如果眼睛沒問題的話，那就在page style上加個`backface-visibility: hidden`就可以了。\n\n##Backbone\n---\n####Q: touch event會被觸發兩次，或是某些頁面的even時好時壞？\nA: 檢查有沒有發生\"ghost view\"的狀況，也就是某個（或某些）dom被綁了一個以上的view，這種事情常發生在動態新增view的時候。\n","source":"_posts/2014-04-30-note-cordova-with-jquery-mobile.md","raw":"---\nlayout: post\ntitle: '[筆記] Cordova with jQuery Mobile & Backbone的一些小問題'\ndate: 2014-04-30 06:05\ncomments: true\ncategories: \n---\n小弟這幾個月做前端的心得是：有些東西看起來很美好，睡到床上後才知道...（喂\n下面筆記一下使用jQuery Mobile 1.4.2 + Backbone + Cordova 3.4開發中遇到的一些“小”問題\n\n##Cordova\n---\n####Q: 為什麼我明明照[官方Doc](http://cordova.apache.org/docs/en/3.4.0/config_ref_images.md.html#Icons%20and%20Splash%20Screens)的說明放好icons了，build出來的app圖示還是那隻小機器人？\nA: 因為愛，愛一直都是沒有理由的...好吧，老實說我不知道這是新版的cordova bug還是有什麼地方出了問題，導致cordova add platform的時候生出來的icon永遠都是那隻小機器人。解法有二：一是自己在不同平台中替換，ios的位置放在`platforms\\ios\\{projectName}\\Resoures\\icons`裏面，也可以直接用xcode換（其實這樣比較快，省得取一堆檔名），在Basic settings裡面就找的到，應該不用截圖了XD。android的位置則是在`platforms\\android\\res\\drawable-{dpi}`裡面，Eclipse裡面應該也有地方可以換，不過公司電腦開Eclips超慢所以我沒開過...。第二種方法是用別人寫好的hook幫你做上面那些事，例如[這個](https://gist.github.com/apla/6179863)。\n不過，用上面第一種方法做替換的話，cordova重新建平台的時候又會洗回來一次(rm/add platform時，build不會)，所以並不是個很美好的解法，不過當你被死線追著跑的時候就先將就頂著吧...Orz\n\n####Q: 為什麼config.xml上的Orientation明明有設定portrait了，可是android上卻沒有用？\nA: 根據stackoverflow上[這篇回答](http://stackoverflow.com/questions/21212246/cordova-ignores-screen-orientation-lock)的說法，這是個bug，不過他應該已經被fix掉了才對，那為什麼還會有問題呢？去檢查AndroidManifest.xml中的設定後，發現`android:screenOrientation`是`userPortrait`，兩者間的差別在於：\n>If the user has locked sensor-based rotation, this behaves the same as portrait, otherwise it behaves the same as sensorPortrait.\n\n可是不對啊，我明明是下portrait，為什麼會變成userPortait？打開cordova裡面一隻叫做`android_parser.js`的檔案，會發現下面這段：\n```js\n// Set the orientation in the AndroidManifest\nvar orientationPref = this.findOrientationPreference(config);\nif (orientationPref) {\n\tvar act = manifest.getroot().find('./application/activity');\n\tswitch (orientationPref) {\n\t\tcase 'default':\n\t\t\tdelete act.attrib[\"android:screenOrientation\"];\n\t\t\tbreak;\n\t\tcase 'portrait':\n\t\t\tact.attrib[\"android:screenOrientation\"] = 'userPortrait';\n\t\t\tbreak;\n\t\tcase 'landscape':\n\t\t\tact.attrib[\"android:screenOrientation\"] = 'userLandscape';\n\t\t}\n}\n```\n簡單來說，就是cordova在build android時會把\"portrait\"轉成\"userPortait\"，\"landspace\"轉成\"userLandspace\"，不知道該說她貼心還是雞婆...\n解法就是把上面的code稍微改一下：\n```js\n// Set the orientation in the AndroidManifest\nvar orientationPref = this.findOrientationPreference(config);\nif (orientationPref) {\n\tvar act = manifest.getroot().find('./application/activity');\n\tswitch (orientationPref) {\n\t\tcase 'default':\n\t\t\tdelete act.attrib[\"android:screenOrientation\"];\n\t\t\tbreak;\n\t\tcase 'portrait':\n\t\t\t// act.attrib[\"android:screenOrientation\"] = 'userPortrait';\n\t\t\tact.attrib[\"android:screenOrientation\"] = 'portrait';\n\t\t\tbreak;\n\t\tcase 'landscape':\n\t\t\t// act.attrib[\"android:screenOrientation\"] = 'userLandscape';\n\t\t\tact.attrib[\"android:screenOrientation\"] = 'landscape';\n\t\t}\n}\n```\n####Q: 在config.xml中設置中文的name會不會有問題？\nA: 老實說，這問題很微妙，因為我在config.xml中設定app name為中文時，build android會發生問題，可是華文圈好像沒有相關災情傳出...如果跟我一樣碰到的話，就在發佈前去`platforms/android/res/values/string.xml`裡面改吧。\n\n\n##jQuery Mobile\n---\n####Q: changepage的時候會抖一下，為什麼？\nA: 就跟你上廁所的時候會抖一下是一樣的道理（誤\n這是很多人都會碰到的問題，不知道為什麼在transform的時候page的高會多出1px，結束後套上正常的min-height就產生了那一點點的抖動。解法有很多種，[這個](http://outof.me/fixing-flickers-jumps-of-jquery-mobile-transitions-in-phonegap-apps/)試過可以，不過會產生另一個問題就是ios會不能捲動page content，需要[iscroll.js](https://github.com/cubiq/iscroll)；後來發現johnbender[有解釋這個問題](https://github.com/jquery/jquery-mobile/issues/2846)，原因是jQuery mobile會預先向下scroll 1px來隱藏nav bar，解決方法就是在jQuery mobile引入後，還沒初始化頁面前設定$.mobile.defaultHomeScroll=0。\n> 寶傑，你知道嗎，這1px搞了我兩天...\n\n####Q: changepage的時候會閃一下，為什麼？\nA: 首先，先確認不是你的眼睛在閃（無誤），畢竟幹這行可說是靠眼睛吃飯的，要好好保養啊...\n如果眼睛沒問題的話，那就在page style上加個`backface-visibility: hidden`就可以了。\n\n##Backbone\n---\n####Q: touch event會被觸發兩次，或是某些頁面的even時好時壞？\nA: 檢查有沒有發生\"ghost view\"的狀況，也就是某個（或某些）dom被綁了一個以上的view，這種事情常發生在動態新增view的時候。\n","slug":"2014-04-30-note-cordova-with-jquery-mobile","published":1,"updated":"2015-03-20T15:21:28.430Z","photos":[],"link":"","_id":"ci7xdfow7000ckcpgnklfqki3"},{"layout":"post","title":"[筆記] Chrome workspace with Sass and Compass","date":"2014-03-26T01:54:00.000Z","comments":1,"_content":"","source":"_posts/2014-03-26-note-chrome-workspace-with-sass-and-compass.md","raw":"---\nlayout: post\ntitle: '[筆記] Chrome workspace with Sass and Compass'\ndate: 2014-03-26 09:54\ncomments: true\ncategories: \n---\n","slug":"2014-03-26-note-chrome-workspace-with-sass-and-compass","published":1,"updated":"2015-03-20T15:21:28.426Z","photos":[],"link":"","_id":"ci7xdfow8000dkcpgzm11p23c"},{"layout":"post","title":"[筆記] WebStorm中Sass File Watcher的一顆小地雷","date":"2014-03-08T04:37:00.000Z","comments":1,"_content":"當我們在寫Sass的時候，把它拆成各個區塊方便管理是一件很正常的事，像這樣：\n```\npartial.sass\nmain.sass\n```\n然後，因為partial.sass不需要被compiler成partial.css，所以檔名前面會加上加上`_`，變成\\_partial.sass。到目前為止一切都很合理。\n```\n_partial.sass\nmain.sass\n```\n接下來在main.sass中引入這個partial，看起來沒什麼問題，不過接下來就是地雷了\n```css\n@import partial\n\n// main.sass\n```\n通常，我們會希望在更改\\_partial中的內容後，重新編譯引入他的檔案，也就是main.sass。爬過stackoverflow之後，可以知道WebStorm提供了一個選項給你，叫做\"track only root files\"，取消的話她就會連帶編譯跟這個檔有關的所有檔案，很貼心對吧？\n\n...才怪，當你實際測試之後會發現，更改\\_partial.sass的內容後，並沒有編譯出新的main.css，要把import的檔名改一下：\n```css\n@import _partial\n\n// main.sass\n```\n這樣子，\\_partial.sass的內容被更改的時候，就會一併編譯main.sass了。不過問題還沒結束，仔細看資料夾，你會發現多了一個\\_partial.css...沒錯，他連`_`開頭的檔案也編譯了。\n\n正確的解法應該是， **要勾選track only root files，然後import的檔名必須加上`_`**，這樣就能正確的編譯且不產生多餘的檔案了。\n\n> ...馬德，stackoverflow誤我半天...","source":"_posts/2014-03-08-note-sass-with-webstorm.md","raw":"---\nlayout: post\ntitle: '[筆記] WebStorm中Sass File Watcher的一顆小地雷'\ndate: 2014-03-08 12:37\ncomments: true\ncategories: \n---\n當我們在寫Sass的時候，把它拆成各個區塊方便管理是一件很正常的事，像這樣：\n```\npartial.sass\nmain.sass\n```\n然後，因為partial.sass不需要被compiler成partial.css，所以檔名前面會加上加上`_`，變成\\_partial.sass。到目前為止一切都很合理。\n```\n_partial.sass\nmain.sass\n```\n接下來在main.sass中引入這個partial，看起來沒什麼問題，不過接下來就是地雷了\n```css\n@import partial\n\n// main.sass\n```\n通常，我們會希望在更改\\_partial中的內容後，重新編譯引入他的檔案，也就是main.sass。爬過stackoverflow之後，可以知道WebStorm提供了一個選項給你，叫做\"track only root files\"，取消的話她就會連帶編譯跟這個檔有關的所有檔案，很貼心對吧？\n\n...才怪，當你實際測試之後會發現，更改\\_partial.sass的內容後，並沒有編譯出新的main.css，要把import的檔名改一下：\n```css\n@import _partial\n\n// main.sass\n```\n這樣子，\\_partial.sass的內容被更改的時候，就會一併編譯main.sass了。不過問題還沒結束，仔細看資料夾，你會發現多了一個\\_partial.css...沒錯，他連`_`開頭的檔案也編譯了。\n\n正確的解法應該是， **要勾選track only root files，然後import的檔名必須加上`_`**，這樣就能正確的編譯且不產生多餘的檔案了。\n\n> ...馬德，stackoverflow誤我半天...","slug":"2014-03-08-note-sass-with-webstorm","published":1,"updated":"2015-03-20T15:21:28.422Z","photos":[],"link":"","_id":"ci7xdfowe000ekcpgymuzj0ot"},{"layout":"post","title":"[筆記] 在WebStorm中新增compass的語法提示","date":"2014-03-08T06:31:00.000Z","comments":1,"_content":"在WebStorm中，compass是沒有內建代碼提示的，而且所有的compass mixin都會被標示為undefined mixin（雖然不影響compiler），連`@import compass`底下都會爬一條紅蚯蚓，跟你說他找不到compass.sass這個檔案。目前看到最好的解法是手動新增符號連結。\n\n先切到專案中的sass目錄裡\n```\ncd projectlocate/sass\n```\n新增一個compass的符號連結\n```\nmklink /d compass $COMPASS_LOCATE\n```\n$COMPASS_LOCATE`是裝在ruby gem底下的compass stylesheet位置，舉例來說我的長這樣：\n```\nH:\\Units\\Ruby193\\lib\\ruby\\gems\\1.9.1\\gems\\compass-0.12.3\\frameworks\\compass\\stylesheets\\compass\n```\n然後就可以得到compass的代碼提示了，這作法就類似把新增compass到你的libary裡面，只是沒有實際引入檔案。\n\n如果要移除這個符號連結， **不要直接刪除**，要用下面這行指令：\n```\nrmdir compass\n```\n至於mac或linux中，Symbolic Link的指令是這樣：\n```\nln -s <dest> <link>\nrm <dest>\n```\n例如我的是/Library/Ruby/Gems/2.0.0/gems/compass-0.12.3/frameworks/compass/stylesheets/compass\n\n\n\n> 我說大哥阿，你既然都bundle compass進去了，為什麼不搞得徹底一點呢....\n","source":"_posts/2014-03-08-note-in-webstorm-added-compass-syntax-tips.md","raw":"---\nlayout: post\ntitle: '[筆記] 在WebStorm中新增compass的語法提示'\ndate: 2014-03-08 14:31\ncomments: true\ncategories: \n---\n在WebStorm中，compass是沒有內建代碼提示的，而且所有的compass mixin都會被標示為undefined mixin（雖然不影響compiler），連`@import compass`底下都會爬一條紅蚯蚓，跟你說他找不到compass.sass這個檔案。目前看到最好的解法是手動新增符號連結。\n\n先切到專案中的sass目錄裡\n```\ncd projectlocate/sass\n```\n新增一個compass的符號連結\n```\nmklink /d compass $COMPASS_LOCATE\n```\n$COMPASS_LOCATE`是裝在ruby gem底下的compass stylesheet位置，舉例來說我的長這樣：\n```\nH:\\Units\\Ruby193\\lib\\ruby\\gems\\1.9.1\\gems\\compass-0.12.3\\frameworks\\compass\\stylesheets\\compass\n```\n然後就可以得到compass的代碼提示了，這作法就類似把新增compass到你的libary裡面，只是沒有實際引入檔案。\n\n如果要移除這個符號連結， **不要直接刪除**，要用下面這行指令：\n```\nrmdir compass\n```\n至於mac或linux中，Symbolic Link的指令是這樣：\n```\nln -s <dest> <link>\nrm <dest>\n```\n例如我的是/Library/Ruby/Gems/2.0.0/gems/compass-0.12.3/frameworks/compass/stylesheets/compass\n\n\n\n> 我說大哥阿，你既然都bundle compass進去了，為什麼不搞得徹底一點呢....\n","slug":"2014-03-08-note-in-webstorm-added-compass-syntax-tips","published":1,"updated":"2015-03-20T15:21:28.207Z","photos":[],"link":"","_id":"ci7xdfowg000fkcpglrtrn3s7"},{"layout":"post","title":"[筆記] Flex with LESS","date":"2014-02-10T07:42:00.000Z","comments":1,"_content":"","source":"_posts/2014-02-10-note-flex-with-less.md","raw":"---\nlayout: post\ntitle: '[筆記] Flex with LESS'\ndate: 2014-02-10 15:42\ncomments: true\ncategories: \n---\n","slug":"2014-02-10-note-flex-with-less","published":1,"updated":"2015-03-20T15:21:28.199Z","photos":[],"link":"","_id":"ci7xdfowh000gkcpgthiiung6"},{"layout":"post","title":"[筆記] HTML5 Semantic Elements","date":"2014-02-03T23:59:00.000Z","comments":1,"_content":"<img src=\"http://html5doctor.com/downloads/h5d-sectioning-flowchart.png\"/>\n\n其實舊的HTML4.01中也有一些元素是具有語意性的，例如`<form>`、`<table>`、`<img>`，而在HTML5中，新增了更多的常用語意性元素，用來取代以往由各種`<div>`切成的區塊，例如`<head>`、`<footer>`等等。下面整理一些常用的HTML5語意性元素。\n\n###\\<header>\n用來表示區塊標題的區塊元素，這個區塊可以是一整個頁面、一個段落或一篇文章，可以把它當成一個放置介紹內容的容器。一個頁面中可以有多個header。\\<header>是一容器沒錯，但是它裡面裝的東西應該只有區塊的標題或者摘要。不要把\\<header>當成\\<div class=\"header\">來使用。另外，\\<header>也不能放在\\<footer>、\\<address>或另一個\\<header>裡面。\n\n###\\<nav>\n導覽列。裡面裝的東西應該只有主要的navigation links，不要把各種link都丟到\\<nav>裡面。舉例來說，footer裡面常常會有一排link，那個就不需要包進\\<nav>。\n\n###\\<section>\n文件中的一個專題群組或區塊。一般來說，裡面都會包含heading。如果這個區塊的內容可以分成幾個部分的話，那應該使用article。\n> Examples of sections would be chapters, the various tabbed pages in a tabbed dialog box, or the numbered sections of a thesis. A Web site’s home page could be split into sections for an introduction, news items, and contact information.\n\n使用section的地方像是文章中的章節，一個標籤式對話框中的各個標籤頁面，或論文的編號部分。一個網站的主業通常可以分成幾個section，像是introduction，news items還有contact information。\n> Do not use the \\<section> element as a generic container; this is what \\<div> is for, especially when the sectioning is only for styling purposes.\n\n不要把section當成div用，這大概是最常見的錯誤用法。section內裝的應該是有意義且附帶標題的一段內容。例如這樣：\n```html\n<section>\n  <h1>Heading</h1>\n  <p>Bunch of awesome content</p>\n</section>\n```\n\n<!--more-->\n\n\n###\\<article>\n一個獨立的區塊，同樣必須帶有heading。舉例來說，像這篇文章本身就是一個article，下面每個回應也都是一個單獨的article。\narticle跟section的區分是，article有更高的獨立性及完整性。MDN裡面是這樣說明的：\n> \"The HTML \\<article> Element represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable, e.g., in syndication.\"\n\narticle本身就算脫離了整體也是一個可以獨立存在、具有完整內容的區塊，例如這篇文章；而section雖然也具有獨立表達內容的能力，但是對外層有一定的相依性，例如這篇文章中的一個章節。\n\n###\\<aside>\naside元素代表從內容分離的部分。這些部分通常被表示為sidebar或interns。他們通常包含side explanations，像是術語定義；也可以放較為鬆散相關的東西，像廣告、的作者的傳記、個人資料信息或相關連結。像w3school舉的這個例子：\n```html\n<p>My family and I visited The Epcot center this summer.</p>\n\n<aside>\n  <h4>Epcot Center</h4>\n  <p>The Epcot Center is a theme park in Disney World, Florida.</p>\n</aside>\n```\n另外，不要用aside標記括弧內的文字，這通常被認為是主要內容的一部分。\n\n###\\<footer>\nfooter代表一個區塊的結尾訊息，這個區塊是離他最近的父 \\<article>, \\<aside>, \\<nav>, \\<section>, \\<blockquote>, \\<body>, \\<details>, \\<fieldset>, \\<figure>, \\<td>。footer內通常會包含作者、版權等資訊。footer元素不是父區塊的內容之一，所以並不會出現在outline中。在address元素中的作者資訊也可以放在footer裡面。\n```html\n<footer>\n  <p>Posted by: Hege Refsnes</p>\n  <p>Contact information: <a href=\"mailto:someone@example.com\">\n  someone@example.com</a>.</p>\n</footer>\n```\n\n###\\<figure>\n這也是一個常被誤用的標籤，頻率大概僅次於section。先看看它的定義：\n> The figure element represents a unit of content, optionally with a caption, that is self-contained, that is typically referenced as a single unit from the main flow of the document, and that can be moved away from the main flow of the document without affecting the document’s meaning.\n\n簡單來說，figure是一個有完整內容的區塊，他是主要內容的一部分，而且可以任意移動位置而不影響整體內容的表達。常見的問題是把每個img都包上figure，這完全沒有意義。簡單的判斷方式是想想看＂我把這個figure拿掉會不會影響到上下文的閱讀？＂，如果會的話，他就絕對不該是一個figure。\nfigure絕對不是只拿來包圖片的，他可以包含影音檔、圖表（可能是canvas或是svg）或是一段code。他跟aside的差別在於：\n\n* aside和主內容有關，但不是主內容的一部分\n* figure是主內容的一部分，但是他可以任意移動或刪除而不影響主內容的表達。\n\n通常figure會搭配\\<figcaption>服用，他放在第一個或最後一個子元素，像這樣：\n```html\n<figure>\n  <img src=\"/macaque.jpg\" alt=\"Macaque in the trees\">\n  <figcaption>A cheeky macaque, Lower Kintaganban River, Borneo. Original by <a href=\"http://www.flickr.com/photos/rclark/\">Richard Clark</a></figcaption>\n</figure>\n```\n範例可以參考[HTML5 Doctor](http://html5doctor.com/the-figure-figcaption-elements/)\n\n##其他\n---\n* IE8以下不支援HTML5，可以用[HTML5shiv](https://code.google.com/p/html5shiv/)來補足。\n* 如果沒有十足的把握，可以先用一般的寫法完成頁面，然後再去做語意化的動作。不當的語意化對SEO來說是個悲劇。\n* XDite大大在[如何設計出正確語意的 HTML5](http://wp.xdite.net/?p=3071)有提到＂不要對任何語意TAG下style，否則當需要調整語意結構時，會天下大亂＂，可能是我太菜，不知道為什麼會這樣說，也找不到相關的文章。如果每個semantic tag外面都包個div，這樣的code會比較好嗎？\n\n##參考\n---\n[MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element)\n[W3School](http://www.w3schools.com/html/html5_semantic_elements.asp)\n[HTML5Doctor](http://html5doctor.com/)\n[Blog.XDite.net:如何設計出正確語意的 HTML5](http://wp.xdite.net/?p=3071)\n[避免常見的六種 HTML5 錯誤用法](http://waterlily-lsl.com/modules/article/view.article.php/c1/258)\n[HTML5 中 div section article 的区别](http://www.qianduan.net/html5-differences-in-the-div-section-article.html)","source":"_posts/2014-02-04-note-of-semantic-html.md","raw":"---\nlayout: post\ntitle: '[筆記] HTML5 Semantic Elements'\ndate: 2014-02-04 07:59\ncomments: true\ncategories: \n---\n<img src=\"http://html5doctor.com/downloads/h5d-sectioning-flowchart.png\"/>\n\n其實舊的HTML4.01中也有一些元素是具有語意性的，例如`<form>`、`<table>`、`<img>`，而在HTML5中，新增了更多的常用語意性元素，用來取代以往由各種`<div>`切成的區塊，例如`<head>`、`<footer>`等等。下面整理一些常用的HTML5語意性元素。\n\n###\\<header>\n用來表示區塊標題的區塊元素，這個區塊可以是一整個頁面、一個段落或一篇文章，可以把它當成一個放置介紹內容的容器。一個頁面中可以有多個header。\\<header>是一容器沒錯，但是它裡面裝的東西應該只有區塊的標題或者摘要。不要把\\<header>當成\\<div class=\"header\">來使用。另外，\\<header>也不能放在\\<footer>、\\<address>或另一個\\<header>裡面。\n\n###\\<nav>\n導覽列。裡面裝的東西應該只有主要的navigation links，不要把各種link都丟到\\<nav>裡面。舉例來說，footer裡面常常會有一排link，那個就不需要包進\\<nav>。\n\n###\\<section>\n文件中的一個專題群組或區塊。一般來說，裡面都會包含heading。如果這個區塊的內容可以分成幾個部分的話，那應該使用article。\n> Examples of sections would be chapters, the various tabbed pages in a tabbed dialog box, or the numbered sections of a thesis. A Web site’s home page could be split into sections for an introduction, news items, and contact information.\n\n使用section的地方像是文章中的章節，一個標籤式對話框中的各個標籤頁面，或論文的編號部分。一個網站的主業通常可以分成幾個section，像是introduction，news items還有contact information。\n> Do not use the \\<section> element as a generic container; this is what \\<div> is for, especially when the sectioning is only for styling purposes.\n\n不要把section當成div用，這大概是最常見的錯誤用法。section內裝的應該是有意義且附帶標題的一段內容。例如這樣：\n```html\n<section>\n  <h1>Heading</h1>\n  <p>Bunch of awesome content</p>\n</section>\n```\n\n<!--more-->\n\n\n###\\<article>\n一個獨立的區塊，同樣必須帶有heading。舉例來說，像這篇文章本身就是一個article，下面每個回應也都是一個單獨的article。\narticle跟section的區分是，article有更高的獨立性及完整性。MDN裡面是這樣說明的：\n> \"The HTML \\<article> Element represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable, e.g., in syndication.\"\n\narticle本身就算脫離了整體也是一個可以獨立存在、具有完整內容的區塊，例如這篇文章；而section雖然也具有獨立表達內容的能力，但是對外層有一定的相依性，例如這篇文章中的一個章節。\n\n###\\<aside>\naside元素代表從內容分離的部分。這些部分通常被表示為sidebar或interns。他們通常包含side explanations，像是術語定義；也可以放較為鬆散相關的東西，像廣告、的作者的傳記、個人資料信息或相關連結。像w3school舉的這個例子：\n```html\n<p>My family and I visited The Epcot center this summer.</p>\n\n<aside>\n  <h4>Epcot Center</h4>\n  <p>The Epcot Center is a theme park in Disney World, Florida.</p>\n</aside>\n```\n另外，不要用aside標記括弧內的文字，這通常被認為是主要內容的一部分。\n\n###\\<footer>\nfooter代表一個區塊的結尾訊息，這個區塊是離他最近的父 \\<article>, \\<aside>, \\<nav>, \\<section>, \\<blockquote>, \\<body>, \\<details>, \\<fieldset>, \\<figure>, \\<td>。footer內通常會包含作者、版權等資訊。footer元素不是父區塊的內容之一，所以並不會出現在outline中。在address元素中的作者資訊也可以放在footer裡面。\n```html\n<footer>\n  <p>Posted by: Hege Refsnes</p>\n  <p>Contact information: <a href=\"mailto:someone@example.com\">\n  someone@example.com</a>.</p>\n</footer>\n```\n\n###\\<figure>\n這也是一個常被誤用的標籤，頻率大概僅次於section。先看看它的定義：\n> The figure element represents a unit of content, optionally with a caption, that is self-contained, that is typically referenced as a single unit from the main flow of the document, and that can be moved away from the main flow of the document without affecting the document’s meaning.\n\n簡單來說，figure是一個有完整內容的區塊，他是主要內容的一部分，而且可以任意移動位置而不影響整體內容的表達。常見的問題是把每個img都包上figure，這完全沒有意義。簡單的判斷方式是想想看＂我把這個figure拿掉會不會影響到上下文的閱讀？＂，如果會的話，他就絕對不該是一個figure。\nfigure絕對不是只拿來包圖片的，他可以包含影音檔、圖表（可能是canvas或是svg）或是一段code。他跟aside的差別在於：\n\n* aside和主內容有關，但不是主內容的一部分\n* figure是主內容的一部分，但是他可以任意移動或刪除而不影響主內容的表達。\n\n通常figure會搭配\\<figcaption>服用，他放在第一個或最後一個子元素，像這樣：\n```html\n<figure>\n  <img src=\"/macaque.jpg\" alt=\"Macaque in the trees\">\n  <figcaption>A cheeky macaque, Lower Kintaganban River, Borneo. Original by <a href=\"http://www.flickr.com/photos/rclark/\">Richard Clark</a></figcaption>\n</figure>\n```\n範例可以參考[HTML5 Doctor](http://html5doctor.com/the-figure-figcaption-elements/)\n\n##其他\n---\n* IE8以下不支援HTML5，可以用[HTML5shiv](https://code.google.com/p/html5shiv/)來補足。\n* 如果沒有十足的把握，可以先用一般的寫法完成頁面，然後再去做語意化的動作。不當的語意化對SEO來說是個悲劇。\n* XDite大大在[如何設計出正確語意的 HTML5](http://wp.xdite.net/?p=3071)有提到＂不要對任何語意TAG下style，否則當需要調整語意結構時，會天下大亂＂，可能是我太菜，不知道為什麼會這樣說，也找不到相關的文章。如果每個semantic tag外面都包個div，這樣的code會比較好嗎？\n\n##參考\n---\n[MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element)\n[W3School](http://www.w3schools.com/html/html5_semantic_elements.asp)\n[HTML5Doctor](http://html5doctor.com/)\n[Blog.XDite.net:如何設計出正確語意的 HTML5](http://wp.xdite.net/?p=3071)\n[避免常見的六種 HTML5 錯誤用法](http://waterlily-lsl.com/modules/article/view.article.php/c1/258)\n[HTML5 中 div section article 的区别](http://www.qianduan.net/html5-differences-in-the-div-section-article.html)","slug":"2014-02-04-note-of-semantic-html","published":1,"updated":"2015-03-20T15:21:28.197Z","photos":[],"link":"","_id":"ci7xdfowk000hkcpgf5ttpk7o"},{"layout":"post","title":"[閒聊] WebClient端的關注點分離","date":"2014-02-03T02:55:00.000Z","comments":1,"_content":"內容出自[Javascript:patterns](http://shop.oreilly.com/product/9780596806767.do)第八章\n\nweb的client端可以分成三個主要的關注點，分別是：\n* Content(內容，HTML文件)\n* Presentation(表現，CSS樣式)\n* Behavior(行為，包含使用者互動及對文件的動態改變，通常使用Javascript)\n\n在做client端的規畫時，應該盡可能地保持關注點分離，有助於提升程式的品質及可維護性。 **關注點分離** 同樣可以和 **漸進式增強** 的觀念相輔相成：使用者從最基礎的內容（HTML）開始，隨著支援功能的增強而獲得更好的體驗（CSS, Javascript）。在實際應用中如下：\n* 將CSS關閉，確認網頁內容是否可以使用﹑內文是否可以閱讀\n* 將Javascript關閉，確保網頁主要功能還是可以正常運作，所有的連結都可以使用（所以不要用`href=\"#\"`），所有的表單都可以正常的提交。\n* 不要使用內嵌的事件處理器（例如`onclick`），或是內嵌的style屬性，因為這些東西不屬於內容層\n* 撰寫語意化的HTML\n\nJavascript的風格應為 **unobtrusive** ，意思是不應該擋到使用者的路，如果遇到不支援的瀏覽器也不應該讓頁面無法使用。另外，在處理瀏覽器差異時，應該用功能檢測取代瀏覽器偵測。\n\n##一點小感想\n---\n會寫這篇文章，是因為對書中有些地方有些不同的想法。我同意漸進式增強的觀念，同時也贊同關注點分離帶來的程式品質與可維護性，但是在有些狀況下，完美的關注點分離可能會降低使用者的最高體驗。例如SPA Web，在大量使用ajax的狀況下很難達到＂移除javascript仍然保持網站正常運作＂的條件，但是有必要為了這些極少數不支援javascript的使用者（無障礙網頁另當別論），去放棄大部分使用者的體驗嗎？記得之前看過某篇文章（原諒我找不到他），作者的觀點是＂ **給那些使用者一些提示，並引導他們前進** ＂，我想這個做法不論是對於使用者或是生產者而言都是好的。\n> 雖然[IE6,7使用者比例終於下跌了](http://arstechnica.com/information-technology/2013/10/internet-explorer-6-usage-drops-below-5-percent-in-september/)，但是廣大中國網民的IE6比率依舊讓人絕望阿...","source":"_posts/2014-02-03-note-webclient-side-separation-of-concerns.md","raw":"---\nlayout: post\ntitle: '[閒聊] WebClient端的關注點分離'\ndate: 2014-02-03 10:55\ncomments: true\ncategories: \n---\n內容出自[Javascript:patterns](http://shop.oreilly.com/product/9780596806767.do)第八章\n\nweb的client端可以分成三個主要的關注點，分別是：\n* Content(內容，HTML文件)\n* Presentation(表現，CSS樣式)\n* Behavior(行為，包含使用者互動及對文件的動態改變，通常使用Javascript)\n\n在做client端的規畫時，應該盡可能地保持關注點分離，有助於提升程式的品質及可維護性。 **關注點分離** 同樣可以和 **漸進式增強** 的觀念相輔相成：使用者從最基礎的內容（HTML）開始，隨著支援功能的增強而獲得更好的體驗（CSS, Javascript）。在實際應用中如下：\n* 將CSS關閉，確認網頁內容是否可以使用﹑內文是否可以閱讀\n* 將Javascript關閉，確保網頁主要功能還是可以正常運作，所有的連結都可以使用（所以不要用`href=\"#\"`），所有的表單都可以正常的提交。\n* 不要使用內嵌的事件處理器（例如`onclick`），或是內嵌的style屬性，因為這些東西不屬於內容層\n* 撰寫語意化的HTML\n\nJavascript的風格應為 **unobtrusive** ，意思是不應該擋到使用者的路，如果遇到不支援的瀏覽器也不應該讓頁面無法使用。另外，在處理瀏覽器差異時，應該用功能檢測取代瀏覽器偵測。\n\n##一點小感想\n---\n會寫這篇文章，是因為對書中有些地方有些不同的想法。我同意漸進式增強的觀念，同時也贊同關注點分離帶來的程式品質與可維護性，但是在有些狀況下，完美的關注點分離可能會降低使用者的最高體驗。例如SPA Web，在大量使用ajax的狀況下很難達到＂移除javascript仍然保持網站正常運作＂的條件，但是有必要為了這些極少數不支援javascript的使用者（無障礙網頁另當別論），去放棄大部分使用者的體驗嗎？記得之前看過某篇文章（原諒我找不到他），作者的觀點是＂ **給那些使用者一些提示，並引導他們前進** ＂，我想這個做法不論是對於使用者或是生產者而言都是好的。\n> 雖然[IE6,7使用者比例終於下跌了](http://arstechnica.com/information-technology/2013/10/internet-explorer-6-usage-drops-below-5-percent-in-september/)，但是廣大中國網民的IE6比率依舊讓人絕望阿...","slug":"2014-02-03-note-webclient-side-separation-of-concerns","published":1,"updated":"2015-03-20T15:21:28.193Z","photos":[],"link":"","_id":"ci7xdfowm000ikcpg34y6drw5"},{"layout":"post","title":"[筆記] Javascript Image Beacon","date":"2014-02-03T02:22:00.000Z","comments":1,"_content":"在javascript中，要對Server發出GET請求，除了慣用的ajax之外還有另外一個方法，叫做Image Beacon。方法如下：\n```javascript\nvar beacon = new Image(),\n    url = '/record.asp?',\n    params = [\n    \t'name=John', 'age=18'\n    ];\nbeacon.scr = url + params.join('&');\n```\n利用`Image`物件的`src`屬性來對伺服器發出GET請求，上面的範例對`/record.asp`發出了一個GET請求，並帶入參數`name`跟`age`。這個Image物件並不需要被Render到頁面中。\n\nImage Beacon跟ajax的差別在於：\n* 可跨域\n* 效能比XHR來的好\n* 只能使用GET，所以有長度限制\n\n這種方法常被用於 **只需要向Server發送數據** 的場合，例如蒐集統計數據。在這種情況下，Server可以回傳一個`204 No Content`的header，代表有收到這份訊息，避免客戶端持續等待。","source":"_posts/2014-02-03-experience-image-beacon.md","raw":"---\nlayout: post\ntitle: '[筆記] Javascript Image Beacon'\ndate: 2014-02-03 10:22\ncomments: true\ncategories: \n---\n在javascript中，要對Server發出GET請求，除了慣用的ajax之外還有另外一個方法，叫做Image Beacon。方法如下：\n```javascript\nvar beacon = new Image(),\n    url = '/record.asp?',\n    params = [\n    \t'name=John', 'age=18'\n    ];\nbeacon.scr = url + params.join('&');\n```\n利用`Image`物件的`src`屬性來對伺服器發出GET請求，上面的範例對`/record.asp`發出了一個GET請求，並帶入參數`name`跟`age`。這個Image物件並不需要被Render到頁面中。\n\nImage Beacon跟ajax的差別在於：\n* 可跨域\n* 效能比XHR來的好\n* 只能使用GET，所以有長度限制\n\n這種方法常被用於 **只需要向Server發送數據** 的場合，例如蒐集統計數據。在這種情況下，Server可以回傳一個`204 No Content`的header，代表有收到這份訊息，避免客戶端持續等待。","slug":"2014-02-03-experience-image-beacon","published":1,"updated":"2015-03-20T15:21:28.189Z","photos":[],"link":"","_id":"ci7xdfowq000jkcpgty7v941e"},{"layout":"post","title":"[筆記] CSS Media Query","date":"2014-01-22T21:29:00.000Z","comments":1,"_content":"最近在做RWD的練習，赫然發現自己的CSS有點弱阿...長久以來都習慣把一些東西交給javascript處理，是時候該打好CSS的根底了。（以上題外話）下面大概筆記一下關於Media Query的部分。\n\n##使用方式\n---\n有三種使用方式，第一種是在`<link>`Tag中將條件加入：\n```html\n<link rel=\"stylesheet\" media=\"screen and (min-width: 450px) and (max-width: 950px)\" href=\"style1.css\" />\n<link rel=\"stylesheet\" media=\"screen and (min-width: 950px)\" href=\"style2.css\" />\n<!-- 當螢幕寬度大於450小於950的時候引入style1，大於950的時候引入style2 -->\n```\n> `<link>`標籤中的`media`屬性是從html4就有的，只不過那時指定的只有media type，並不支援media query，同樣的，media type在css2中也可以使用。\n\n第二種是在CSS中的`@import`中加入條件：\n```css\n@import url(color.css) screen and (color);\n// 在彩色顯示下引入color.css\n```\n> 雖然我把他列出來，但請不要使用css的`@import`，他並不是標準的一部分，而且會拖慢網頁的效能。這點在[High Performance Web Sites](http://www.amazon.com/dp/0596529309?tag=stevsoud-20&camp=14573&creative=327641&linkCode=as1&creativeASIN=0596529309&adid=1S1KP4EV129EN37422C0&)中有提到，可以參考[這篇文章](http://www.stevesouders.com/blog/2009/04/09/dont-use-import/)。\n\n第三種是在css selector中加入條件：\n```css\n@media all and (min-width:500px) { … }\n@media (min-width:500px) { … }\n// 這兩者是一樣的\n```\n\n<!--more-->\n\n##運算子\n---\n###and\n...就是and，既不偉大也不卑微的and\n```css\n@media tv and (min-width: 700px) and (orientation: landscape) { ... }\n```\n\n###逗號\n作用等同於`or`，符合其中一個條件的都會套上style\n```css\n@media (min-width: 700px), handheld and (orientation: landscape) { ... }\n```\n\n###not\n下面三者的意義是一樣的\n```css\n@media not all and (monochrome) { ... }\n@media not (all and (monochrome)) { ... }\n@media (not all) and (monochrome) { ... }\n```\n`not`並不會影響到逗號之外的判斷式\n```css\n@media not screen and (color), print and (color)\n@media (not (screen and (color))), print and (color)\n// 上面兩個是一樣的\n```\n\n###only\n`only`會對於不支援media query的browser隱藏這份style，支援的劉覽器則會忽略這個字\n```html\n<link rel=\"stylesheet\" media=\"only screen and (color)\" href=\"example.css\" />\n```\n> 應該說，不支援Media Querie但正確讀取media type的瀏覽器，會因為media type不是\"only\"（可能是screen之類的），所以忽略這份樣式。如果browser不支援media type，不管怎樣都會忽略這份style。（如果我沒搞錯的話，連media type都不支援的應該是IE5之前的東西，大概是要用13張3.5吋磁片灌大富翁四的年代...）\n\n##features \n---\n請參閱[MDN](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries)。\n\n","source":"_posts/2014-01-23-note-css-media-query.md","raw":"---\nlayout: post\ntitle: '[筆記] CSS Media Query'\ndate: 2014-01-23 05:29\ncomments: true\ncategories: \n---\n最近在做RWD的練習，赫然發現自己的CSS有點弱阿...長久以來都習慣把一些東西交給javascript處理，是時候該打好CSS的根底了。（以上題外話）下面大概筆記一下關於Media Query的部分。\n\n##使用方式\n---\n有三種使用方式，第一種是在`<link>`Tag中將條件加入：\n```html\n<link rel=\"stylesheet\" media=\"screen and (min-width: 450px) and (max-width: 950px)\" href=\"style1.css\" />\n<link rel=\"stylesheet\" media=\"screen and (min-width: 950px)\" href=\"style2.css\" />\n<!-- 當螢幕寬度大於450小於950的時候引入style1，大於950的時候引入style2 -->\n```\n> `<link>`標籤中的`media`屬性是從html4就有的，只不過那時指定的只有media type，並不支援media query，同樣的，media type在css2中也可以使用。\n\n第二種是在CSS中的`@import`中加入條件：\n```css\n@import url(color.css) screen and (color);\n// 在彩色顯示下引入color.css\n```\n> 雖然我把他列出來，但請不要使用css的`@import`，他並不是標準的一部分，而且會拖慢網頁的效能。這點在[High Performance Web Sites](http://www.amazon.com/dp/0596529309?tag=stevsoud-20&camp=14573&creative=327641&linkCode=as1&creativeASIN=0596529309&adid=1S1KP4EV129EN37422C0&)中有提到，可以參考[這篇文章](http://www.stevesouders.com/blog/2009/04/09/dont-use-import/)。\n\n第三種是在css selector中加入條件：\n```css\n@media all and (min-width:500px) { … }\n@media (min-width:500px) { … }\n// 這兩者是一樣的\n```\n\n<!--more-->\n\n##運算子\n---\n###and\n...就是and，既不偉大也不卑微的and\n```css\n@media tv and (min-width: 700px) and (orientation: landscape) { ... }\n```\n\n###逗號\n作用等同於`or`，符合其中一個條件的都會套上style\n```css\n@media (min-width: 700px), handheld and (orientation: landscape) { ... }\n```\n\n###not\n下面三者的意義是一樣的\n```css\n@media not all and (monochrome) { ... }\n@media not (all and (monochrome)) { ... }\n@media (not all) and (monochrome) { ... }\n```\n`not`並不會影響到逗號之外的判斷式\n```css\n@media not screen and (color), print and (color)\n@media (not (screen and (color))), print and (color)\n// 上面兩個是一樣的\n```\n\n###only\n`only`會對於不支援media query的browser隱藏這份style，支援的劉覽器則會忽略這個字\n```html\n<link rel=\"stylesheet\" media=\"only screen and (color)\" href=\"example.css\" />\n```\n> 應該說，不支援Media Querie但正確讀取media type的瀏覽器，會因為media type不是\"only\"（可能是screen之類的），所以忽略這份樣式。如果browser不支援media type，不管怎樣都會忽略這份style。（如果我沒搞錯的話，連media type都不支援的應該是IE5之前的東西，大概是要用13張3.5吋磁片灌大富翁四的年代...）\n\n##features \n---\n請參閱[MDN](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries)。\n\n","slug":"2014-01-23-note-css-media-query","published":1,"updated":"2015-03-20T15:21:28.186Z","photos":[],"link":"","_id":"ci7xdfowt000kkcpguowick81"},{"layout":"post","title":"[筆記] Media query with LESS","date":"2014-01-22T23:08:00.000Z","comments":1,"_content":"在LESS中，對於Media Query有些更方便的寫法，下面舉一些例子：\n\n##嵌套\n---\n可以直接把`@media`當成selector寫，例如：\n```css\n.one {\n    @media (width: 400px) {\n        font-size: 1.2em;\n        @media print and color {\n            color: blue;\n        }\n    }\n}\n```\n會被編譯成\n```css\n@media (width: 400px) {\n  .one {\n    font-size: 1.2em;\n  }\n}\n@media (width: 400px) and print and color {\n  .one {\n    color: blue;\n  }\n}\n```\n\n<!--more-->\n\n\n##變數化\n---\n在1.4.0之後的版本，開啟嚴格模式的情況下，可以在Media Query中插入變數：\n```css\n@media screen, (max-width: @width) { ... }\n```\n你也可以把media query變數化，例如：\n```css\n@singleQuery: ~\"(max-width: 500px)\";\n@media screen, @singleQuery {\n    set {\n        padding: 3 3 3 3;\n    }\n}\n```\n會被編譯成\n```css\n@media screen, (max-width: 500px) {\n    set {\n        padding: 3 3 3 3;\n    }\n}\n```\n> 變數必須是一段完整的media query，像這樣會出錯：`@media screen and @partial { ... }`\n\n變數化的Media Query中也可以插進變數：\n```css\n@phoneValueMax: ( 599 / @bfs ) + 0em;\n@phone: ~\"screen and (max-width: @{phoneValueMax} )\";\n```\n##Mixin\n---\n也可以把它編成Mixin：\n```css\n@highdensity: ~\"only screen and (-webkit-min-device-pixel-ratio: 1.5)\",\n              ~\"only screen and (min--moz-device-pixel-ratio: 1.5)\",\n              ~\"only screen and (-o-min-device-pixel-ratio: 3/2)\",\n              ~\"only screen and (min-device-pixel-ratio: 1.5)\";\n```\n##參考\n---\n[LESS](http://www.lesscss.org/)\n[Variable media queries in Less CSS](http://blog.scur.pl/2012/06/variable-media-queries-less-css/)\n\n","source":"_posts/2014-01-23-experience-media-query-with-less.md","raw":"---\nlayout: post\ntitle: '[筆記] Media query with LESS'\ndate: 2014-01-23 07:08\ncomments: true\ncategories: \n---\n在LESS中，對於Media Query有些更方便的寫法，下面舉一些例子：\n\n##嵌套\n---\n可以直接把`@media`當成selector寫，例如：\n```css\n.one {\n    @media (width: 400px) {\n        font-size: 1.2em;\n        @media print and color {\n            color: blue;\n        }\n    }\n}\n```\n會被編譯成\n```css\n@media (width: 400px) {\n  .one {\n    font-size: 1.2em;\n  }\n}\n@media (width: 400px) and print and color {\n  .one {\n    color: blue;\n  }\n}\n```\n\n<!--more-->\n\n\n##變數化\n---\n在1.4.0之後的版本，開啟嚴格模式的情況下，可以在Media Query中插入變數：\n```css\n@media screen, (max-width: @width) { ... }\n```\n你也可以把media query變數化，例如：\n```css\n@singleQuery: ~\"(max-width: 500px)\";\n@media screen, @singleQuery {\n    set {\n        padding: 3 3 3 3;\n    }\n}\n```\n會被編譯成\n```css\n@media screen, (max-width: 500px) {\n    set {\n        padding: 3 3 3 3;\n    }\n}\n```\n> 變數必須是一段完整的media query，像這樣會出錯：`@media screen and @partial { ... }`\n\n變數化的Media Query中也可以插進變數：\n```css\n@phoneValueMax: ( 599 / @bfs ) + 0em;\n@phone: ~\"screen and (max-width: @{phoneValueMax} )\";\n```\n##Mixin\n---\n也可以把它編成Mixin：\n```css\n@highdensity: ~\"only screen and (-webkit-min-device-pixel-ratio: 1.5)\",\n              ~\"only screen and (min--moz-device-pixel-ratio: 1.5)\",\n              ~\"only screen and (-o-min-device-pixel-ratio: 3/2)\",\n              ~\"only screen and (min-device-pixel-ratio: 1.5)\";\n```\n##參考\n---\n[LESS](http://www.lesscss.org/)\n[Variable media queries in Less CSS](http://blog.scur.pl/2012/06/variable-media-queries-less-css/)\n\n","slug":"2014-01-23-experience-media-query-with-less","published":1,"updated":"2015-03-20T15:21:28.182Z","photos":[],"link":"","_id":"ci7xdfowv000lkcpgb7j6u54w"},{"layout":"post","title":"[筆記] 關於載入Script","date":"2014-01-17T01:02:00.000Z","comments":1,"_content":"最近在看[Javascript Patterns](http://www.tenlong.com.tw/items/9862764198?item_id=427729)這本書，剛好這陣子有碰到比較大的js data，就把書中一些關於Script讀取策略的部分整理一下。\n\n##Script Tag的屬性\n---\n`language`\n這個屬性有各種不同大小寫的格式，像是：`JavaScript`, `javascript`, `Javascript`，有時候還附帶版本號。但其實根本就不應該用這個屬性，因為預設語言就是JavaScript，版本號也運作得不好。\n> 註：W3C已經不推薦使用這個屬性\n\n`type`\nHTML4跟XHAML1標準會驗證這個屬性為必要，但其實不應該如此，因為預設就是JavaScript。HTML5已經將這個屬性改成非必要。\n\n`defer`\n這段指定的Script會在頁面Render結束之後才運作，HTML5有更方便的`async`屬性。\n> async跟defer的區別在於前者是在ParseDOM時載入Script並在載入完成後執行，後者則是在頁面載入結束後載入Script，並在載入完成後執行。一個小技巧是同時放上`async`跟`defer`，支援async的瀏覽器會忽略defer，不支援的則會使用defer。\n> 關於`defer`這個屬性，其實各瀏覽器實作的方式不一樣，許多現代瀏覽器，例如Chrome，預設就是在頁面Render結束後才載入`<head>`中有`src`的`<scripe>`。[這篇文章](http://mao.li/javascript/javascript-defer/)有作一些測試。\n\n##放置Script Tag的位置\n---\n`<script>`標籤會阻擋在他之後的事件，包括頁面render或下載，所以放置`<Script>`最好的位置是在`</body>`之前，這樣可以防止頁面載入被Scrtpt標籤阻擋而拖延。最差的方式則是在`<head>`中引入多個獨立的檔案，會佔去server許多不必要的連線數。\n> 個人經驗，有沒有pack成單一檔案對伺服器負載能力真的差蠻多的\n\n<!--more-->\n\n\n##HTTP分塊\n---\nHTTP協定支援分塊編碼，意思是你可以分批傳送頁面的片段。如果有一個非常複查的頁面，可以用像下面這種方法來分批傳送：\n```HTML\n<!doctype html>\n<html>\n<head>\n\t<title>My App</title>\n</head>\n<body>\n\t<div id=\"header\">\n  \t<!-- content1, like logo -->\n  </div>\n  // block1 end\n  <!-- content2, main content -->\n  // block2 end\n  <script src=\"main.js\"></script>\n</body>\n</html>\n// block3 end\n```\n先在第一區塊傳入部分標頭和主體，第二區塊傳入主要內容，第三區塊再傳入js檔為頁面添加特色和互動。這種作法十分符合漸進式增強和unobtrusive javascript的精神。\n\n##動態載入\n---\n要避免頁面render被script tag拖慢的問題，有下面幾種方法：\n* 用XHR請求來下載script，並用`eval()`來執行。不要這樣做。\n* 用`defer`和`async`屬性，但是有跨瀏覽器的問題。\n* 動態載入`<script>`元素   \n\n最後一種模式是個不錯的方法，像下面這樣：\n```js\nvar script = document.creatElement('script');\nscript.src = 'Main.js';\ndocument.documentElement.firstChild.appendChild(script);\n```\n上面簡單的產生了一個script元素，並把他append到`<head>`內。這種方法要注意順序的問題，可以用一個initScriptsArray來解決他：\n```js\nvar initScripts = [],\n\t\tinit = function(){\n    \t// for loop initScripts\n    };\ninitScripts.push(function(){\n\t// some script\n});\n```\n動態載入有很多應用方法，例如把它放到`</body>`前，確保使用者能先確認頁面的靜態內容，並趁這個時候載入互動相關的script，這種方法稱為lazy load（延遲載入）。或是依每個頁面行為或裝置的不同來分塊載入script，例如在mobile上部分較耗資源的效果可能會被停用，這時就可以不必載入那段script，這種方法稱為require load（隨選載入）。也可以在這一頁就預先載入下一頁需要的script，稱為preload（預先載入），不過使用這種方法必須注意，要讓預載的檔案只載入但不分析執行，因為不存在的DOM（下一頁的DOM）可能會造成錯誤。\n\n要下載一段script但不進行分析，可以用`<object>`元素來代替`<script>`：\n```js\nvar obj = document.creatElement('object');\nobj.data = 'preload.js';\n// 用data屬性代替src\ndocument.body.appendChild('obj');\n```\n> 書上有提到用image beacon的方式來處理IE，不過我找不到IE跟`<object>`之間發生了什麼事，為什麼要用Image beacon來處理這件事...\n\n預先載入模式可以套用各種類型的元件，例如圖片或影音檔案，主要用在可以預期使用者下一個行為的時候。例如在輸入帳號密碼時，就可以對登入後的頁面進行部分預載。\n\n","source":"_posts/2014-01-17-notes-on-loading-script.md","raw":"---\nlayout: post\ntitle: '[筆記] 關於載入Script'\ndate: 2014-01-17 09:02\ncomments: true\ncategories: \n---\n最近在看[Javascript Patterns](http://www.tenlong.com.tw/items/9862764198?item_id=427729)這本書，剛好這陣子有碰到比較大的js data，就把書中一些關於Script讀取策略的部分整理一下。\n\n##Script Tag的屬性\n---\n`language`\n這個屬性有各種不同大小寫的格式，像是：`JavaScript`, `javascript`, `Javascript`，有時候還附帶版本號。但其實根本就不應該用這個屬性，因為預設語言就是JavaScript，版本號也運作得不好。\n> 註：W3C已經不推薦使用這個屬性\n\n`type`\nHTML4跟XHAML1標準會驗證這個屬性為必要，但其實不應該如此，因為預設就是JavaScript。HTML5已經將這個屬性改成非必要。\n\n`defer`\n這段指定的Script會在頁面Render結束之後才運作，HTML5有更方便的`async`屬性。\n> async跟defer的區別在於前者是在ParseDOM時載入Script並在載入完成後執行，後者則是在頁面載入結束後載入Script，並在載入完成後執行。一個小技巧是同時放上`async`跟`defer`，支援async的瀏覽器會忽略defer，不支援的則會使用defer。\n> 關於`defer`這個屬性，其實各瀏覽器實作的方式不一樣，許多現代瀏覽器，例如Chrome，預設就是在頁面Render結束後才載入`<head>`中有`src`的`<scripe>`。[這篇文章](http://mao.li/javascript/javascript-defer/)有作一些測試。\n\n##放置Script Tag的位置\n---\n`<script>`標籤會阻擋在他之後的事件，包括頁面render或下載，所以放置`<Script>`最好的位置是在`</body>`之前，這樣可以防止頁面載入被Scrtpt標籤阻擋而拖延。最差的方式則是在`<head>`中引入多個獨立的檔案，會佔去server許多不必要的連線數。\n> 個人經驗，有沒有pack成單一檔案對伺服器負載能力真的差蠻多的\n\n<!--more-->\n\n\n##HTTP分塊\n---\nHTTP協定支援分塊編碼，意思是你可以分批傳送頁面的片段。如果有一個非常複查的頁面，可以用像下面這種方法來分批傳送：\n```HTML\n<!doctype html>\n<html>\n<head>\n\t<title>My App</title>\n</head>\n<body>\n\t<div id=\"header\">\n  \t<!-- content1, like logo -->\n  </div>\n  // block1 end\n  <!-- content2, main content -->\n  // block2 end\n  <script src=\"main.js\"></script>\n</body>\n</html>\n// block3 end\n```\n先在第一區塊傳入部分標頭和主體，第二區塊傳入主要內容，第三區塊再傳入js檔為頁面添加特色和互動。這種作法十分符合漸進式增強和unobtrusive javascript的精神。\n\n##動態載入\n---\n要避免頁面render被script tag拖慢的問題，有下面幾種方法：\n* 用XHR請求來下載script，並用`eval()`來執行。不要這樣做。\n* 用`defer`和`async`屬性，但是有跨瀏覽器的問題。\n* 動態載入`<script>`元素   \n\n最後一種模式是個不錯的方法，像下面這樣：\n```js\nvar script = document.creatElement('script');\nscript.src = 'Main.js';\ndocument.documentElement.firstChild.appendChild(script);\n```\n上面簡單的產生了一個script元素，並把他append到`<head>`內。這種方法要注意順序的問題，可以用一個initScriptsArray來解決他：\n```js\nvar initScripts = [],\n\t\tinit = function(){\n    \t// for loop initScripts\n    };\ninitScripts.push(function(){\n\t// some script\n});\n```\n動態載入有很多應用方法，例如把它放到`</body>`前，確保使用者能先確認頁面的靜態內容，並趁這個時候載入互動相關的script，這種方法稱為lazy load（延遲載入）。或是依每個頁面行為或裝置的不同來分塊載入script，例如在mobile上部分較耗資源的效果可能會被停用，這時就可以不必載入那段script，這種方法稱為require load（隨選載入）。也可以在這一頁就預先載入下一頁需要的script，稱為preload（預先載入），不過使用這種方法必須注意，要讓預載的檔案只載入但不分析執行，因為不存在的DOM（下一頁的DOM）可能會造成錯誤。\n\n要下載一段script但不進行分析，可以用`<object>`元素來代替`<script>`：\n```js\nvar obj = document.creatElement('object');\nobj.data = 'preload.js';\n// 用data屬性代替src\ndocument.body.appendChild('obj');\n```\n> 書上有提到用image beacon的方式來處理IE，不過我找不到IE跟`<object>`之間發生了什麼事，為什麼要用Image beacon來處理這件事...\n\n預先載入模式可以套用各種類型的元件，例如圖片或影音檔案，主要用在可以預期使用者下一個行為的時候。例如在輸入帳號密碼時，就可以對登入後的頁面進行部分預載。\n\n","slug":"2014-01-17-notes-on-loading-script","published":1,"updated":"2015-03-20T15:21:28.178Z","photos":[],"link":"","_id":"ci7xdfoww000mkcpgiv8kmzfx"},{"layout":"post","title":"[產出] 高雄捷運進站人數變化圖","date":"2014-01-15T06:37:00.000Z","comments":1,"_content":"Demo: [http://apolkingg8.github.io/DemoPages/KRT_logMap/demo.html](http://apolkingg8.github.io/DemoPages/KRT_logMap/demo.html)\n\n前陣子之前在社團看到北捷的運量變化圖，心血來潮就想說來個高捷版，不過基於各種原因拖到現在才做好XD\n\n剛開始猶豫很久，要用SVG還是Canvas還是純CSS，最後因為相容性的關係而選擇了SVG，不過最後做跨瀏覽器測試的時候還是有點問題（Opera有時候會卡住，平平都是Blink阿）。因為跟SVG不熟，做到後來有種想打掉重做的衝動（例如包裝架構，互動方式，還有那個根本沒必要的Slider...），不過還是等有空再說吧，好多預計要看要玩的東西都還沒動呢（跪","source":"_posts/2014-01-15--number-of-kaohsiung-mrt-station.md","raw":"---\nlayout: post\ntitle: '[產出] 高雄捷運進站人數變化圖'\ndate: 2014-01-15 14:37\ncomments: true\ncategories: \n---\nDemo: [http://apolkingg8.github.io/DemoPages/KRT_logMap/demo.html](http://apolkingg8.github.io/DemoPages/KRT_logMap/demo.html)\n\n前陣子之前在社團看到北捷的運量變化圖，心血來潮就想說來個高捷版，不過基於各種原因拖到現在才做好XD\n\n剛開始猶豫很久，要用SVG還是Canvas還是純CSS，最後因為相容性的關係而選擇了SVG，不過最後做跨瀏覽器測試的時候還是有點問題（Opera有時候會卡住，平平都是Blink阿）。因為跟SVG不熟，做到後來有種想打掉重做的衝動（例如包裝架構，互動方式，還有那個根本沒必要的Slider...），不過還是等有空再說吧，好多預計要看要玩的東西都還沒動呢（跪","slug":"2014-01-15--number-of-kaohsiung-mrt-station","published":1,"updated":"2015-03-20T15:21:28.168Z","photos":[],"link":"","_id":"ci7xdfowx000nkcpgjo7uwjam"},{"layout":"post","title":"[產出] 在圖片上留言的jQuery plugin - CommentOnPhoto","date":"2014-01-10T23:36:00.000Z","comments":1,"_content":"GitPage: [https://github.com/apolkingg8/CommentOnPhoto](https://github.com/apolkingg8/CommentOnPhoto)\nDemoPage: [http://apolkingg8.github.io/DemoPages/COP/demo.html](http://apolkingg8.github.io/DemoPages/COP/demo.html)\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/6060/blog/6071/post/175444/Tyy2HejRSuOhHPHZ3U7T_demo.png\" style=\"width:100%;height:100%;\" alt=\"demo.png\">\n\n之前在某些網站上看過這個功能，覺得還蠻好玩的，不過貌似沒有人把它元件化；剛好這幾天又不小心看到jquery widget factory這東西，於是就拿它做練習的題材了。其實把東西元件化還蠻有趣的，有助於釐清問題或需求的本質，也可以讓自己的Code更加的性感（？）。\n  \n有些東西看起來很簡單，做起來也不難，但是要包成元件就有點麻煩，要包成一個同時兼顧擴展性、相容性、可調性又易於使用的元件就...很考驗功力了XD。因為是第一次寫比較完整的jQuery Plugin，可能有很多需要改進的地方，關於使用上有任何問題或feedback都歡迎聯絡我：）。\n\n題外話，我開始佩服那些寫文件的人了，README.MD要寫得漂亮真的不簡單啊...\n\n","source":"_posts/2014-01-11-output-on-top-of-the-picture-message-jquery-plugin-commentonphoto.md","raw":"---\nlayout: post\ntitle: '[產出] 在圖片上留言的jQuery plugin - CommentOnPhoto'\ndate: 2014-01-11 07:36\ncomments: true\ncategories: \n---\nGitPage: [https://github.com/apolkingg8/CommentOnPhoto](https://github.com/apolkingg8/CommentOnPhoto)\nDemoPage: [http://apolkingg8.github.io/DemoPages/COP/demo.html](http://apolkingg8.github.io/DemoPages/COP/demo.html)\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/6060/blog/6071/post/175444/Tyy2HejRSuOhHPHZ3U7T_demo.png\" style=\"width:100%;height:100%;\" alt=\"demo.png\">\n\n之前在某些網站上看過這個功能，覺得還蠻好玩的，不過貌似沒有人把它元件化；剛好這幾天又不小心看到jquery widget factory這東西，於是就拿它做練習的題材了。其實把東西元件化還蠻有趣的，有助於釐清問題或需求的本質，也可以讓自己的Code更加的性感（？）。\n  \n有些東西看起來很簡單，做起來也不難，但是要包成元件就有點麻煩，要包成一個同時兼顧擴展性、相容性、可調性又易於使用的元件就...很考驗功力了XD。因為是第一次寫比較完整的jQuery Plugin，可能有很多需要改進的地方，關於使用上有任何問題或feedback都歡迎聯絡我：）。\n\n題外話，我開始佩服那些寫文件的人了，README.MD要寫得漂亮真的不簡單啊...\n\n","slug":"2014-01-11-output-on-top-of-the-picture-message-jquery-plugin-commentonphoto","published":1,"updated":"2015-03-20T15:21:28.165Z","photos":[],"link":"","_id":"ci7xdfowz000okcpgzs4sr37s"},{"layout":"post","title":"[心得] jQuery Widget Factory極簡教學","date":"2014-01-11T00:45:00.000Z","comments":1,"_content":"\n\n##簡介\njQuery Widget Factory是jQuery UI提供的一個方法，用Factory Mode來建立 **有狀態的** jQuery plugin。大多數的jQueryUI都是用這個方法產生的，例如`button`：\n```JS\n$.widget( \"ui.button\", {\n\t// ...\n  });\n```\n不過也有些是例外，像`datepicker`就不是用這個方法產生的。\n\n##如何使用\n這個方法是基於jQuery，而不是jQuery UI Core，但是他的位置是在jQueryui.js裡面，所以兩者都必須引入\n> 註：如果不需要其他jQueryUI的話，可以只載入jquery.ui.widget.js\n\n```html\n<script type=\"text/javascript\" src=\"Libs/jquery-1.9.1.js\"></script>\n<script type=\"text/javascript\" src=\"Libs/jquery-ui-1.10.3.js\"></script>\n```\n方法的格式如下：\n```js\n$.widget('namespace.uiName', [base], prototype)\n```\n`namespace`只能有一層，像jQueryUI就是用`ui.button`\n`[base]`可選，用來指定已存在的物件當作基底，預設值是`$.widget`。例如你想要以jqueryUI的`dialog`為基底產生一個新的plugin，就可以像這樣：\n```js\n$.widget( \"custom.superDialog\", $.ui.dialog, {\n    red: function() {\n        this.element.css( \"color\", \"red\" );\n    }\n});\n```\n`prototype`這個widget的prototype object，套件的方法及設定都在這裡實作。\n\n<!--more-->\n\n##簡單的範例\n下面是一個來自官網的簡單的範例，可以在jsBin玩玩看。\n\n首先，建立一個progressbar，然後設定他的初始化方法`_creat()`\n```js\n$.widget( \"custom.progressbar\", {\n    _create: function() {\n        var progress = \"%\";\n        this.element\n            .addClass( \"progressbar\" )\n            .text( progress );\n    }\n});\n```\n> 還有另一個方法`_init`，兩者間的差異請參考官方文件\n> 這裡有另一個重點是`this.element`。如果用一般方法作jquery plugin的話，取得的this是selector後的jquery物件群組，但是widget中的 **this.element永遠只有一個** ，如果你selector後的jquery物件群組有多個物件，他會 **對每個對象各執行一次** 。\n\n為這個pregressbar增加option，設定初始化的值。\n```js\n$.widget( \"custom.progressbar\", {\n\t\toptions: {\n    \tvalue: 20%\n    },\n    _create: function() {\n        var progress = this.options.value + \"%\";\n        this.element\n            .addClass( \"progressbar\" )\n            .text( progress );\n    }\n});\n```\n> `options`是內建屬性，套件的參數會以key-value pair的形式傳到這個物件裡面，在這裡我們給予參數`value`預設值`'20%'`。  \n\n為套件增加public method`getValue`\n```js\n$.widget( \"custom.myprogressbar\", {\n\toptions: {\n\t\tvalue: '20'\n\t},\n\tgetValue: function(){\n\t\treturn this.options.value;\n\t},\n\t_create: function() {\n\t\tvar progress = this.options.value + \"%\";\n\t\tthis.element.text( progress );\n\t}\n});\n```\n> widget factory提供了很簡單的作法去區分private與public：前面有加`_`的會實作為private，其餘則是public，很方便吧？\n\n接下來，初始化套件並傳遞參數\n```html\n<div class='progressDiv'></div>\n<div class='progressDiv'></div>\n```\n```js\n$('.progressDiv').myprogressbar({ \n\tvalue: 70\n});\n```\n試看看剛剛寫的方法\n```js\nconsole.log($('.progressDiv').myprogressbar('getValue')); // 70 * 2\n```\n完成了！恭喜你，你會製作（簡單的）jQuery plugin了XD\n[jsBin Demo](http://jsbin.com/oRIjaVa/1/edit?html,console,output)\n\n##參考文件\n[jQuery官網教程](http://learn.jquery.com/jquery-ui/widget-factory/)\n[Widget Factory API Document](http://api.jqueryui.com/jQuery.widget/#jQuery-widget1)\n\n##後記\n真的有點簡略阿（汗），其實製作過程中還有不少眉眉角角，不過一時之間不好整理出來，有機會再作補充。\n","source":"_posts/2014-01-11-experiencejquery-widget-factory.md","raw":"---\nlayout: post\ntitle: '[心得] jQuery Widget Factory極簡教學'\ndate: 2014-01-11 08:45\ncomments: true\ncategories: \n---\n\n\n##簡介\njQuery Widget Factory是jQuery UI提供的一個方法，用Factory Mode來建立 **有狀態的** jQuery plugin。大多數的jQueryUI都是用這個方法產生的，例如`button`：\n```JS\n$.widget( \"ui.button\", {\n\t// ...\n  });\n```\n不過也有些是例外，像`datepicker`就不是用這個方法產生的。\n\n##如何使用\n這個方法是基於jQuery，而不是jQuery UI Core，但是他的位置是在jQueryui.js裡面，所以兩者都必須引入\n> 註：如果不需要其他jQueryUI的話，可以只載入jquery.ui.widget.js\n\n```html\n<script type=\"text/javascript\" src=\"Libs/jquery-1.9.1.js\"></script>\n<script type=\"text/javascript\" src=\"Libs/jquery-ui-1.10.3.js\"></script>\n```\n方法的格式如下：\n```js\n$.widget('namespace.uiName', [base], prototype)\n```\n`namespace`只能有一層，像jQueryUI就是用`ui.button`\n`[base]`可選，用來指定已存在的物件當作基底，預設值是`$.widget`。例如你想要以jqueryUI的`dialog`為基底產生一個新的plugin，就可以像這樣：\n```js\n$.widget( \"custom.superDialog\", $.ui.dialog, {\n    red: function() {\n        this.element.css( \"color\", \"red\" );\n    }\n});\n```\n`prototype`這個widget的prototype object，套件的方法及設定都在這裡實作。\n\n<!--more-->\n\n##簡單的範例\n下面是一個來自官網的簡單的範例，可以在jsBin玩玩看。\n\n首先，建立一個progressbar，然後設定他的初始化方法`_creat()`\n```js\n$.widget( \"custom.progressbar\", {\n    _create: function() {\n        var progress = \"%\";\n        this.element\n            .addClass( \"progressbar\" )\n            .text( progress );\n    }\n});\n```\n> 還有另一個方法`_init`，兩者間的差異請參考官方文件\n> 這裡有另一個重點是`this.element`。如果用一般方法作jquery plugin的話，取得的this是selector後的jquery物件群組，但是widget中的 **this.element永遠只有一個** ，如果你selector後的jquery物件群組有多個物件，他會 **對每個對象各執行一次** 。\n\n為這個pregressbar增加option，設定初始化的值。\n```js\n$.widget( \"custom.progressbar\", {\n\t\toptions: {\n    \tvalue: 20%\n    },\n    _create: function() {\n        var progress = this.options.value + \"%\";\n        this.element\n            .addClass( \"progressbar\" )\n            .text( progress );\n    }\n});\n```\n> `options`是內建屬性，套件的參數會以key-value pair的形式傳到這個物件裡面，在這裡我們給予參數`value`預設值`'20%'`。  \n\n為套件增加public method`getValue`\n```js\n$.widget( \"custom.myprogressbar\", {\n\toptions: {\n\t\tvalue: '20'\n\t},\n\tgetValue: function(){\n\t\treturn this.options.value;\n\t},\n\t_create: function() {\n\t\tvar progress = this.options.value + \"%\";\n\t\tthis.element.text( progress );\n\t}\n});\n```\n> widget factory提供了很簡單的作法去區分private與public：前面有加`_`的會實作為private，其餘則是public，很方便吧？\n\n接下來，初始化套件並傳遞參數\n```html\n<div class='progressDiv'></div>\n<div class='progressDiv'></div>\n```\n```js\n$('.progressDiv').myprogressbar({ \n\tvalue: 70\n});\n```\n試看看剛剛寫的方法\n```js\nconsole.log($('.progressDiv').myprogressbar('getValue')); // 70 * 2\n```\n完成了！恭喜你，你會製作（簡單的）jQuery plugin了XD\n[jsBin Demo](http://jsbin.com/oRIjaVa/1/edit?html,console,output)\n\n##參考文件\n[jQuery官網教程](http://learn.jquery.com/jquery-ui/widget-factory/)\n[Widget Factory API Document](http://api.jqueryui.com/jQuery.widget/#jQuery-widget1)\n\n##後記\n真的有點簡略阿（汗），其實製作過程中還有不少眉眉角角，不過一時之間不好整理出來，有機會再作補充。\n","slug":"2014-01-11-experiencejquery-widget-factory","published":1,"updated":"2015-03-20T15:21:28.162Z","photos":[],"link":"","_id":"ci7xdfox0000pkcpgcbjdia9h"},{"layout":"post","title":"[產出] jQueryDatePicker民國版","date":"2014-01-04T02:21:00.000Z","comments":1,"_content":"GitPage:[https://github.com/apolkingg8/JQueryDatePickerTW](https://github.com/apolkingg8/JQueryDatePickerTW)\n\n雖然這東西網路上好像很多，不過幾乎都是去給setting然後改input.val而已，沒有考慮到後續的問題，像是直接改val然後render出錯誤的日曆、沒辦法西元與民國日曆並存、select沒有修、even會被蓋掉等等。於是就自己寫了一個比較方便完整的版本，一方面作為練習，一方面這東西用到的機會還蠻大的XD。\n\n使用方法和原本的datepicker完全一樣，datepicker原本的api應該都可以照常使用，如果有問題的話請在Git或這裡跟我說 :P\n\n","source":"_posts/2014-01-04-jquerydatepicker-republic-of-china.md","raw":"---\nlayout: post\ntitle: '[產出] jQueryDatePicker民國版'\ndate: 2014-01-04 10:21\ncomments: true\ncategories: \n---\nGitPage:[https://github.com/apolkingg8/JQueryDatePickerTW](https://github.com/apolkingg8/JQueryDatePickerTW)\n\n雖然這東西網路上好像很多，不過幾乎都是去給setting然後改input.val而已，沒有考慮到後續的問題，像是直接改val然後render出錯誤的日曆、沒辦法西元與民國日曆並存、select沒有修、even會被蓋掉等等。於是就自己寫了一個比較方便完整的版本，一方面作為練習，一方面這東西用到的機會還蠻大的XD。\n\n使用方法和原本的datepicker完全一樣，datepicker原本的api應該都可以照常使用，如果有問題的話請在Git或這裡跟我說 :P\n\n","slug":"2014-01-04-jquerydatepicker-republic-of-china","published":1,"updated":"2015-03-20T15:21:28.158Z","photos":[],"link":"","_id":"ci7xdfox2000qkcpgvnmkitdc"},{"layout":"post","title":"[筆記] prototype與__proto__","date":"2014-01-02T03:21:00.000Z","comments":1,"_content":"","source":"_posts/2014-01-02-notesprototype-with-proto.md","raw":"---\nlayout: post\ntitle: '[筆記] prototype與__proto__'\ndate: 2014-01-02 11:21\ncomments: true\ncategories: \n---\n","slug":"2014-01-02-notesprototype-with-proto","published":1,"updated":"2015-03-20T15:21:28.154Z","photos":[],"link":"","_id":"ci7xdfox5000rkcpgsepq1hap"},{"layout":"post","title":"[筆記] .NET NPOI","date":"2014-01-01T07:08:00.000Z","comments":1,"_content":"每次要用都忘記用法，未老先衰阿...\n\n筆記一些重點\n\n1. usage: `NPOI`, `NPOI.HSSF.UserModel`\n2. 先取得FileStream \n```\nFileStream fs = new FileStream(url, FileMode.Open, FileAccess.Read);\n```\n3. 產生HSSFWorkBook \n```\nHSSFWorkbook workbook = new HSSFWorkbook(fs)\n```\n4. 結構：Workbook -> Sheets -> Rows -> Cell\n5. Cell不要直接`ToString()`，會拿到算式。有`NumericCellValue`之類的屬性可用\n6. NuGet拿到的是1.5版，XSSF是2.0版的東西，不過還在alpha，有很多問題。\n7. 要注意很多政府機關文件的格式會錯誤，要開啟後再另存。\n\n小抱怨一下，某些政府機關的公開資料真的天殺的難找，還要從檔名逆推出文件格式編號再去猜相對應的路經...這是在玩國家寶藏嗎？","source":"_posts/2014-01-01-notenet-npoi.md","raw":"---\nlayout: post\ntitle: '[筆記] .NET NPOI'\ndate: 2014-01-01 15:08\ncomments: true\ncategories: [.Net, 筆記]\n---\n每次要用都忘記用法，未老先衰阿...\n\n筆記一些重點\n\n1. usage: `NPOI`, `NPOI.HSSF.UserModel`\n2. 先取得FileStream \n```\nFileStream fs = new FileStream(url, FileMode.Open, FileAccess.Read);\n```\n3. 產生HSSFWorkBook \n```\nHSSFWorkbook workbook = new HSSFWorkbook(fs)\n```\n4. 結構：Workbook -> Sheets -> Rows -> Cell\n5. Cell不要直接`ToString()`，會拿到算式。有`NumericCellValue`之類的屬性可用\n6. NuGet拿到的是1.5版，XSSF是2.0版的東西，不過還在alpha，有很多問題。\n7. 要注意很多政府機關文件的格式會錯誤，要開啟後再另存。\n\n小抱怨一下，某些政府機關的公開資料真的天殺的難找，還要從檔名逆推出文件格式編號再去猜相對應的路經...這是在玩國家寶藏嗎？","slug":"2014-01-01-notenet-npoi","published":1,"updated":"2015-03-20T15:21:28.152Z","photos":[],"link":"","_id":"ci7xdfox7000skcpgnkel1bbz"},{"layout":"post","title":"[筆記] Javascript : The Good Parts - 不良的部分","date":"2013-12-31T01:23:00.000Z","comments":1,"_content":"這章列出javascript一些可以輕鬆避用的問題功能。\n##==\n用`===`或`!==`來取代`==`或`!=`，因為後者在運算子兩邊型別不同時，會強制改變值的型別，而且規則十分複雜，下面列出一些有趣的例子：\n```js\n'' == '0' // false\n0 == '' // true\n0 == '0' // true\n\nfalse == 'false' // false\nfalse == '0' // true\n\nfalse == undefined // false\nfalse == null // false\nnull == undefined // true\n```\n詳細規則可以參考[這張](http://zero.milosz.ca)表，不過不要真的去背他阿（笑）\n##with敘述\n[with敘述](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with)提供了取用物件特性時的捷徑，但他的結果有時難以預料，因此應該避免使用他。作者認為with光是出現在語言中就已經拖慢了javascript的速度，這個語言沒有他會更好。\n##eval\n＂eval is evil＂這句耳熟能詳的話就是作者說的。他認為`eval`有以下的問題：\n\n* 難以閱讀\n* 拖慢效能\n* eval文段有太多權限，影響程式安全性\n\n基於上面這些問題，應該避免使用`eval`。`Function`建構式是`eval`的另外一種形式，同樣應該避免使用。`setTimeout`與`setInterval`函式可接受字串或函式作為引數，使用字串作為引數時，他們的行為就像`eval`，所以使用這兩個函式時應該避免以字串作為引數。\n> 關於'eval is evil'有不少的討論。部分的人認為應該在＂合理的需要＂而且＂你知道自己在幹什麼＂的情況下使用他，而不是如此斷定的禁用他。不過我還是傾向於後者，因為＂知道自己在幹什麼＂聽起來很簡單，事實上很難啊\n\n<!--more-->\n\n##continue\n`continue`會跳回迴圈的起始處。我還沒見過移除continue敘述後，沒有獲得改善的程式碼。\n> 這是作者說的，不是我說的\n\n##switch的案例掉落\n在javascript中，`switch-case`敘述在沒有break的情況下，會掉向下一個case：\n```js\nvar a = 'a';\nswitch(a){\n  case 'a':\n    document.write(' case1');\n  case 'b':\n    document.write(' case2');\n    break;\n  case 'c':\n    document.write(' case3'); \n}\n// case1 case2\n```\n這有時候會被當作一個trick，但作者認為＂程式語言裡最糟的功能，不是那些顯然危險或無用的功能，而是那些有用的、具有吸引力但又危險的功能。＂\n> 小插曲：其實作者之前也認為fall through的優點足以掩蓋缺點，直到他某天修改JSLint的Bug時膝蓋中了一箭...\n\n##無區塊的敘述\n不要為了省兩個字元捅自己或你的隊友。保持一致性有助於把事情做對。\n\n##++跟--\n在jsLint中這叫over trick。作者認為這會鼓勵一種魯莽草率的風格，大部分的buffer overrun都來自於這種風格的原始碼。\n\n##Bitwise運算子\n在JAVA中，bitwise運算子與整數一起工作，但javascript中沒有整數，只好把double轉成整數處理完後再轉回去。在多數語言中，bitwise離硬體很近而非常快速，但在javascript中卻不是這樣。\n\n##function敘述與function運算式\njavascript中同時擁有function敘述(function expression)與function運算式(function declaration)，下面兩者的意義是相等的：\n```js\nfunction foo() {}; // function declaration\nvar foo = function foo() {}; // function expression\n```\n作者認為後者的形式比較好，可以清楚的表現出＂函式也是個物件＂這個性質。此外，在if敘述中禁止使用function敘述，但多數的瀏覽器沒有理會這項規則，實作方式又各不相同，因而產生了可攜性的問題。\n\n##typed wrapper\njavascript有一組type wrapper，例如：\n```js\nvar a = new Boolean(false);\na.valueOf() // false\n```\n會產生一個有`valueOf`方法的物件，此方法回傳wrapper value。但事實上完全不需要這個功能，不要使用`new String``newNumber``new Boolean`這些方法，也避免使用`new Object`和`new Array`，改用`{}`與`[]`。\n##new\nnew運算子會建立繼承運算元的prototype成員的新物件，然後呼叫運算元，把新物件繫結至this。但是如果你忘了加new，運算元的this會指向window，這個問題無法被編譯器檢測出來，只能靠命名規則來協助。更好的方法是不用new。（這個問題在繼承模式的部分討論過，請參考[這裡](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch5.html)）\n##void\n在javascript中，void是個運算子，接受運算元並回傳undefined。這功能沒有用。\n> 學長，請容許我強調一遍，完全沒有用。","source":"_posts/2013-12-31-note-javascriptthe-good-parts-bad-part-2.md","raw":"---\nlayout: post\ntitle: '[筆記] Javascript : The Good Parts - 不良的部分'\ndate: 2013-12-31 09:23\ncomments: true\ncategories: [javascript, 筆記]\n---\n這章列出javascript一些可以輕鬆避用的問題功能。\n##==\n用`===`或`!==`來取代`==`或`!=`，因為後者在運算子兩邊型別不同時，會強制改變值的型別，而且規則十分複雜，下面列出一些有趣的例子：\n```js\n'' == '0' // false\n0 == '' // true\n0 == '0' // true\n\nfalse == 'false' // false\nfalse == '0' // true\n\nfalse == undefined // false\nfalse == null // false\nnull == undefined // true\n```\n詳細規則可以參考[這張](http://zero.milosz.ca)表，不過不要真的去背他阿（笑）\n##with敘述\n[with敘述](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with)提供了取用物件特性時的捷徑，但他的結果有時難以預料，因此應該避免使用他。作者認為with光是出現在語言中就已經拖慢了javascript的速度，這個語言沒有他會更好。\n##eval\n＂eval is evil＂這句耳熟能詳的話就是作者說的。他認為`eval`有以下的問題：\n\n* 難以閱讀\n* 拖慢效能\n* eval文段有太多權限，影響程式安全性\n\n基於上面這些問題，應該避免使用`eval`。`Function`建構式是`eval`的另外一種形式，同樣應該避免使用。`setTimeout`與`setInterval`函式可接受字串或函式作為引數，使用字串作為引數時，他們的行為就像`eval`，所以使用這兩個函式時應該避免以字串作為引數。\n> 關於'eval is evil'有不少的討論。部分的人認為應該在＂合理的需要＂而且＂你知道自己在幹什麼＂的情況下使用他，而不是如此斷定的禁用他。不過我還是傾向於後者，因為＂知道自己在幹什麼＂聽起來很簡單，事實上很難啊\n\n<!--more-->\n\n##continue\n`continue`會跳回迴圈的起始處。我還沒見過移除continue敘述後，沒有獲得改善的程式碼。\n> 這是作者說的，不是我說的\n\n##switch的案例掉落\n在javascript中，`switch-case`敘述在沒有break的情況下，會掉向下一個case：\n```js\nvar a = 'a';\nswitch(a){\n  case 'a':\n    document.write(' case1');\n  case 'b':\n    document.write(' case2');\n    break;\n  case 'c':\n    document.write(' case3'); \n}\n// case1 case2\n```\n這有時候會被當作一個trick，但作者認為＂程式語言裡最糟的功能，不是那些顯然危險或無用的功能，而是那些有用的、具有吸引力但又危險的功能。＂\n> 小插曲：其實作者之前也認為fall through的優點足以掩蓋缺點，直到他某天修改JSLint的Bug時膝蓋中了一箭...\n\n##無區塊的敘述\n不要為了省兩個字元捅自己或你的隊友。保持一致性有助於把事情做對。\n\n##++跟--\n在jsLint中這叫over trick。作者認為這會鼓勵一種魯莽草率的風格，大部分的buffer overrun都來自於這種風格的原始碼。\n\n##Bitwise運算子\n在JAVA中，bitwise運算子與整數一起工作，但javascript中沒有整數，只好把double轉成整數處理完後再轉回去。在多數語言中，bitwise離硬體很近而非常快速，但在javascript中卻不是這樣。\n\n##function敘述與function運算式\njavascript中同時擁有function敘述(function expression)與function運算式(function declaration)，下面兩者的意義是相等的：\n```js\nfunction foo() {}; // function declaration\nvar foo = function foo() {}; // function expression\n```\n作者認為後者的形式比較好，可以清楚的表現出＂函式也是個物件＂這個性質。此外，在if敘述中禁止使用function敘述，但多數的瀏覽器沒有理會這項規則，實作方式又各不相同，因而產生了可攜性的問題。\n\n##typed wrapper\njavascript有一組type wrapper，例如：\n```js\nvar a = new Boolean(false);\na.valueOf() // false\n```\n會產生一個有`valueOf`方法的物件，此方法回傳wrapper value。但事實上完全不需要這個功能，不要使用`new String``newNumber``new Boolean`這些方法，也避免使用`new Object`和`new Array`，改用`{}`與`[]`。\n##new\nnew運算子會建立繼承運算元的prototype成員的新物件，然後呼叫運算元，把新物件繫結至this。但是如果你忘了加new，運算元的this會指向window，這個問題無法被編譯器檢測出來，只能靠命名規則來協助。更好的方法是不用new。（這個問題在繼承模式的部分討論過，請參考[這裡](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch5.html)）\n##void\n在javascript中，void是個運算子，接受運算元並回傳undefined。這功能沒有用。\n> 學長，請容許我強調一遍，完全沒有用。","slug":"2013-12-31-note-javascriptthe-good-parts-bad-part-2","published":1,"updated":"2015-03-20T15:21:28.149Z","photos":[],"link":"","_id":"ci7xdfoxd000xkcpgvckqozek"},{"layout":"post","title":"[筆記] Javascript : The Good Parts - 糟糕的部分","date":"2013-12-24T00:44:00.000Z","comments":1,"_content":"##全域變數\njavascript最糟糕的一項特性，就是他對於全域變數的依賴。有三種可以宣告全域變數的方式：\n```js\nvar foo = 'value'; // 直接在最外層宣告\nwindow.foo = 'value' // window物件是所有全域變數的容器\nfoo = 'value' // 不經宣告就使用變數，稱為implied global\n```\n第三種原本的用意是對於初學者的體貼（蛤？），但這反而容易造成很難被找出來的bug。\n##範圍\n如同前面提到的，javascript沒有block scope，只有function scope，而且裡面還有變數抬升的特性。所以最好 **在每個區塊起始的地方宣告完區塊內所有變數** 。\n##分號的安插\njavascript有個試圖糾正錯誤的機制，它會自動幫你安插分號。不過這個機制有時候會造成更多的麻煩：\n```js\nreturn\n{\n\tstatus: true;\n};\n```\n上面的程式看起來很正常，不過javascript會認為你`return`後面忘了加上分號而貼心的幫你補上，於是就變成這樣：\n```js\nreturn; // undefind\n{\n\tstatus: true;\n};\n```\n所以撰寫javascript時應該採用K&R風格，把`{`放在句尾，可以避免類似的悲劇發生。\n<!--more-->\n\n##保留字\n作者認為有太多的保留字沒有被使用，造成命名上的麻煩（保留字不能用在變數或特性名稱）\n> 不過事實上，有一些是後來實作ECMA5有用到的\n\n##Unicode\n在設計javascript的年代，Unicode最多只到65536個字元，但現在已經突破百萬。\njavascript的字元是16位元，超出的部分以一對字元表示。Unicode把 **字元對** 當成一個字元，但對javascript來說是兩個。\n##typeof\ntypeof有許多非預期的狀況，例如：\n```js\ntypeof null // object\ntypeof [1, 2, 3] // object\ntypeof /a/ // 各瀏覽器實作不一致，可能是object或function\n```\n##parseInt\n`parseInt`是個把字串轉換為整數的函式，他會在遇到非數字字元的時候立即停止，例如：\n```js\nparseInt('16 say hi~ 17'); // 16\n```\n這函式還有另一個麻煩，如果字串的第一個字元是0，字串會依照八進位制做轉換，所以最好在每次使用時都帶入進位參數：\n```js\nparseInt('077'); // 63\nparseInt('077', 10); // 77\n```\n> 這點似乎在新版的Browser有fix過，沒有帶入參數就默認10進位\n\n##+運算子\n如果你希望 + 運算子是sum的作用，務必要檢查兩邊是不是\"都是\"數字。\n##浮點數\n這是最常被回報的bug。javascript採用[IEEE754標準](http://zh.wikipedia.org/wiki/IEEE_754)，導致他在處理十進位分數的時候會發生一些問題，例如：\n```JS\nconsole.log(0.1 + 0.2); // 0.30000000000000004\n```\n幸好，在整數運算的部分是正確的，所以可以先換成整數做運算在除回來。\n##NaN\n這也是個奇妙的東西，它的意義是＂非數值(not an number)＂，不過...\n```js\ntypeof NaN === 'number'; // true\n```\n還有更奇妙的\n```js\nNaN === NaN // false\nNaN !== NaN // true\n```\n這哪招阿...\n幸好javascript有提供一個檢查`NaN`的函式：\n```JS\nisNaN(NaN); // true\nisNaN(0); // false\nisNaN('hi~'); // true\nisNaN('0'); // false\n```\n> 這方法有點兩光阿...要檢查NaN還是得判斷兩次才行Orz\n\n還有一個`isFinite`函式，可以判斷＂值是否可以轉成數值＂，他會拒絕`NaN`跟`Infinity`。如果要確認值＂是不是數值(`number`)＂的話，需要自己加工：\n```js\nvar isNumber = function(value){\n\treturn typeof value === 'number' && isFinite(value);\n}\n```\n##偽陣列\n前面提過，javascript沒有真正的陣列，而是基於物件的偽陣列。跟真正的陣列相比，他的效能較差，但較容易使用。也因為這個特性的關係，`typeof`運算子沒有辦法區分物件跟陣列。為了判斷是否為陣列，需要把他的Constructor列入考慮：\n```js\nif(myValue && typeof myValue === 'object' \n\t\t&& myValue.constructor === Array){\n  //muValue is Array!\n}\n```\n如果陣列在不同的frame或window下建立，上面的測試可能給出false, 可以改成下面的形式：\n```js\nif(myValue && typeof myValue === 'object' \n    && typeof myValue.length === 'number'\n    && !(myValue.propertyIsEnumberable('length'))){\n  //muValue is Array!\n}\n```\n另外，`arguments`並不是個陣列，而是個具有length的物件，但上述測試會把它視為陣列；有時候我們會想要這種結果。\n##False類的值\n下面這些的值會被歸類在false：\n* 0 \t\t\t \t(number)\n* NaN \t\t \t(number)\n*\t''\t\t\t \t(String)\n* false \t \t(Boolean)\n* null \t\t  (Object)\n* undefind  (undefind)\n\nundefind跟NaN不是常數而是全域變數，可以去更改他們的值。應該不能這樣做，但真的可以。請千萬別這樣做。\n> 剛剛試了一下，這好像也會被Browser Fix掉...真可惜（喂！）\n\n##'hasOwnProperty'\n`hasOwnProperty`是個方法而非運算子，所以他有可能被覆蓋掉。（應該不會有人這麼白目吧？）\n\n##物件\nJavascript的物件從未真正為空，因為他們可以從prototype chain取得成員。下面是一個計算詞彙出現次數的範例:\n```js\nvar i;\nvar word;\nvar text = \"...some words and constructor\"\nvar words = text.toLowerCase().split(/[\\s,.]+/);\nvar count = {};\n\nfor(i = 0; i < words.length; i += 1){\n\tword = words[i];\n  if(count[word]){\n  \tcount[word] += 1;\n  } else {\n  \tcount[word] = 1;\n  }\n}\n```\n\ncount[constructor]會包含一串很長的字串（chrome是顯示`\"function Object() { [native code] }1\"`），因為count物件繼承Object.prototype，裡面也有一個constructor特性，他被轉成String然後在尾端加上1。所以應該跟for-in時一樣，用`hasOwnProperty`方法做檢查。","source":"_posts/2013-12-24-note-javascriptthe-good-parts-bad-part-1.md","raw":"---\nlayout: post\ntitle: '[筆記] Javascript : The Good Parts - 糟糕的部分'\ndate: 2013-12-24 08:44\ncomments: true\ncategories: [javascript, 筆記]\n---\n##全域變數\njavascript最糟糕的一項特性，就是他對於全域變數的依賴。有三種可以宣告全域變數的方式：\n```js\nvar foo = 'value'; // 直接在最外層宣告\nwindow.foo = 'value' // window物件是所有全域變數的容器\nfoo = 'value' // 不經宣告就使用變數，稱為implied global\n```\n第三種原本的用意是對於初學者的體貼（蛤？），但這反而容易造成很難被找出來的bug。\n##範圍\n如同前面提到的，javascript沒有block scope，只有function scope，而且裡面還有變數抬升的特性。所以最好 **在每個區塊起始的地方宣告完區塊內所有變數** 。\n##分號的安插\njavascript有個試圖糾正錯誤的機制，它會自動幫你安插分號。不過這個機制有時候會造成更多的麻煩：\n```js\nreturn\n{\n\tstatus: true;\n};\n```\n上面的程式看起來很正常，不過javascript會認為你`return`後面忘了加上分號而貼心的幫你補上，於是就變成這樣：\n```js\nreturn; // undefind\n{\n\tstatus: true;\n};\n```\n所以撰寫javascript時應該採用K&R風格，把`{`放在句尾，可以避免類似的悲劇發生。\n<!--more-->\n\n##保留字\n作者認為有太多的保留字沒有被使用，造成命名上的麻煩（保留字不能用在變數或特性名稱）\n> 不過事實上，有一些是後來實作ECMA5有用到的\n\n##Unicode\n在設計javascript的年代，Unicode最多只到65536個字元，但現在已經突破百萬。\njavascript的字元是16位元，超出的部分以一對字元表示。Unicode把 **字元對** 當成一個字元，但對javascript來說是兩個。\n##typeof\ntypeof有許多非預期的狀況，例如：\n```js\ntypeof null // object\ntypeof [1, 2, 3] // object\ntypeof /a/ // 各瀏覽器實作不一致，可能是object或function\n```\n##parseInt\n`parseInt`是個把字串轉換為整數的函式，他會在遇到非數字字元的時候立即停止，例如：\n```js\nparseInt('16 say hi~ 17'); // 16\n```\n這函式還有另一個麻煩，如果字串的第一個字元是0，字串會依照八進位制做轉換，所以最好在每次使用時都帶入進位參數：\n```js\nparseInt('077'); // 63\nparseInt('077', 10); // 77\n```\n> 這點似乎在新版的Browser有fix過，沒有帶入參數就默認10進位\n\n##+運算子\n如果你希望 + 運算子是sum的作用，務必要檢查兩邊是不是\"都是\"數字。\n##浮點數\n這是最常被回報的bug。javascript採用[IEEE754標準](http://zh.wikipedia.org/wiki/IEEE_754)，導致他在處理十進位分數的時候會發生一些問題，例如：\n```JS\nconsole.log(0.1 + 0.2); // 0.30000000000000004\n```\n幸好，在整數運算的部分是正確的，所以可以先換成整數做運算在除回來。\n##NaN\n這也是個奇妙的東西，它的意義是＂非數值(not an number)＂，不過...\n```js\ntypeof NaN === 'number'; // true\n```\n還有更奇妙的\n```js\nNaN === NaN // false\nNaN !== NaN // true\n```\n這哪招阿...\n幸好javascript有提供一個檢查`NaN`的函式：\n```JS\nisNaN(NaN); // true\nisNaN(0); // false\nisNaN('hi~'); // true\nisNaN('0'); // false\n```\n> 這方法有點兩光阿...要檢查NaN還是得判斷兩次才行Orz\n\n還有一個`isFinite`函式，可以判斷＂值是否可以轉成數值＂，他會拒絕`NaN`跟`Infinity`。如果要確認值＂是不是數值(`number`)＂的話，需要自己加工：\n```js\nvar isNumber = function(value){\n\treturn typeof value === 'number' && isFinite(value);\n}\n```\n##偽陣列\n前面提過，javascript沒有真正的陣列，而是基於物件的偽陣列。跟真正的陣列相比，他的效能較差，但較容易使用。也因為這個特性的關係，`typeof`運算子沒有辦法區分物件跟陣列。為了判斷是否為陣列，需要把他的Constructor列入考慮：\n```js\nif(myValue && typeof myValue === 'object' \n\t\t&& myValue.constructor === Array){\n  //muValue is Array!\n}\n```\n如果陣列在不同的frame或window下建立，上面的測試可能給出false, 可以改成下面的形式：\n```js\nif(myValue && typeof myValue === 'object' \n    && typeof myValue.length === 'number'\n    && !(myValue.propertyIsEnumberable('length'))){\n  //muValue is Array!\n}\n```\n另外，`arguments`並不是個陣列，而是個具有length的物件，但上述測試會把它視為陣列；有時候我們會想要這種結果。\n##False類的值\n下面這些的值會被歸類在false：\n* 0 \t\t\t \t(number)\n* NaN \t\t \t(number)\n*\t''\t\t\t \t(String)\n* false \t \t(Boolean)\n* null \t\t  (Object)\n* undefind  (undefind)\n\nundefind跟NaN不是常數而是全域變數，可以去更改他們的值。應該不能這樣做，但真的可以。請千萬別這樣做。\n> 剛剛試了一下，這好像也會被Browser Fix掉...真可惜（喂！）\n\n##'hasOwnProperty'\n`hasOwnProperty`是個方法而非運算子，所以他有可能被覆蓋掉。（應該不會有人這麼白目吧？）\n\n##物件\nJavascript的物件從未真正為空，因為他們可以從prototype chain取得成員。下面是一個計算詞彙出現次數的範例:\n```js\nvar i;\nvar word;\nvar text = \"...some words and constructor\"\nvar words = text.toLowerCase().split(/[\\s,.]+/);\nvar count = {};\n\nfor(i = 0; i < words.length; i += 1){\n\tword = words[i];\n  if(count[word]){\n  \tcount[word] += 1;\n  } else {\n  \tcount[word] = 1;\n  }\n}\n```\n\ncount[constructor]會包含一串很長的字串（chrome是顯示`\"function Object() { [native code] }1\"`），因為count物件繼承Object.prototype，裡面也有一個constructor特性，他被轉成String然後在尾端加上1。所以應該跟for-in時一樣，用`hasOwnProperty`方法做檢查。","slug":"2013-12-24-note-javascriptthe-good-parts-bad-part-1","published":1,"updated":"2015-03-20T15:21:28.143Z","photos":[],"link":"","_id":"ci7xdfoxg0012kcpg7xq714ri"},{"layout":"post","title":"[閒聊] 從Blogger搬到Logdown","date":"2013-12-23T20:46:00.000Z","comments":1,"_content":"\n偶然在社群看到這個東西，試用過後有種 **\"寶貝~我終於找到你了\"** 的感覺XD\n可以用Markdown寫文章，又不必像Octorpess萬事手動，當下就決定把Blogger搬過來\n\n不過短暫的試用後，發現還是有些缺點，像是: \n    1. 以前從Chrome Console複製到Blogger會帶Style（應該說從任何地方都會），現在少了這個，只好把結果打在註解裡．\n    2. 然後之前的舊文轉過來也會有些走樣（很多style都不見了），所以要看原本的樣子可能要回到[Blogger](http://apolkingg8.blogspot.com)那邊看．\n    3. 社群資源有差（theme很少，bug修比較慢），畢竟這是要用時間累積的\n\n整體來說，還蠻喜歡這個平台的（其實是單純喜歡Markdown吧XD），如果這幾天沒發現什麼大問題的話，以後應該就會以這邊為主．\n\n\n","source":"_posts/2013-12-24-moved-from-blogger-to-logdown.md","raw":"---\nlayout: post\ntitle: '[閒聊] 從Blogger搬到Logdown'\ndate: 2013-12-24 04:46\ncomments: true\ncategories: [logdown, 閒聊]\n---\n\n偶然在社群看到這個東西，試用過後有種 **\"寶貝~我終於找到你了\"** 的感覺XD\n可以用Markdown寫文章，又不必像Octorpess萬事手動，當下就決定把Blogger搬過來\n\n不過短暫的試用後，發現還是有些缺點，像是: \n    1. 以前從Chrome Console複製到Blogger會帶Style（應該說從任何地方都會），現在少了這個，只好把結果打在註解裡．\n    2. 然後之前的舊文轉過來也會有些走樣（很多style都不見了），所以要看原本的樣子可能要回到[Blogger](http://apolkingg8.blogspot.com)那邊看．\n    3. 社群資源有差（theme很少，bug修比較慢），畢竟這是要用時間累積的\n\n整體來說，還蠻喜歡這個平台的（其實是單純喜歡Markdown吧XD），如果這幾天沒發現什麼大問題的話，以後應該就會以這邊為主．\n\n\n","slug":"2013-12-24-moved-from-blogger-to-logdown","published":1,"updated":"2015-03-20T15:21:28.138Z","photos":[],"link":"","_id":"ci7xdfoxi0016kcpg2zs9n14p"},{"layout":"post","title":"Hello World","date":"2013-12-23T19:59:00.000Z","comments":1,"_content":"Hi, This a **demo** post of [Logdown](http://logdown.com). \n\nLogdown use Markdown as main syntax, you can find more example by reading this [document on Wikipedia](http://en.wikipedia.org/wiki/Markdown)\n\nLogdown also support drag & drop image uploading. The picture syntax is like this:\n\n![](http://logdown.com/images/logo.png)\n\n## Bloging with code snippet:\n\n`inline code`\n\n### Plain Code\n\n```\nputs \"Hello World!\"\n```\n\n### Code with Language\n\n```javascript\nconsole.log(\"Hello World!\");\n```\n\n### Code with Title\n\n```ruby hello_world.rb\nputs \"Hello World!\"\n```\n\n\n## MathJax Example\n\n### Mathjax\n\n```mathjax\nx = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}\n```\n\n### Inline Mathjax\n\nThe answser is `$a^2 + b^2 = c^2$`.\n\n## Table Example\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 1         | Hello         | $1600 |\n| col 2         | Hello         |   $12 |\n| col 3         | Hello         |    $1 |\n","source":"_posts/2013-12-24-hello-world.md","raw":"---\nlayout: post\ntitle: 'Hello World'\ndate: 2013-12-24 03:59\ncomments: true\ncategories: \n---\nHi, This a **demo** post of [Logdown](http://logdown.com). \n\nLogdown use Markdown as main syntax, you can find more example by reading this [document on Wikipedia](http://en.wikipedia.org/wiki/Markdown)\n\nLogdown also support drag & drop image uploading. The picture syntax is like this:\n\n![](http://logdown.com/images/logo.png)\n\n## Bloging with code snippet:\n\n`inline code`\n\n### Plain Code\n\n```\nputs \"Hello World!\"\n```\n\n### Code with Language\n\n```javascript\nconsole.log(\"Hello World!\");\n```\n\n### Code with Title\n\n```ruby hello_world.rb\nputs \"Hello World!\"\n```\n\n\n## MathJax Example\n\n### Mathjax\n\n```mathjax\nx = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}\n```\n\n### Inline Mathjax\n\nThe answser is `$a^2 + b^2 = c^2$`.\n\n## Table Example\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 1         | Hello         | $1600 |\n| col 2         | Hello         |   $12 |\n| col 3         | Hello         |    $1 |\n","slug":"2013-12-24-hello-world","published":1,"updated":"2015-03-20T15:21:28.135Z","photos":[],"link":"","_id":"ci7xdfoxl001bkcpggv6hym5o"},{"layout":"post","title":"[筆記] Javascript : The Good Parts - Ch.9 風格","date":"2013-12-24T00:42:00.000Z","comments":1,"_content":"","source":"_posts/2013-12-24-168788.md","raw":"---\nlayout: post\ntitle: '[筆記] Javascript : The Good Parts - Ch.9 風格'\ndate: 2013-12-24 08:42\ncomments: true\ncategories: [javascript, 筆記]\n---\n","slug":"2013-12-24-168788","published":1,"updated":"2015-03-20T15:21:28.131Z","photos":[],"link":"","_id":"ci7xdfoxn001ckcpgk7r3j5m1"},{"layout":"post","title":"[筆記] Javascript : The Good Parts - Ch.6 陣列","date":"2013-12-19T08:16:00.000Z","comments":1,"_content":"此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch6.html)觀看原文．","source":"_posts/2013-12-19-javascript-good-parts-ch6.md","raw":"---\nlayout: post\ntitle: '[筆記] Javascript : The Good Parts - Ch.6 陣列'\ndate: 2013-12-19 16:16\ncomments: true\ncategories: [javascript, 筆記]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch6.html)觀看原文．","slug":"2013-12-19-javascript-good-parts-ch6","published":1,"updated":"2015-03-20T15:21:28.129Z","photos":[],"link":"","_id":"ci7xdfoxq001gkcpgs56xtg6t"},{"layout":"post","title":"[筆記] Javascript : The Good Parts - Ch.5 繼承 (二)","date":"2013-12-18T08:48:00.000Z","comments":1,"_content":"此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch5_19.html)觀看原文．","source":"_posts/2013-12-18-javascript-good-parts-ch5-19.md","raw":"---\nlayout: post\ntitle: '[筆記] Javascript : The Good Parts - Ch.5 繼承 (二)'\ndate: 2013-12-18 16:48\ncomments: true\ncategories: [javascript, 筆記]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch5_19.html)觀看原文．","slug":"2013-12-18-javascript-good-parts-ch5-19","published":1,"updated":"2015-03-20T15:21:28.126Z","photos":[],"link":"","_id":"ci7xdfoxt001kkcpgjzw6360x"},{"layout":"post","title":"[心得] GitHub Pages + Octopress on Windows初體驗","date":"2013-12-18T00:47:00.000Z","comments":1,"_content":"此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/github-pages-octopress-on-windows.html)觀看原文．","source":"_posts/2013-12-18-github-pages-octopress-on-windows.md","raw":"---\nlayout: post\ntitle: '[心得] GitHub Pages + Octopress on Windows初體驗'\ndate: 2013-12-18 08:47\ncomments: true\ncategories: [github, Octopress]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/github-pages-octopress-on-windows.html)觀看原文．","slug":"2013-12-18-github-pages-octopress-on-windows","published":1,"updated":"2015-03-20T15:21:28.123Z","photos":[],"link":"","_id":"ci7xdfoxv001okcpg0a0ncc0s"},{"layout":"post","title":"[筆記] Javascript : The Good Parts - Ch.5 繼承 (一)","date":"2013-12-13T23:27:00.000Z","comments":1,"_content":"此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch5.html)觀看原文．","source":"_posts/2013-12-14-javascript-good-parts-ch5.md","raw":"---\nlayout: post\ntitle: '[筆記] Javascript : The Good Parts - Ch.5 繼承 (一)'\ndate: 2013-12-14 07:27\ncomments: true\ncategories: [javascript, 筆記]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch5.html)觀看原文．","slug":"2013-12-14-javascript-good-parts-ch5","published":1,"updated":"2015-03-20T15:21:28.120Z","photos":[],"link":"","_id":"ci7xdfoxy001tkcpg50w3o4nd"},{"layout":"post","title":"[筆記] Javascript : The Good Parts - Ch.4 函式 (三)","date":"2013-12-11T01:21:00.000Z","comments":1,"_content":"此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch4_11.html)觀看原文．","source":"_posts/2013-12-11-javascript-good-parts-ch4-11.md","raw":"---\nlayout: post\ntitle: '[筆記] Javascript : The Good Parts - Ch.4 函式 (三)'\ndate: 2013-12-11 09:21\ncomments: true\ncategories: [javascript, 筆記]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch4_11.html)觀看原文．","slug":"2013-12-11-javascript-good-parts-ch4-11","published":1,"updated":"2015-03-20T15:21:28.117Z","photos":[],"link":"","_id":"ci7xdfoy0001xkcpgalrfy8xl"},{"layout":"post","title":"[筆記] Javascript : The Good Parts - Ch.4 函式 (二)","date":"2013-12-09T03:18:00.000Z","comments":1,"_content":"此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch4_9.html)觀看原文．","source":"_posts/2013-12-09-javascript-good-parts-ch4-9.md","raw":"---\nlayout: post\ntitle: '[筆記] Javascript : The Good Parts - Ch.4 函式 (二)'\ndate: 2013-12-09 11:18\ncomments: true\ncategories: [javascript, 筆記]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch4_9.html)觀看原文．","slug":"2013-12-09-javascript-good-parts-ch4-9","published":1,"updated":"2015-03-20T15:21:28.114Z","photos":[],"link":"","_id":"ci7xdfoy20021kcpgec4hgedx"},{"layout":"post","title":"[閒聊] 微軟RWD研討會高雄場","date":"2013-12-07T00:47:00.000Z","comments":1,"_content":"此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/rwd.html)觀看原文．","source":"_posts/2013-12-07-168754.md","raw":"---\nlayout: post\ntitle: '[閒聊] 微軟RWD研討會高雄場'\ndate: 2013-12-07 08:47\ncomments: true\ncategories: [閒聊, 微軟, RWD]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/rwd.html)觀看原文．","slug":"2013-12-07-168754","published":1,"updated":"2015-03-20T15:21:28.111Z","photos":[],"link":"","_id":"ci7xdfoy40025kcpgwhvsdp6u"},{"layout":"post","title":"[筆記] Javascript : The Good Parts - Ch.4 函式 (一)","date":"2013-12-04T02:02:00.000Z","comments":1,"_content":"此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch4.html)觀看原文．","source":"_posts/2013-12-04-javascript-good-parts-ch4.md","raw":"---\nlayout: post\ntitle: '[筆記] Javascript : The Good Parts - Ch.4 函式 (一)'\ndate: 2013-12-04 10:02\ncomments: true\ncategories: [javascript, 筆記]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch4.html)觀看原文．","slug":"2013-12-04-javascript-good-parts-ch4","published":1,"updated":"2015-03-20T15:21:28.108Z","photos":[],"link":"","_id":"ci7xdfoy8002ckcpgef9f7z4a"},{"layout":"post","title":"[筆記] Javascript : The Good Parts - Ch.3 物件","date":"2013-12-03T01:17:00.000Z","comments":1,"_content":"此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch3.html)觀看原文．","source":"_posts/2013-12-03-javascript-good-parts-ch3.md","raw":"---\nlayout: post\ntitle: '[筆記] Javascript : The Good Parts - Ch.3 物件'\ndate: 2013-12-03 09:17\ncomments: true\ncategories: [javascript, 筆記]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch3.html)觀看原文．","slug":"2013-12-03-javascript-good-parts-ch3","published":1,"updated":"2015-03-20T15:21:28.105Z","photos":[],"link":"","_id":"ci7xdfoya002gkcpg5a8rtio6"},{"layout":"post","title":"[筆記] Javascript : The Good Parts - Ch.2 文法","date":"2013-12-02T01:12:00.000Z","comments":1,"_content":"此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch2.html)觀看原文．","source":"_posts/2013-12-02-javascript-good-parts-ch2.md","raw":"---\nlayout: post\ntitle: '[筆記] Javascript : The Good Parts - Ch.2 文法'\ndate: 2013-12-02 09:12\ncomments: true\ncategories: [javascript, 筆記]\n---\n此篇文章位於[舊的Blogger](http://apolkingg8.blogspot.com/)，因為轉移過程中有格式缺漏，請[點此](http://apolkingg8.blogspot.com/2013/12/javascript-good-parts-ch2.html)觀看原文．","slug":"2013-12-02-javascript-good-parts-ch2","published":1,"updated":"2015-03-20T15:21:28.102Z","photos":[],"link":"","_id":"ci7xdfoyb002kkcpgwj93j8i5"},{"title":"learning es6 with babel - Class","_content":"es6中引入了`Class`關鍵字...先別緊張也別興奮，這不是什麼語言本質上的變革，它基本上只是一顆語法糖，\n功能跟我們慣用的`Klass`大同小異\n```js\nclass Animal {\n\n  constructor(name) {\n    this.name = name;\n  }\n\n  run() {\n    console.log(this.name + \" is running\");\n  }\n}\n```\n","source":"_drafts/learning-es6-with-babel-Class.md","raw":"title: learning es6 with babel - Class\ntags:\n---\nes6中引入了`Class`關鍵字...先別緊張也別興奮，這不是什麼語言本質上的變革，它基本上只是一顆語法糖，\n功能跟我們慣用的`Klass`大同小異\n```js\nclass Animal {\n\n  constructor(name) {\n    this.name = name;\n  }\n\n  run() {\n    console.log(this.name + \" is running\");\n  }\n}\n```\n","slug":"learning-es6-with-babel-Class","published":0,"date":"2015-03-20T15:21:28.087Z","updated":"2015-03-20T15:21:28.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci7xdfoye002okcpg7luekytq"}],"PostAsset":[],"PostCategory":[{"post_id":"ci7xdfox7000skcpgnkel1bbz","category_id":"ci7xdfox9000tkcpgj69jxl00","_id":"ci7xdfoxb000vkcpgf5jbczg3"},{"post_id":"ci7xdfox7000skcpgnkel1bbz","category_id":"ci7xdfoxa000ukcpgmwln1iq7","_id":"ci7xdfoxb000wkcpg15dad79s"},{"post_id":"ci7xdfoxd000xkcpgvckqozek","category_id":"ci7xdfoxd000ykcpgsecs4whd","_id":"ci7xdfoxf0010kcpg93xp9apu"},{"post_id":"ci7xdfoxd000xkcpgvckqozek","category_id":"ci7xdfoxe000zkcpgco3a1bz2","_id":"ci7xdfoxf0011kcpgenxskepo"},{"post_id":"ci7xdfoxg0012kcpg7xq714ri","category_id":"ci7xdfoxd000ykcpgsecs4whd","_id":"ci7xdfoxh0014kcpgxz2vewdg"},{"post_id":"ci7xdfoxg0012kcpg7xq714ri","category_id":"ci7xdfoxg0013kcpg2orp5fsy","_id":"ci7xdfoxh0015kcpg8a35xq57"},{"post_id":"ci7xdfoxi0016kcpg2zs9n14p","category_id":"ci7xdfoxj0017kcpgt5snpge9","_id":"ci7xdfoxj0019kcpgo1hrudcn"},{"post_id":"ci7xdfoxi0016kcpg2zs9n14p","category_id":"ci7xdfoxj0018kcpg3hdwfgzr","_id":"ci7xdfoxk001akcpgsmp29y1y"},{"post_id":"ci7xdfoxn001ckcpgk7r3j5m1","category_id":"ci7xdfoxd000ykcpgsecs4whd","_id":"ci7xdfoxp001ekcpgdgqgtf4b"},{"post_id":"ci7xdfoxn001ckcpgk7r3j5m1","category_id":"ci7xdfoxo001dkcpgzy1fmuoy","_id":"ci7xdfoxp001fkcpghlehwwpx"},{"post_id":"ci7xdfoxq001gkcpgs56xtg6t","category_id":"ci7xdfoxd000ykcpgsecs4whd","_id":"ci7xdfoxr001ikcpgygk5ucfx"},{"post_id":"ci7xdfoxq001gkcpgs56xtg6t","category_id":"ci7xdfoxr001hkcpggghqz307","_id":"ci7xdfoxr001jkcpg7wkv5f9t"},{"post_id":"ci7xdfoxt001kkcpgjzw6360x","category_id":"ci7xdfoxd000ykcpgsecs4whd","_id":"ci7xdfoxu001mkcpgctvmu5gu"},{"post_id":"ci7xdfoxt001kkcpgjzw6360x","category_id":"ci7xdfoxu001lkcpggz1jtyva","_id":"ci7xdfoxu001nkcpgxs3lhiw0"},{"post_id":"ci7xdfoxv001okcpg0a0ncc0s","category_id":"ci7xdfoxw001pkcpg6ihi56zd","_id":"ci7xdfoxx001rkcpg5ovvc7pm"},{"post_id":"ci7xdfoxv001okcpg0a0ncc0s","category_id":"ci7xdfoxw001qkcpg9rjli1gf","_id":"ci7xdfoxx001skcpg8w4so54j"},{"post_id":"ci7xdfoxy001tkcpg50w3o4nd","category_id":"ci7xdfoxd000ykcpgsecs4whd","_id":"ci7xdfoxz001vkcpg7vddarae"},{"post_id":"ci7xdfoxy001tkcpg50w3o4nd","category_id":"ci7xdfoxz001ukcpgi9dyl7tg","_id":"ci7xdfoxz001wkcpgxiw5eqxg"},{"post_id":"ci7xdfoy0001xkcpgalrfy8xl","category_id":"ci7xdfoxd000ykcpgsecs4whd","_id":"ci7xdfoy1001zkcpgo2cjr32d"},{"post_id":"ci7xdfoy0001xkcpgalrfy8xl","category_id":"ci7xdfoy1001ykcpggll8pry3","_id":"ci7xdfoy10020kcpgbrmxqomr"},{"post_id":"ci7xdfoy20021kcpgec4hgedx","category_id":"ci7xdfoxd000ykcpgsecs4whd","_id":"ci7xdfoy30023kcpgvkdvasa6"},{"post_id":"ci7xdfoy20021kcpgec4hgedx","category_id":"ci7xdfoy20022kcpgf6g34o45","_id":"ci7xdfoy30024kcpgv93g96mp"},{"post_id":"ci7xdfoy40025kcpgwhvsdp6u","category_id":"ci7xdfoy60026kcpgd5luuun9","_id":"ci7xdfoy70029kcpgvgj3pcdo"},{"post_id":"ci7xdfoy40025kcpgwhvsdp6u","category_id":"ci7xdfoy60027kcpgfse3ma2v","_id":"ci7xdfoy7002akcpg9kg3vzh6"},{"post_id":"ci7xdfoy40025kcpgwhvsdp6u","category_id":"ci7xdfoy60028kcpgjrpcbh5c","_id":"ci7xdfoy7002bkcpg90o1tmyd"},{"post_id":"ci7xdfoy8002ckcpgef9f7z4a","category_id":"ci7xdfoxd000ykcpgsecs4whd","_id":"ci7xdfoy9002ekcpgbwffbiqq"},{"post_id":"ci7xdfoy8002ckcpgef9f7z4a","category_id":"ci7xdfoy8002dkcpgiokbr6g9","_id":"ci7xdfoy9002fkcpgtmm5qqoy"},{"post_id":"ci7xdfoya002gkcpg5a8rtio6","category_id":"ci7xdfoxd000ykcpgsecs4whd","_id":"ci7xdfoyb002ikcpg4fwmmdo8"},{"post_id":"ci7xdfoya002gkcpg5a8rtio6","category_id":"ci7xdfoya002hkcpgy3f74fxg","_id":"ci7xdfoyb002jkcpgj7gwvj7a"},{"post_id":"ci7xdfoyb002kkcpgwj93j8i5","category_id":"ci7xdfoxd000ykcpgsecs4whd","_id":"ci7xdfoyc002mkcpgxhq8c1yh"},{"post_id":"ci7xdfoyb002kkcpgwj93j8i5","category_id":"ci7xdfoyc002lkcpg9cdtvb06","_id":"ci7xdfoye002nkcpgefcp6r6o"}],"PostTag":[{"post_id":"ci7xdfovp0004kcpg2m3x918c","tag_id":"ci7xdfovq0005kcpgks07bwau","_id":"ci7xdfovt0006kcpgmc16r7ng"}],"Tag":[{"name":"learning, es6","_id":"ci7xdfovq0005kcpgks07bwau"}]}}